/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 75);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Vector2 {
    constructor(x = 0.0, y = 0.0) {
        this.x = x;
        this.y = y;
    }
    setTo(x, y) {
        this.x = x;
        this.y = y;
    }
    copy(v) {
        this.x = v.x;
        this.y = v.y;
    }
    clone() {
        return new Vector2(this.x, this.y);
    }
    normalize() {
        var t = Math.sqrt(this.x * this.x + this.y * this.y) + Vector2.ZERO_TOLERANCE;
        this.x /= t;
        this.y /= t;
        return t;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    lengthSqrd() {
        return this.x * this.x + this.y * this.y;
    }
    clampScalar(max) {
        var l = this.length();
        if (l > max) {
            this.multEquals(max / l);
        }
    }
    clampVector(v) {
        this.x = Math.min(Math.max(this.x, -v.x), v.x);
        this.y = Math.min(Math.max(this.y, -v.y), v.y);
    }
    plusEquals(v) {
        this.x += v.x;
        this.y += v.y;
    }
    minusEquals(v) {
        this.x -= v.x;
        this.y -= v.y;
    }
    multEquals(s) {
        this.x *= s;
        this.y *= s;
    }
    plusMultEquals(v, s) {
        this.x += v.x * s;
        this.y += v.y * s;
    }
    minusMultEquals(v, s) {
        this.x -= v.x * s;
        this.y -= v.y * s;
    }
    dot(v) {
        return this.x * v.x + this.y * v.y;
    }
    cross(v) {
        return this.x * v.y - this.y * v.x;
    }
    leftHandNormal() {
        return new Vector2(this.y, -this.x);
    }
    leftHandNormalEquals() {
        var t = this.x;
        this.x = this.y;
        this.y = -t;
    }
    rightHandNormal() {
        return new Vector2(-this.y, this.x);
    }
    rightHandNormalEquals() {
        var t = this.x;
        this.x = -this.y;
        this.y = t;
    }
    reflectEquals(normal) {
        var d = this.dot(normal);
        this.x -= 2 * d * normal.x;
        this.y -= 2 * d * normal.y;
    }
    interpolate(v1, v2, t) {
        this.copy(v1);
        this.multEquals(1 - t);
        this.plusMultEquals(v2, t);
        // return v1.mult(1 - t).plus(v2.mult(t));
    }
    setAngle(angle) {
        var len = this.length();
        this.x = Math.cos(angle) * len;
        this.y = Math.sin(angle) * len;
    }
    rotateEquals(angle) {
        var a = angle * (Math.PI / 180);
        var cos = Math.cos(a);
        var sin = Math.sin(a);
        this.x = cos * this.x - sin * this.y;
        this.y = cos * this.y + sin * this.x;
    }
    setUnitRotation(angle) {
        var a = angle * (Math.PI / 180);
        this.x = Math.cos(a);
        this.y = Math.sin(a);
    }
    heading() {
        return Math.atan2(this.y, this.x);
    }
    distSqrd(v) {
        var dX = this.x - v.x;
        var dY = this.y - v.y;
        return dX * dX + dY * dY;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Vector2;

Vector2.ZERO_TOLERANCE = 1e-8;


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class System {
    constructor(components) {
        this.members = new Map();
        this.components = components.map(factory => factory.name);
    }
    addEntity(entity, components) {
        if (this.members.has(entity))
            return;
        const boundUpdate = this.updateEntity.bind(this, entity, ...components);
        const entry = { components, boundUpdate };
        this.members.set(entity, entry);
        this.onEntityAdded(entity, ...components);
    }
    onEntityAdded(entity, ...components) { }
    removeEntity(entity) {
        if (!this.members.has(entity))
            return;
        const entry = this.members.get(entity);
        this.onEntityRemoved(entity, ...entry.components);
        this.members.delete(entity);
    }
    onEntityRemoved(entity, ...components) { }
    updateSystem(dt, timestamp) {
        this.dt = dt;
        this.timestamp = timestamp;
        if (!this.preUpdate()) {
            return;
        }
        this.updateAllEntities();
        this.postUpdate();
    }
    preUpdate() {
        return true;
    }
    updateAllEntities() {
        for (let i of this.members.keys()) {
            this.members.get(i).boundUpdate();
        }
    }
    postUpdate() { }
    updateEntity(entity, ...components) { }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = System;



/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__collision_BFProxy__ = __webpack_require__(105);

class PhysicsCollision {
    constructor(isSensor, filter, contactCallbacks, limitToStaticCheck = false, forceAttachBody = null) {
        this.proxy = new __WEBPACK_IMPORTED_MODULE_0__collision_BFProxy__["a" /* BFProxy */]();
        this.proxy.isSensor = isSensor;
        this.proxy.filter = filter;
        this.proxy.contactCallbacks = contactCallbacks;
        this.proxy.limitToStaticCheck = limitToStaticCheck;
        if (forceAttachBody) {
            this.proxy.body = forceAttachBody;
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = PhysicsCollision;



/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__ = __webpack_require__(0);

class Position {
    constructor(x, y) {
        this.coords = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */](x, y);
        this.prevCoords = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */](x, y);
        this.direction = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */](1, 1);
    }
    update(position) {
        this.prevCoords.copy(this.coords);
        this.coords.copy(position);
    }
    clone() {
        var clone = new Position(this.coords.x, this.coords.y);
        clone.prevCoords.copy(this.prevCoords);
        clone.direction.copy(this.direction);
        return clone;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Position;



/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Active {
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Active;



/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__ = __webpack_require__(0);

class Extents {
    constructor(width, height, offsetX = 0, offsetY = 0) {
        this.halfWidths = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */](width, height);
        this.offset = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */](offsetX, offsetY);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Extents;



/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class PhysicsBody {
    constructor(body, setMassFromVolume = false) {
        this.body = body;
        this.setMassFromVolume = setMassFromVolume;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = PhysicsBody;



/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__signals_Signal__ = __webpack_require__(24);

class State {
    constructor(states, initalState, triggerInitialState) {
        this.states = states;
        this.currentState = initalState;
        this.messages = new __WEBPACK_IMPORTED_MODULE_0__signals_Signal__["a" /* Signal */]();
    }
    setState(state) {
        // if (state=="alive") {
        //     debugger;
        // }
        this.currentState = state;
        if (this.onChange != null) {
            this.onChange();
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = State;



/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export SetPseudoRandomSeed */
/* harmony export (immutable) */ __webpack_exports__["b"] = RandomFloat;
/* harmony export (immutable) */ __webpack_exports__["a"] = RandomBoolean;
/* harmony export (immutable) */ __webpack_exports__["d"] = RandomSign;
/* harmony export (immutable) */ __webpack_exports__["c"] = RandomInteger;
/* unused harmony export Pseudonumber */
let PseudoRandomSeed = 3489752;
function SetPseudoRandomSeed(seed) {
    PseudoRandomSeed = seed;
}
function RandomFloat(min, max) {
    return Math.random() * (max - min) + min;
}
function RandomBoolean(chance = 0.5) {
    return Math.random() < chance;
}
function RandomSign(chance = 0.5) {
    return Math.random() < chance ? 1 : -1;
}
function RandomInteger(min, max) {
    return Math.floor(RandomFloat(min, max));
}
function Pseudonumber() {
    PseudoRandomSeed = (PseudoRandomSeed * 9301 + 49297) % 233280;
    return PseudoRandomSeed / 233280.0;
}


/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Moveable {
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Moveable;



/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Graphics {
    constructor(frameListId, initialFrameId = null) {
        this.frameListId = frameListId;
        this.initialFrameId = initialFrameId;
    }
    setFrame(value) {
        this.frame = value;
        if (this.sprite != null) {
            this.frame.updateSprite(this.sprite);
        }
    }
    setFrameId(id) {
        this.frame = this.frameList.getFrame(id);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Graphics;



/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class AABB2 {
    constructor(t = 0.0, r = 0.0, b = 0.0, l = 0.0) {
        this.l = Number.POSITIVE_INFINITY;
        this.t = Number.POSITIVE_INFINITY;
        this.r = Number.NEGATIVE_INFINITY;
        this.b = Number.NEGATIVE_INFINITY;
        this.t = t;
        this.r = r;
        this.b = b;
        this.l = l;
    }
    setToSweeptAABB(aabb, preditcedPosition) {
        this.l = aabb.position.x - aabb.extents.x;
        this.r = aabb.position.x + aabb.extents.x;
        this.t = aabb.position.y - aabb.extents.y;
        this.b = aabb.position.y + aabb.extents.y;
    }
    fromAABB(aabb) { }
    clone() {
        return new AABB2(this.t, this.r, this.b, this.l);
    }
    reset() {
        this.t = this.l = Number.POSITIVE_INFINITY;
        this.r = this.b = Number.NEGATIVE_INFINITY;
    }
    get width() {
        return this.r - this.l;
    }
    get height() {
        return this.b - this.t;
    }
    intersect(aabb) {
        if (this.l > aabb.r)
            return false;
        else if (this.r < aabb.l)
            return false;
        else if (this.t > aabb.b)
            return false;
        else if (this.b < aabb.t)
            return false;
        else
            return true;
    }
    addAABB(aabb) {
        if (aabb.t < this.t)
            this.t = aabb.t;
        if (aabb.r > this.r)
            this.r = aabb.r;
        if (aabb.b > this.b)
            this.b = aabb.b;
        if (aabb.l < this.l)
            this.l = aabb.l;
    }
    combine(aabb) {
        const result = this.clone();
        result.addAABB(aabb);
        return result;
    }
    combine2(a, b) {
        this.t = Math.min(a.t, b.t);
        this.r = Math.max(a.r, b.r);
        this.b = Math.max(a.b, b.b);
        this.l = Math.min(a.l, b.l);
        return this;
    }
    addPoint(x, y) {
        if (x < this.l)
            this.l = x;
        if (x > this.r)
            this.r = x;
        if (y < this.t)
            this.t = y;
        if (y > this.b)
            this.b = y;
    }
    fitPoint(point) {
        if (point.x < this.l)
            point.x = this.l;
        if (point.x > this.r)
            point.x = this.r;
        if (point.y < this.t)
            point.y = this.t;
        if (point.y > this.b)
            point.y = this.b;
    }
    expand(i) {
        this.l -= i;
        this.r += i;
        this.t -= i;
        this.b += i;
    }
    expand2(width, height) {
        this.l += width / 2;
        this.r -= width / 2;
        this.t += height / 2;
        this.b -= height / 2;
    }
    contains(aabb) {
        if (this.l <= aabb.l && this.t <= aabb.t && aabb.b < this.b && aabb.r < this.r) {
            return true;
        }
        return false;
    }
    copy(aabb) {
        this.l = aabb.l;
        this.r = aabb.r;
        this.t = aabb.t;
        this.b = aabb.b;
    }
    copyAABB(aabb) {
        this.l = aabb.l;
        this.r = aabb.r;
        this.t = aabb.t;
        this.b = aabb.b;
    }
    transform(displacement) {
        this.l += displacement.x;
        this.r += displacement.x;
        this.t += displacement.y;
        this.b += displacement.y;
    }
    perimeter() {
        return 2 * (this.width + this.height);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = AABB2;



/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Filter {
    //e.g.
    //player.filter.categoryBits = 0x0002
    //player.filter.maskBits     = 0x0004
    //
    //enemy.filter.categoryBits  = 0x0004
    //enemy.filter.maskBits      = 0x0002
    //
    //Here, players an enemies will collide
    //overever players wont collide with player or monsters with mosters
    constructor(categoryBits = 0x1, maskBits = 0xffffffff, groupIndex = 0x0) {
        //Two positive and equal group indexs always collide
        //Two negative and equal group indexs never collide
        //Two zero group indexs are passed through
        this.groupIndex = 0;
        //What category this filter is in
        this.categoryBits = 0x0001;
        //What other categories it can collide with
        this.maskBits = 0xffffffff;
        this.categoryBits = categoryBits;
        this.maskBits = maskBits;
        this.groupIndex = groupIndex;
    }
    static CHECK(filterA, filterB) {
        if (filterA == null || filterB == null)
            return true;
        if (filterA.groupIndex == filterB.groupIndex && filterA.groupIndex != 0)
            return filterA.groupIndex > 0;
        return (filterA.maskBits & filterB.categoryBits) != 0 && (filterA.categoryBits & filterB.maskBits) != 0;
    }
    // if ((filterA.groupIndex > 0 && filterB.groupIndex > 0 && filterA.groupIndex == filterB.groupIndex)) {
    //     return false;
    // }
    // else {
    //     if ((filterA.maskBits & filterB.categoryBits) == 0) return false;
    //     if ((filterA.categoryBits & filterB.maskBits) == 0) return false;
    // }
    // return true;
    clone() {
        return new Filter(this.categoryBits, this.maskBits, this.groupIndex);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Filter;



/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Fixed {
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Fixed;



/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Material {
    constructor(density = 1, elasticity = 0.3, friction = 0.1) {
        this.density = density;
        this.elasticity = elasticity;
        this.friction = friction;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Material;

Material.NORMAL = new Material(1, 0.3, 0.1);
Material.LIGHTMETAL = new Material(1.4, 0.3, 0.1);
Material.ROCK = new Material(2.0, 0.2, 0.1);
Material.RUBBER = new Material(1, 1, 0.1);


/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Viewable {
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Viewable;



/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class TestFilters {
}
/* harmony export (immutable) */ __webpack_exports__["a"] = TestFilters;

//Categories
TestFilters.PLAYER_CAT = 0x1 << 2;
TestFilters.PROJECTILE_CAT = 0x1 << 3;
TestFilters.PROJECTILE_COLLIDABLE_CAT = 0x1 << 4;
TestFilters.SOLID_CAT = 0x1 << 5;
TestFilters.HOLDABLE_CAT = 0x1 << 6;
TestFilters.ph1_CAT = 0x1 << 7;
TestFilters.ph2_CAT = 0x1 << 8;
TestFilters.ph3_CAT = 0x1 << 9;
TestFilters.ph4_CAT = 0x1 << 10;
TestFilters.ph5_CAT = 0x1 << 11;
//Groups
TestFilters.PLAYER_GROUP = -1;
TestFilters.ENEMY_GROUP = -2;
TestFilters.TURRET_GROUP = -3;
TestFilters.BIRD_GROUP = -3;
TestFilters.SOLID_OBJECT_GROUP = 1; //e.g. Doors


/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class GraphicsAnimation {
    constructor(frameListId, animationId) {
        this.frameListId = frameListId;
        this.play(animationId);
    }
    play(animationId) {
        if (this.animationId === animationId)
            return;
        this.animationId = animationId;
        this.dirty = true;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = GraphicsAnimation;



/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Material__ = __webpack_require__(14);


const SLEEP_BIAS = 0.99332805041467;
const SLEEP_EPSILON = 0.0009;
const WAKE_MOTION = 10;
const MASS_SCALE = 1 / 10;
class Body {
    // public var sweep:AABB2 = new glaze.geom.AABB2();
    constructor(material = null, mass = 1) {
        this.position = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.positionCorrection = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.predictedPosition = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.delta = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.previousPosition = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.velocity = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.originalVelocity = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.previousVelocity = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.contactNormal = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.prevContactNormal = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.tangent = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.stepContactCount = 0;
        this.maxScalarVelocity = 1000;
        this.maxVelocity = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.forces = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.accumulatedForces = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.isBullet = false;
        this.damping = 1;
        this.globalForceFactor = 1;
        this.mass = 1;
        this.invMass = 1;
        this.dt = 0;
        this.motion = WAKE_MOTION;
        this.canSleep = false;
        this.isSleeping = false;
        this.onGround = false;
        this.onGroundPrev = false;
        this.inWater = false;
        this.inWaterPrev = false;
        this.usesStairs = true;
        this.collideOneWay = true;
        this.totalBounceCount = 0;
        this.bounceCount = 0;
        this.debug = 0;
        this.skip = false;
        this.material = material == null ? new __WEBPACK_IMPORTED_MODULE_1__Material__["a" /* Material */]() : material;
        this.setMass(mass);
    }
    update(dt, globalForces, globalDamping) {
        this.dt = dt;
        this.onGroundPrev = this.onGround;
        this.onGround = false;
        this.inWaterPrev = this.inWater;
        this.inWater = false;
        if (this.skip || this.isSleeping)
            return;
        this.motion = SLEEP_BIAS * this.motion + (1 - SLEEP_BIAS) * this.velocity.lengthSqrd();
        this.motion = Math.min(this.motion, 10 * SLEEP_EPSILON);
        this.canSleep = this.motion < SLEEP_EPSILON;
        this.previousVelocity.copy(this.velocity);
        //Add global forces to local ones
        this.forces.plusMultEquals(globalForces, this.globalForceFactor);
        this.velocity.plusEquals(this.forces);
        this.velocity.multEquals(globalDamping * this.damping);
        //Which velocity limiting type?
        // if (!isBullet) {
        if (this.maxScalarVelocity > 0) {
            this.velocity.clampScalar(this.maxScalarVelocity);
        }
        else {
            this.velocity.clampVector(this.maxVelocity);
        }
        // }
        this.originalVelocity.copy(this.velocity);
        this.predictedPosition.copy(this.position);
        this.predictedPosition.plusMultEquals(this.velocity, dt);
        this.previousPosition.copy(this.position);
        this.delta.copy(this.predictedPosition);
        this.delta.minusEquals(this.position);
        this.prevContactNormal.copy(this.contactNormal);
        this.contactNormal.setTo(0, 0);
        this.forces.setTo(0, 0);
        this.damping = 1;
        this.stepContactCount = 0;
        this.toi = Number.POSITIVE_INFINITY;
    }
    respondStaticCollision(contact) {
        if (this.skip)
            return false;
        var seperation = Math.max(contact.distance, 0);
        var penetration = Math.min(contact.distance, 0);
        //positionCorrection.x -= contact.normal.x * (penetration/dt);
        //positionCorrection.y -= contact.normal.y * (penetration/dt);
        this.positionCorrection.minusMultEquals(contact.normal, penetration / this.dt);
        var nv = this.velocity.dot(contact.normal) + seperation / this.dt;
        if (nv < 0) {
            this.stepContactCount++;
            //Cancel normal vel
            // velocity.x -= contact.normal.x * nv;
            // velocity.y -= contact.normal.y * nv;
            this.velocity.minusMultEquals(contact.normal, nv);
            //Item doesnt bounce? Surface is updwards?
            if (!this.canBounce && contact.normal.y < 0) {
                this.onGround = true;
                //Apply Friction here?
                // var tangent:Vector2 = contact.normal.rightHandNormal();
                // var tv:number = velocity.dot(tangent) * material.friction;
                // velocity.x -= tangent.x * tv;
                // velocity.y -= tangent.y * tv;
            }
            //store contact normal for later reflection
            this.contactNormal.copy(contact.normal);
            return true;
        }
        return false;
    }
    t(msg) {
        if (this.debug > 0) {
            this.debug--;
        }
    }
    respondBulletCollision(contact) {
        //Record the closest time
        if (contact.time <= this.toi) {
            this.toi = contact.time;
            this.positionCorrection.copy(contact.sweepPosition);
            this.contactNormal.copy(contact.normal);
            return true;
        }
        return false;
    }
    updatePosition() {
        if (this.skip || this.isSleeping)
            return;
        //Its a bullet and it hit something?
        if (this.isBullet) {
            if (this.toi < Number.POSITIVE_INFINITY) {
                this.position.copy(this.positionCorrection);
                this.originalVelocity.reflectEquals(this.contactNormal);
                //Fixme
                this.originalVelocity.multEquals(this.material.elasticity);
                this.velocity.copy(this.originalVelocity);
            }
            else {
                this.position.copy(this.predictedPosition);
            }
            return;
        }
        //This body isnt a bullet so...
        //apply Friction here
        if (this.stepContactCount > 0 && !this.canBounce && this.contactNormal.y < 0) {
            // if (stepContactCount>0 && contactNormal.y < 0) {
            //onGround = true;
            // var tangent:Vector2 = contactNormal.rightHandNormal();
            this.tangent.copy(this.contactNormal);
            this.tangent.rightHandNormalEquals();
            var tv = this.originalVelocity.dot(this.tangent) * this.material.friction;
            this.velocity.x -= this.tangent.x * tv;
            this.velocity.y -= this.tangent.y * tv;
        }
        this.positionCorrection.plusEquals(this.velocity);
        this.positionCorrection.multEquals(this.dt);
        this.position.plusEquals(this.positionCorrection);
        this.positionCorrection.setTo(0, 0);
        //Anything hit? Any bounces left?
        if (this.stepContactCount > 0 && this.canBounce) {
            //Reflect it...
            this.originalVelocity.reflectEquals(this.contactNormal);
            //Remove velocity
            this.originalVelocity.multEquals(this.material.elasticity);
            //Set the new velocity
            this.velocity.copy(this.originalVelocity);
            this.bounceCount++;
        }
    }
    addForce(f) {
        this.forces.plusMultEquals(f, this.invMass);
        this.wake();
    }
    addMasslessForce(f) {
        this.forces.plusEquals(f);
        this.wake();
    }
    addProportionalForce(f) {
        this.forces.plusMultEquals(f, this.mass);
        this.wake();
    }
    setMass(mass) {
        this.mass = mass;
        this.invMass = 1 / mass;
    }
    setMassFromVolumeMaterial(volume) {
        this.setMass(this.material.density * volume * MASS_SCALE);
    }
    setStaticPosition(x, y) {
        this.position.setTo(x, y);
        this.positionCorrection.setTo(0, 0);
        this.predictedPosition.setTo(0, 0);
        this.forces.setTo(0, 0);
        this.accumulatedForces.setTo(0, 0);
        this.velocity.setTo(0, 0);
        this.originalVelocity.setTo(0, 0);
        this.delta.setTo(0, 0);
        this.wake();
    }
    setBounces(count) {
        this.totalBounceCount = count;
        this.bounceCount = 0;
    }
    get canBounce() {
        return this.totalBounceCount != 0 && this.bounceCount < this.totalBounceCount;
    }
    wake() {
        this.canSleep = false;
        this.motion = WAKE_MOTION;
        this.bounceCount = 0;
    }
    get down() {
        return this.contactNormal.y < 0;
    }
    get downPrev() {
        return this.prevContactNormal.y < 0;
    }
    get up() {
        return this.contactNormal.y > 0;
    }
    get upPrev() {
        return this.prevContactNormal.y > 0;
    }
    get left() {
        return this.contactNormal.x < 0;
    }
    get leftPrev() {
        return this.prevContactNormal.x < 0;
    }
    get right() {
        return this.contactNormal.x > 0;
    }
    get rightPrev() {
        return this.prevContactNormal.x > 0;
    }
    static Create(material, mass, bounces, globalForceFactor, maxScalarVelocity) {
        var body = new Body(material);
        body.setMass(mass);
        body.setBounces(bounces);
        body.globalForceFactor = globalForceFactor;
        body.maxScalarVelocity = maxScalarVelocity;
        return body;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Body;



/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Health {
    constructor(maxHealth, currentHealth, recoveryPerSecond, onNoHealth) {
        this.maxHealth = maxHealth;
        this.currentHealth = currentHealth;
        this.recoveryPerSecond = recoveryPerSecond;
        this.recoveryPerMs = recoveryPerSecond / 1000;
        this.onNoHealth = onNoHealth;
    }
    applyDamage(damageAmount) {
        this.currentHealth -= damageAmount;
    }
    isDead() {
        return this.currentHealth <= 0;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Health;



/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Destroy {
    constructor(count) {
        this.count = count;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Destroy;



/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return EntityFilterOptions; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__physics_collision_Ray__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__BroadphaseAreaQuery__ = __webpack_require__(125);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_components_Destroy__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_components_Health__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__physics_components_PhysicsBody__ = __webpack_require__(6);





var EntityFilterOptions;
(function (EntityFilterOptions) {
    EntityFilterOptions[EntityFilterOptions["ALL"] = 0] = "ALL";
    EntityFilterOptions[EntityFilterOptions["FRIENDLY"] = 1] = "FRIENDLY";
    EntityFilterOptions[EntityFilterOptions["ENEMY"] = 2] = "ENEMY";
})(EntityFilterOptions || (EntityFilterOptions = {}));
class CombatUtils {
    constructor() { }
    static setup(engine, bf) {
        CombatUtils.engine = engine;
        CombatUtils.broadphase = bf;
        CombatUtils.bfAreaQuery = new __WEBPACK_IMPORTED_MODULE_1__BroadphaseAreaQuery__["a" /* BroadphaseAreaQuery */](engine, bf);
        CombatUtils.ray = new __WEBPACK_IMPORTED_MODULE_0__physics_collision_Ray__["a" /* Ray */]();
    }
    static CanSee(start, end, range) {
        if (start.distSqrd(end) >= range * range)
            return false;
        this.ray.initalize(start, end, 0, null);
        // trace("looking",start,end);
        this.broadphase.CastRay(this.ray, null, false, false);
        return !this.ray.hit;
    }
    static SearchSortAndFilter(position, radius, referenceEntity, filterOptions) {
        CombatUtils.referenceEntity = referenceEntity;
        CombatUtils.bfAreaQuery.query(position, radius, referenceEntity, true);
        // TODO
        // CombatUtils.bfAreaQuery.entityCollection.entities.sort(EntityCollectionItem.SortClosestFirst);
        // CombatUtils.bfAreaQuery.entityCollection.filter(FilterItems);
        // if (filterOptions == EntityFilterOptions.ENEMY)
        //     CombatUtils.bfAreaQuery.entityCollection.filter(FilterEnemyFactions);
        // else if (filterOptions == EntityFilterOptions.FRIENDLY)
        //     CombatUtils.bfAreaQuery.entityCollection.filter(FilterFriendlyFactions);
        return CombatUtils.bfAreaQuery.entityCollection;
    }
    static explode(position, radius, power, sourceEntity) {
        CombatUtils.bfAreaQuery.query(position, radius, sourceEntity, true);
        CombatUtils.bfAreaQuery.entityCollection.entities.forEach(item => {
            //var item = CombatUtils.bfAreaQuery.entityCollection.entities.head;
            if (!CombatUtils.engine.getComponentForEntity(item.entity, __WEBPACK_IMPORTED_MODULE_2__core_components_Destroy__["a" /* Destroy */])) {
                // if (item.entity.getComponent(Destroy)==null) {
                var health = CombatUtils.engine.getComponentForEntity(item.entity, __WEBPACK_IMPORTED_MODULE_3__core_components_Health__["a" /* Health */]);
                var body = CombatUtils.engine.getComponentForEntity(item.entity, __WEBPACK_IMPORTED_MODULE_4__physics_components_PhysicsBody__["a" /* PhysicsBody */]);
                if (health != null || body != null) {
                    var effect = radius / Math.sqrt(item.distance) * power;
                    // trace(item.distance);
                    // trace('e=$effect');
                    if (health != null) {
                        health.applyDamage(effect);
                    }
                    // var personality = item.entity.getComponent(Personality);
                    // if (personality!=null) {
                    //     personality.applyDamage(sourceEntity,"explosion",effect);
                    // }
                    if (body != null) {
                        var delta = body.body.position.clone();
                        delta.minusEquals(position);
                        delta.normalize();
                        delta.multEquals(effect);
                        body.body.addForce(delta);
                    }
                }
            }
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CombatUtils;



/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AABB2__ = __webpack_require__(11);


class AABB {
    constructor() {
        this.position = new __WEBPACK_IMPORTED_MODULE_0__Vector2__["a" /* Vector2 */]();
        this.extents = new __WEBPACK_IMPORTED_MODULE_0__Vector2__["a" /* Vector2 */]();
    }
    get l() {
        return this.position.x - this.extents.x;
    }
    get t() {
        return this.position.y - this.extents.y;
    }
    get r() {
        return this.position.x + this.extents.x;
    }
    get b() {
        return this.position.y + this.extents.y;
    }
    /*
     *  Standard AABB overlap.  Only returns a boolean, which isnt much use if you need to actually resolve anything.
     */
    overlap(aabb) {
        if (Math.abs(this.position.x - aabb.position.x) > (this.extents.x + aabb.extents.x))
            return false;
        if (Math.abs(this.position.y - aabb.position.y) > (this.extents.y + aabb.extents.y))
            return false;
        return true;
    }
    containsAABB(aabb) {
        return false;
    }
    containsPoint(point) {
        return (Math.abs(point.x - this.position.x) < this.extents.x && Math.abs(point.y - this.position.y) < this.extents.y);
    }
    overlapArea(aabb) {
        var _l = Math.max(this.l, aabb.l);
        var _r = Math.min(this.r, aabb.r);
        var _t = Math.max(this.t, aabb.t);
        var _b = Math.min(this.b, aabb.b);
        return (_r - _l) * (_b - _t);
    }
    area() {
        return this.extents.x * this.extents.y * 4;
    }
    toAABB2() {
        return new __WEBPACK_IMPORTED_MODULE_1__AABB2__["a" /* AABB2 */](this.t, this.r, this.b, this.l);
    }
    copyToAABB2(aabb2) {
        aabb2.t = this.t;
        aabb2.r = this.r;
        aabb2.b = this.b;
        aabb2.l = this.l;
    }
    clone(aabb) {
        var aabb = new AABB();
        aabb.position.copy(this.position);
        aabb.extents.copy(this.extents);
        return aabb;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = AABB;



/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Age {
    // public var stateOnExpired:String = EngineLifecycle.DESTROY;
    constructor(ttl, onExpire) {
        this.ttl = ttl;
        this.age = 0;
        this.onExpire = onExpire;
    }
    growOlder(tick) {
        this.age += tick;
        return this.isExpired();
    }
    isExpired() {
        return this.age > this.ttl;
    }
    reset() {
        this.age = 0;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Age;



/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__SignalBinding__ = __webpack_require__(80);

class Signal {
    constructor() {
        this._bindings = [];
        this._prevParams = null;
        this.memorize = false;
        this._shouldPropagate = true;
        this.active = true;
    }
    validateListener(listener, fnName) {
        if (typeof listener !== "function") {
            throw new Error("listener is a required param of {fn}() and should be a Function.".replace("{fn}", fnName));
        }
    }
    _registerListener(listener, isOnce, listenerContext, priority) {
        var prevIndex = this._indexOfListener(listener, listenerContext);
        var binding;
        if (prevIndex !== -1) {
            binding = this._bindings[prevIndex];
            if (binding.isOnce() !== isOnce) {
                throw new Error("You cannot add" +
                    (isOnce ? "" : "Once") +
                    "() then add" +
                    (!isOnce ? "" : "Once") +
                    "() the same listener without removing the relationship first.");
            }
        }
        else {
            binding = new __WEBPACK_IMPORTED_MODULE_0__SignalBinding__["a" /* SignalBinding */](this, listener, isOnce, listenerContext, priority);
            this._addBinding(binding);
        }
        if (this.memorize && this._prevParams) {
            binding.execute(this._prevParams);
        }
        return binding;
    }
    _addBinding(binding) {
        //simplified insertion sort
        var n = this._bindings.length;
        do {
            --n;
        } while (this._bindings[n] && binding.priority <= this._bindings[n].priority);
        this._bindings.splice(n + 1, 0, binding);
    }
    _indexOfListener(listener, context) {
        var n = this._bindings.length;
        var cur;
        while (n--) {
            cur = this._bindings[n];
            if (cur.getListener() === listener && cur.context === context) {
                return n;
            }
        }
        return -1;
    }
    has(listener, context = null) {
        return this._indexOfListener(listener, context) !== -1;
    }
    add(listener, listenerContext = null, priority = 0) {
        this.validateListener(listener, "add");
        return this._registerListener(listener, false, listenerContext, priority);
    }
    addOnce(listener, listenerContext = null, priority = 0) {
        this.validateListener(listener, "addOnce");
        return this._registerListener(listener, true, listenerContext, priority);
    }
    remove(listener, context = null) {
        this.validateListener(listener, "remove");
        var i = this._indexOfListener(listener, context);
        if (i !== -1) {
            this._bindings[i]._destroy(); //no reason to a SignalBinding exist if it isn't attached to a signal
            this._bindings.splice(i, 1);
        }
        return listener;
    }
    removeAll() {
        var n = this._bindings.length;
        while (n--) {
            this._bindings[n]._destroy();
        }
        this._bindings.length = 0;
    }
    getNumListeners() {
        return this._bindings.length;
    }
    halt() {
        this._shouldPropagate = false;
    }
    dispatch(...paramsArr) {
        if (!this.active) {
            return;
        }
        var n = this._bindings.length;
        var bindings;
        if (this.memorize) {
            this._prevParams = paramsArr;
        }
        if (!n) {
            //should come after memorize
            return;
        }
        bindings = this._bindings.slice(0); //clone array in case add/remove items during dispatch
        this._shouldPropagate = true; //in case `halt` was called before dispatch or during the previous dispatch.
        do {
            n--;
        } while (bindings[n] && this._shouldPropagate && bindings[n].execute(paramsArr) !== false);
    }
    forget() {
        this._prevParams = null;
    }
    dispose() {
        this.removeAll();
        delete this._bindings;
        delete this._prevParams;
    }
    toString() {
        return "[Signal active:" + this.active + " numListeners:" + this.getNumListeners() + "]";
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Signal;



/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__DIsplayObject__ = __webpack_require__(84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geom_AABB2__ = __webpack_require__(11);


class DisplayObjectContainer extends __WEBPACK_IMPORTED_MODULE_0__DIsplayObject__["a" /* DisplayObject */] {
    constructor() {
        super();
        this.subTreeAABB = new __WEBPACK_IMPORTED_MODULE_1__geom_AABB2__["a" /* AABB2 */]();
        this.childCount = 0;
    }
    addChild(child) {
        if (child.parent != null)
            child.parent.removeChild(child);
        this.insertEnd(child);
        this.childAdded(child);
    }
    addChildAt(child, index) {
        if (index >= this.childCount) {
            this.addChild(child);
            return;
        }
        if (index == 0) {
            this.insertBeginning(child);
        }
        else {
            this.insertBefore(this.findChildByIndex(index), child);
        }
        this.childAdded(child);
    }
    childAdded(child) {
        this.childCount++;
        child.parent = this;
    }
    findChildByIndex(index) {
        var child = this.head;
        var count = 0;
        while (child != null) {
            if (count++ == index)
                return child;
            child = child.next;
        }
        return this.tail;
    }
    removeChild(child) {
        if (child.parent == this) {
            this.remove(child);
            this.childRemoved(child);
        }
    }
    removeChildAt(index) {
        var child = this.findChildByIndex(index);
        this.removeChild(child);
        return child;
    }
    childRemoved(child) {
        this.childCount--;
        child.parent = null;
    }
    updateTransform() {
        //Reset AABB
        this.aabb.reset();
        super.updateTransform();
        this.calcExtents();
        this.subTreeAABB.reset();
        this.subTreeAABB.addAABB(this.aabb);
        //Expand AAABB to this DisplayObject -> New required
        var child = this.head;
        while (child != null) {
            child.updateTransform();
            //Inflate this AABB to encapsulate child
            this.subTreeAABB.addAABB(child.aabb);
            child = child.next;
        }
    }
    // public apply(slot:DisplayObject->Dynamic->Void,p:Dynamic=null) {
    // }
    //TODO Probably get rid of this...
    //Linked Lists
    insertAfter(node, newNode) {
        newNode.prev = node;
        newNode.next = node.next;
        if (node.next == null)
            this.tail = newNode;
        else
            node.next.prev = newNode;
        node.next = newNode;
    }
    insertBefore(node, newNode) {
        newNode.prev = node.prev;
        newNode.next = node;
        if (node.prev == null)
            this.head = newNode;
        else
            node.prev.next = newNode;
        node.prev = newNode;
    }
    insertBeginning(newNode) {
        if (this.head == null) {
            this.head = newNode;
            this.tail = newNode;
            newNode.prev = null;
            newNode.next = null;
        }
        else
            this.insertBefore(this.head, newNode);
    }
    insertEnd(newNode) {
        if (this.tail == null)
            this.insertBeginning(newNode);
        else
            this.insertAfter(this.tail, newNode);
    }
    remove(node) {
        if (node.prev == null)
            this.head = node.next;
        else
            node.prev.next = node.next;
        if (node.next == null)
            this.tail = node.prev;
        else
            node.next.prev = node.prev;
        node.prev = node.next = null;
    }
    debug() {
        var child = this.head;
        while (child != null) {
            child = child.next;
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DisplayObjectContainer;



/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class ParticleEmitter {
    constructor(emitters) {
        this.emitters = emitters;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ParticleEmitter;



/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__SteeringAgentParameters__ = __webpack_require__(59);

class Steering {
    constructor(behaviors, params = null, calculationMethod = Steering.CALCULATE_SUM) {
        this.behaviors = behaviors;
        this.steeringParameters = params == null ? __WEBPACK_IMPORTED_MODULE_0__SteeringAgentParameters__["a" /* DEFAULT_STEERING_PARAMS */] : params;
        this.hasChanged = true;
    }
    addBehavior(behavior) {
        this.behaviors.push(behavior);
        this.hasChanged = true;
    }
    removeBehaviour(behavior) {
        this.behaviors.splice(this.behaviors.indexOf(behavior), 1);
        this.hasChanged = true;
    }
    getBehaviour(type) {
        return this.behaviors.find(behaviour => behaviour.constructor.name === type.name);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Steering;

Steering.CALCULATE_SUM = 0;
// Simply adds up all of the behaviors and truncates them to the max acceleration
Steering.CALCULATE_SPEED = 1;
// Prioritized Dithering
Steering.CALCULATE_ACCURACY = 2;


/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Behavior {
    constructor(weight = 1.0, priority = 1, probability = 1, active = true) {
        this.weight = weight;
        this.priority = priority;
        this.probability = probability;
        this.active = active;
    }
    calculate(agent, params, result) { }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Behavior;



/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class SteeringSettings {
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SteeringSettings;

// Arrive speed settings
SteeringSettings.speedTweaker = 0.3;
SteeringSettings.arriveFast = 1;
SteeringSettings.arriveNormal = 3;
SteeringSettings.arriveSlow = 5;
// Wander Settings
SteeringSettings.wanderJitter = 300; // ( per second )
SteeringSettings.wanderDistance = 25;
SteeringSettings.wanderRadius = 15;
// Probabilities - Used to determine the chance that the Prioritized Dithering ( fastest ) calculation method will run a behavior
SteeringSettings.separationProbability = 0.2;
SteeringSettings.cohesionProbability = 0.6;
SteeringSettings.alignmentProbability = 0.3;
SteeringSettings.dodgeProbability = 0.6;
SteeringSettings.seekProbability = 0.8;
SteeringSettings.fleeProbability = 0.6;
SteeringSettings.pursuitProbability = 0.8;
SteeringSettings.evadeProbability = 1;
SteeringSettings.offsetPursuitProbability = 0.8;
SteeringSettings.arriveProbability = 0.5;
SteeringSettings.obstacleAvoidanceProbability = 0.5;
SteeringSettings.wallAvoidanceProbability = 0.5;
SteeringSettings.hideProbability = 0.8;
SteeringSettings.followPathProbability = 0.7;
SteeringSettings.interposeProbability = 0.8;
SteeringSettings.wanderProbability = 0.8;
// Weights - Scalar to effect the weights of individual behaviors
SteeringSettings.separationWeight = 1;
SteeringSettings.alignmentWeight = 3;
SteeringSettings.cohesionWeight = 2;
SteeringSettings.dodgeWeight = 1;
SteeringSettings.seekWeight = 1;
SteeringSettings.fleeWeight = 1;
SteeringSettings.pursuitWeight = 1;
SteeringSettings.evadeWeight = 0.1;
SteeringSettings.offsetPursuitWeight = 1;
SteeringSettings.arriveWeight = 1;
SteeringSettings.obstacleAvoidanceWeight = 10;
SteeringSettings.wallAvoidanceWeight = 10;
SteeringSettings.hideWeight = 1;
SteeringSettings.followPathWeight = 0.5;
SteeringSettings.interposeWeight = 1;
SteeringSettings.wanderWeight = 1;
// Priorities - Order in which behaviors are calculated ( lower numbers get calculated first )
SteeringSettings.wallAvoidancePriority = 10;
SteeringSettings.obstacleAvoidancePriority = 20;
SteeringSettings.evadePriority = 30;
SteeringSettings.hidePriority = 35;
SteeringSettings.seperationPriority = 40;
SteeringSettings.alignmentPriority = 50;
SteeringSettings.cohesionPriority = 60;
SteeringSettings.dodgePriority = 65;
SteeringSettings.seekPriority = 70;
SteeringSettings.fleePriority = 80;
SteeringSettings.arrivePriority = 90;
SteeringSettings.pursuitPriority = 100;
SteeringSettings.offsetPursuitPriority = 110;
SteeringSettings.interposePriority = 120;
SteeringSettings.followPathPriority = 130;
SteeringSettings.wanderPriority = 140;


/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_DigitalInput__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ecs_Engine__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_AssetLoader__ = __webpack_require__(79);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_GameLoop__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__geom_Vector2__ = __webpack_require__(0);





class GlazeEngine {
    constructor(canvas) {
        this.canvas = canvas;
        this.loop = new __WEBPACK_IMPORTED_MODULE_3__util_GameLoop__["a" /* GameLoop */]();
        this.loop.updateFunc = this.update.bind(this);
        this.input = new __WEBPACK_IMPORTED_MODULE_0__util_DigitalInput__["a" /* DigitalInput */]();
        var rect = canvas.getBoundingClientRect();
        this.input.InputTarget(window.document, new __WEBPACK_IMPORTED_MODULE_4__geom_Vector2__["a" /* Vector2 */](rect.left, rect.top));
        this.engine = new __WEBPACK_IMPORTED_MODULE_1__ecs_Engine__["a" /* Engine */]();
    }
    loadAssets(assetList) {
        this.assets = new __WEBPACK_IMPORTED_MODULE_2__util_AssetLoader__["a" /* AssetLoader */]();
        this.assets.loaded.add(this.initalize.bind(this));
        this.assets.SetImagesToLoad(assetList);
        this.assets.Load();
    }
    initalize() { }
    update(delta, now) {
        this.preUpdate();
        this.engine.update(delta, now);
        this.postUpdate();
    }
    preUpdate() { }
    postUpdate() { }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = GlazeEngine;

GlazeEngine.params = {
    tileSize: 16,
    debug: false,
};


/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Rectangle {
    constructor(x = 0, y = 0, width = 0, height = 0) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Rectangle;



/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export CompileVertexShader */
/* unused harmony export CompileFragmentShader */
/* unused harmony export CompileShader */
/* harmony export (immutable) */ __webpack_exports__["a"] = CompileProgram;
function CompileVertexShader(gl, shaderSrc) {
    return CompileShader(gl, shaderSrc, WebGLRenderingContext.VERTEX_SHADER);
}
function CompileFragmentShader(gl, shaderSrc) {
    return CompileShader(gl, shaderSrc, WebGLRenderingContext.FRAGMENT_SHADER);
}
function CompileShader(gl, shaderSrc, shaderType) {
    var shader = gl.createShader(shaderType);
    gl.shaderSource(shader, shaderSrc);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, WebGLRenderingContext.COMPILE_STATUS)) {
        window.alert(gl.getShaderInfoLog(shader));
        return null;
    }
    return shader;
}
function CompileProgram(gl, vertexSrc, fragmentSrc) {
    var vertexShader = CompileVertexShader(gl, vertexSrc);
    var fragmentShader = CompileFragmentShader(gl, fragmentSrc);
    var shaderProgram = gl.createProgram();
    gl.attachShader(shaderProgram, vertexShader);
    gl.attachShader(shaderProgram, fragmentShader);
    gl.linkProgram(shaderProgram);
    if (!gl.getProgramParameter(shaderProgram, WebGLRenderingContext.LINK_STATUS)) {
        window.alert("Could not initialize program");
    }
    return shaderProgram;
}


/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class ShaderWrapper {
    constructor(gl, program) {
        this.program = program;
        gl.useProgram(this.program);
        this.attribute = {};
        this.uniform = {};
        var cnt = gl.getProgramParameter(program, WebGLRenderingContext.ACTIVE_ATTRIBUTES);
        var i = 0;
        while (i < cnt) {
            var attrib = gl.getActiveAttrib(program, i);
            this.attribute[attrib.name] = gl.getAttribLocation(program, attrib.name);
            i++;
        }
        cnt = gl.getProgramParameter(program, WebGLRenderingContext.ACTIVE_UNIFORMS);
        i = 0;
        while (i < cnt) {
            var attrib = gl.getActiveUniform(program, i);
            this.uniform[attrib.name] = gl.getUniformLocation(program, attrib.name);
            i++;
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ShaderWrapper;



/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__ = __webpack_require__(0);

class Contact {
    constructor() {
        this.position = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.delta = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.normal = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.distance = 0;
        this.time = 0;
        this.sweepPosition = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
    }
    setTo(contact) {
        this.position.x = contact.position.x;
        this.position.y = contact.position.y;
        this.delta.x = contact.delta.x;
        this.delta.y = contact.delta.y;
        this.normal.x = contact.normal.x;
        this.normal.y = contact.normal.y;
        this.time = contact.time;
        this.distance = contact.distance;
        this.sweepPosition.x = contact.sweepPosition.x;
        this.sweepPosition.y = contact.sweepPosition.y;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Contact;



/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class TileGraphics {
    constructor(tileFrameId = "") {
        this.setTileFrameId(tileFrameId);
    }
    setTileFrameId(value) {
        this.tileFrameId = value;
        if (this.onChange != null) {
            this.onChange();
        }
        return value;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = TileGraphics;



/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class CollisionCounter {
    constructor(count, onCount, ignoreStatic = true) {
        this.count = count;
        this.onCount = onCount;
        this.ignoreStatic = ignoreStatic;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CollisionCounter;



/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glaze_physics_Material__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glaze_core_components_Position__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__config_Filters__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__glaze_physics_Body__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__glaze_core_components_Extents__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__glaze_graphics_components_Graphics__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__glaze_physics_components_PhysicsBody__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__glaze_core_components_Moveable__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__glaze_physics_components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__glaze_particle_components_ParticleEmitter__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__glaze_core_components_CollisionCouner__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__glaze_core_components_Health__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__glaze_core_components_Age__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__glaze_core_components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__glaze_util_Ballastics__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__glaze_core_components_Destroy__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__glaze_particle_emitter_Explosion__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__glaze_core_components_State__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__glaze_util_CombatUtils__ = __webpack_require__(21);



















class StandardBullet {
    static create(engine, position, filter, targetPosition) {
        var bulletBody = new __WEBPACK_IMPORTED_MODULE_3__glaze_physics_Body__["a" /* Body */](__WEBPACK_IMPORTED_MODULE_0__glaze_physics_Material__["a" /* Material */].LIGHTMETAL);
        bulletBody.setMass(16 + 8);
        bulletBody.setBounces(3);
        bulletBody.globalForceFactor = 1; //0.5;
        bulletBody.isBullet = true;
        bulletBody.maxScalarVelocity = 10000;
        filter.categoryBits |= __WEBPACK_IMPORTED_MODULE_2__config_Filters__["a" /* TestFilters */].PROJECTILE_CAT;
        filter.maskBits |= __WEBPACK_IMPORTED_MODULE_2__config_Filters__["a" /* TestFilters */].PROJECTILE_COLLIDABLE_CAT;
        var bullet = engine.createEntity();
        engine.addComponentsToEntity(bullet, [
            position,
            new __WEBPACK_IMPORTED_MODULE_4__glaze_core_components_Extents__["a" /* Extents */](2, 2),
            // new LifeCycle(BULLET_LIFECYCLE),
            new __WEBPACK_IMPORTED_MODULE_5__glaze_graphics_components_Graphics__["a" /* Graphics */]("projectiles", "standard"),
            new __WEBPACK_IMPORTED_MODULE_6__glaze_physics_components_PhysicsBody__["a" /* PhysicsBody */](bulletBody, true),
            new __WEBPACK_IMPORTED_MODULE_7__glaze_core_components_Moveable__["a" /* Moveable */](),
            new __WEBPACK_IMPORTED_MODULE_8__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */](false, filter, []),
            new __WEBPACK_IMPORTED_MODULE_9__glaze_particle_components_ParticleEmitter__["a" /* ParticleEmitter */]([]),
            new __WEBPACK_IMPORTED_MODULE_17__glaze_core_components_State__["a" /* State */](StandardBullet.states, null, false),
            new __WEBPACK_IMPORTED_MODULE_10__glaze_core_components_CollisionCouner__["a" /* CollisionCounter */](3, "destroy"),
            new __WEBPACK_IMPORTED_MODULE_11__glaze_core_components_Health__["a" /* Health */](10, 10, 0, "destroy"),
            new __WEBPACK_IMPORTED_MODULE_12__glaze_core_components_Age__["a" /* Age */](1000, "destroy"),
            new __WEBPACK_IMPORTED_MODULE_13__glaze_core_components_Active__["a" /* Active */](),
        ]);
        __WEBPACK_IMPORTED_MODULE_14__glaze_util_Ballastics__["a" /* Ballistics */].calcProjectileVelocity(bulletBody, targetPosition, 2000);
        return bullet;
    }
    static onDestroy(engine, entity) {
        if (engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_15__glaze_core_components_Destroy__["a" /* Destroy */]))
            return;
        engine.addComponentsToEntity(entity, [new __WEBPACK_IMPORTED_MODULE_15__glaze_core_components_Destroy__["a" /* Destroy */](1)]);
        engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_9__glaze_particle_components_ParticleEmitter__["a" /* ParticleEmitter */]).emitters.push(new __WEBPACK_IMPORTED_MODULE_16__glaze_particle_emitter_Explosion__["a" /* Explosion */](10, 50));
        // entity.getComponent(glaze.engine.components.ParticleEmitters).emitters.push(new glaze.particle.emitter.Explosion(10,50));
        // glaze.util.CombatUtils.explode(entity.getComponent(Position).coords,64,10000,entity);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = StandardBullet;

StandardBullet.states = {
    alive: function (engine, entity) { },
    destroy: function (engine, entity) {
        if (engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_15__glaze_core_components_Destroy__["a" /* Destroy */]))
            return;
        engine.addComponentsToEntity(entity, [new __WEBPACK_IMPORTED_MODULE_15__glaze_core_components_Destroy__["a" /* Destroy */](1)]);
        engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_9__glaze_particle_components_ParticleEmitter__["a" /* ParticleEmitter */]).emitters.push(new __WEBPACK_IMPORTED_MODULE_16__glaze_particle_emitter_Explosion__["a" /* Explosion */](10, 50));
        __WEBPACK_IMPORTED_MODULE_18__glaze_util_CombatUtils__["a" /* CombatUtils */].explode(engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_1__glaze_core_components_Position__["a" /* Position */]).coords, 100, 10000, entity);
    },
};


/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Ballistics {
    static calcProjectileVelocity(body, target, velocity) {
        var vel = target.clone();
        vel.minusEquals(body.position);
        vel.normalize();
        vel.multEquals(velocity);
        body.maxScalarVelocity = velocity;
        body.velocity.setTo(vel.x, vel.y);
    }
    static calcProjectileForce(body, target, force) {
        var newforce = target.clone();
        newforce.minusEquals(body.position);
        newforce.normalize();
        newforce.multEquals(force);
        // body.maxScalarVelocity = velocity;
        body.addForce(newforce);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Ballistics;



/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Player {
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Player;



/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Behavior__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__SteeringSettings__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_Random__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Seek__ = __webpack_require__(60);





class Wander extends __WEBPACK_IMPORTED_MODULE_0__Behavior__["a" /* Behavior */] {
    constructor(circleRadius = 8, circleDistance = 1, wanderChange = 4) {
        super(__WEBPACK_IMPORTED_MODULE_2__SteeringSettings__["a" /* SteeringSettings */].wanderWeight, __WEBPACK_IMPORTED_MODULE_2__SteeringSettings__["a" /* SteeringSettings */].wanderPriority);
        this.circleCenter = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */]();
        this.displacement = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */]();
        this.circleRadius = circleRadius;
        this.circleDistance = circleDistance;
        this.wanderAngle = Object(__WEBPACK_IMPORTED_MODULE_3__util_Random__["b" /* RandomFloat */])(0, Math.PI * 2);
        this.wanderChange = wanderChange;
    }
    calculate(agent, params, result) {
        this.wanderAngle += Object(__WEBPACK_IMPORTED_MODULE_3__util_Random__["b" /* RandomFloat */])(-this.wanderChange, this.wanderChange);
        this.circleCenter.copy(agent.velocity);
        this.circleCenter.normalize();
        this.circleCenter.multEquals(this.circleDistance);
        this.circleCenter.plusEquals(agent.position);
        // glaze.debug.DebugEngine.DrawParticle(circleCenter.x,circleCenter.y,4,0,0,255);
        var h = Math.atan2(agent.velocity.y, agent.velocity.x);
        h += Math.PI / 2;
        this.displacement.setTo(this.circleRadius * Math.cos(this.wanderAngle + h), this.circleRadius * Math.sin(this.wanderAngle + h));
        this.circleCenter.plusEquals(this.displacement);
        // glaze.debug.DebugEngine.DrawParticle(circleCenter.x,circleCenter.y,4,255,0,0);
        __WEBPACK_IMPORTED_MODULE_4__Seek__["a" /* Seek */].calc(agent, params, result, this.circleCenter, 0);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Wander;



/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Held__ = __webpack_require__(42);

class Holder {
    constructor(parent) {
        this.activate = false;
        this.heldItem = null;
        this.parent = null;
        this.parent = parent;
    }
    static drop(engine, holder) {
        if (holder.heldItem != null) {
            const item = holder.heldItem;
            engine.removeComponentsFromEntity(holder.heldItem, [__WEBPACK_IMPORTED_MODULE_0__Held__["a" /* Held */]]);
            holder.heldItem = null;
            return item;
        }
        return null;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Holder;



/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Held {
    constructor(holder) {
        this.holder = holder;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Held;



/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__ = __webpack_require__(0);

class ForceData {
    constructor(direction, minForce, maxForce, minDuration, maxDuration) {
        this.direction = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.direction.setUnitRotation(direction - 90);
        this.minForce = minForce;
        this.maxForce = maxForce;
        this.minDuration = minDuration;
        this.maxDuration = maxDuration;
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = ForceData;

class EnvironmentForce {
    constructor(data) {
        this.direction = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.power = 0;
        this.ttl = 0;
        this.data = data;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = EnvironmentForce;



/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = TMXObjectPosition;
/* harmony export (immutable) */ __webpack_exports__["a"] = TMXObjectExtents;
/* unused harmony export SCALE */
/* unused harmony export TMXObjectGetCSVParams */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_components_Position__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_components_Extents__ = __webpack_require__(5);


function TMXObjectPosition(tmxObject) {
    return new __WEBPACK_IMPORTED_MODULE_0__core_components_Position__["a" /* Position */](SCALE(tmxObject.x + tmxObject.width / 2), SCALE(tmxObject.y + tmxObject.height / 2));
}
function TMXObjectExtents(tmxObject) {
    return new __WEBPACK_IMPORTED_MODULE_1__core_components_Extents__["a" /* Extents */](SCALE(tmxObject.width / 2), SCALE(tmxObject.height / 2));
}
function SCALE(v) {
    return v * 2;
}
function TMXObjectGetCSVParams(csv) {
    var parsedParams = new Array();
    if (csv == null)
        return parsedParams;
    var params = csv.split(",");
    params.forEach(param => {
        var f = parseFloat(param);
        if (f != null) {
            parsedParams.push(f);
            return;
        }
        parsedParams.push(param);
    });
    return parsedParams;
}


/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class IntervalDelay {
    constructor(intervalTime = 0) {
        this.reset(intervalTime);
    }
    reset(intervalTime = 0) {
        this.current = 0;
        this.intervalTime = intervalTime;
        this.intervals = 0;
    }
    tick(delta) {
        this.current += delta;
        if (this.current > this.intervalTime) {
            this.current = 0;
            this.intervals++;
            return true;
        }
        return false;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = IntervalDelay;



/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class StateUpdater {
    constructor(channel, sequence) {
        this.channel = channel;
        this.sequence = sequence;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = StateUpdater;



/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Holdable {
    constructor() { }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Holdable;



/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Pool {
    constructor(factory) {
        this.pool = [];
        this.factory = factory;
        this.nextAvailableIndex = -1;
        this.totalAllocationCount = 0;
    }
    addCapacity(capacity) {
        this.pool = [...entityRange(this.pool.length, capacity, this.factory), ...this.pool];
        this.nextAvailableIndex += capacity;
    }
    reserve() {
        const item = this.pool[this.nextAvailableIndex];
        this.pool[this.nextAvailableIndex] = null;
        this.nextAvailableIndex--;
        this.totalAllocationCount++;
        return item;
    }
    free(item) {
        this.nextAvailableIndex++;
        this.pool[this.nextAvailableIndex] = item;
    }
    get capacity() {
        return this.pool.length;
    }
    get assigned() {
        return this.pool.length - this.nextAvailableIndex;
    }
    get totalAllocations() {
        return this.totalAllocationCount;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Pool;

const emptyNullArray = count => Array(count).fill(null);
const reverseOrder = (a, b) => b - a;
const entityRange = (start, len, factory) => emptyNullArray(len)
    .map((_, i) => factory(start + i))
    .sort(reverseOrder);


/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class BaseTexture {
    constructor(gl, width, height, floatingPonumber = false) {
        this.gl = gl;
        this.powerOfTwo = false;
        this.width = width;
        this.height = height;
        this.RegisterTexture(floatingPonumber);
    }
    RegisterTexture(fp) {
        if (this.texture == null)
            this.texture = this.gl.createTexture();
        this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, this.texture);
        this.gl.pixelStorei(WebGLRenderingContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);
        // this.gl.pixelStorei(WebGLRenderingContext.UNPACK_FLIP_Y_WEBGL, 1);
        this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MAG_FILTER, WebGLRenderingContext.NEAREST);
        this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MIN_FILTER, WebGLRenderingContext.NEAREST);
        if (this.powerOfTwo) {
            this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_S, WebGLRenderingContext.REPEAT);
            this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_T, WebGLRenderingContext.REPEAT);
        }
        else {
            this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_S, WebGLRenderingContext.CLAMP_TO_EDGE);
            this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_T, WebGLRenderingContext.CLAMP_TO_EDGE);
        }
        // this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D,null);
        //this.gl.texImage2D(WebGLRenderingContext.TEXTURE_2D,0,WebGLRenderingContext.RGBA,WebGLRenderingContext.RGBA,WebGLRenderingContext.UNSIGNED_BYTE,source);
        this.gl.texImage2D(WebGLRenderingContext.TEXTURE_2D, 0, WebGLRenderingContext.RGBA, this.width, this.height, 0, WebGLRenderingContext.RGBA, fp ? WebGLRenderingContext.FLOAT : WebGLRenderingContext.UNSIGNED_BYTE, null);
    }
    static FromImage(gl, image) {
        var texture = new BaseTexture(gl, image.width, image.height);
        gl.texImage2D(WebGLRenderingContext.TEXTURE_2D, 0, WebGLRenderingContext.RGBA, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE, image);
        return texture;
    }
    bind(unit) {
        this.gl.activeTexture(WebGLRenderingContext.TEXTURE0 + unit);
        this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, this.texture);
    }
    unbind(unit) {
        this.gl.activeTexture(WebGLRenderingContext.TEXTURE0 + unit);
        this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, null);
    }
    drawTo(callback) {
        //var v = this.gl.getParameter(WebGLRenderingContext.VIEWPORT);
        if (this.framebuffer == null)
            this.framebuffer = this.gl.createFramebuffer();
        if (this.renderbuffer == null)
            this.renderbuffer = this.gl.createRenderbuffer();
        this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, this.framebuffer);
        this.gl.bindRenderbuffer(WebGLRenderingContext.RENDERBUFFER, this.renderbuffer);
        if (this.width != this.renderbuffer.width || this.height != this.renderbuffer.height) {
            this.renderbuffer.width = this.width;
            this.renderbuffer.height = this.height;
            this.gl.renderbufferStorage(WebGLRenderingContext.RENDERBUFFER, WebGLRenderingContext.DEPTH_COMPONENT16, this.width, this.height);
            this.gl.framebufferTexture2D(WebGLRenderingContext.FRAMEBUFFER, WebGLRenderingContext.COLOR_ATTACHMENT0, WebGLRenderingContext.TEXTURE_2D, this.texture, 0);
            this.gl.framebufferRenderbuffer(WebGLRenderingContext.FRAMEBUFFER, WebGLRenderingContext.DEPTH_ATTACHMENT, WebGLRenderingContext.RENDERBUFFER, this.renderbuffer);
        }
        this.gl.viewport(0, 0, this.width, this.height);
        callback();
        this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, null);
        this.gl.bindRenderbuffer(WebGLRenderingContext.RENDERBUFFER, null);
        // this.gl.viewport(v[0], v[1], v[2], v[3]);
        // this.gl.viewport(0, 0, 800, 640);
        this.gl.viewport(0, 0, 1280, 720);
    }
    UnregisterTexture(gl) {
        if (this.texture != null) {
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = BaseTexture;



/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geom_Rectangle__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__ = __webpack_require__(0);


class Texture {
    constructor(baseTexture, frame, pivot = null) {
        this.noFrame = false;
        this.baseTexture = baseTexture;
        if (frame == null) {
            this.noFrame = true;
            this.frame = new __WEBPACK_IMPORTED_MODULE_0__geom_Rectangle__["a" /* Rectangle */](0, 0, 1, 1);
        }
        else {
            this.frame = frame;
        }
        this.trim = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */]();
        this.pivot = pivot == null ? new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */]() : pivot;
        this.uvs = new Float32Array(8);
        this.updateUVS();
    }
    updateUVS() {
        var tw = this.baseTexture.width;
        var th = this.baseTexture.height;
        this.uvs[0] = this.frame.x / tw;
        this.uvs[1] = this.frame.y / th;
        this.uvs[2] = (this.frame.x + this.frame.width) / tw;
        this.uvs[3] = this.frame.y / th;
        this.uvs[4] = (this.frame.x + this.frame.width) / tw;
        this.uvs[5] = (this.frame.y + this.frame.height) / th;
        this.uvs[6] = this.frame.x / tw;
        this.uvs[7] = (this.frame.y + this.frame.height) / th;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Texture;



/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__DisplayObjectContainer__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__ = __webpack_require__(0);


class Sprite extends __WEBPACK_IMPORTED_MODULE_0__DisplayObjectContainer__["a" /* DisplayObjectContainer */] {
    constructor() {
        super();
        this.renderable = true;
        this.anchor = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */]();
        this.transformedVerts = new Float32Array(8);
    }
    calcExtents() {
        var width = this.texture.frame.width;
        var height = this.texture.frame.height;
        var aX = this.anchor.x;
        var aY = this.anchor.y;
        var w0 = width * (1 - aX);
        var w1 = width * -aX;
        var h0 = height * (1 - aY);
        var h1 = height * -aY;
        var a = this.worldTransform[0];
        var b = this.worldTransform[3];
        var c = this.worldTransform[1];
        var d = this.worldTransform[4];
        var tx = this.worldTransform[2];
        var ty = this.worldTransform[5];
        this.transformedVerts[0] = a * w1 + c * h1 + tx;
        this.transformedVerts[1] = d * h1 + b * w1 + ty;
        this.transformedVerts[2] = a * w0 + c * h1 + tx;
        this.transformedVerts[3] = d * h1 + b * w0 + ty;
        this.transformedVerts[4] = a * w0 + c * h0 + tx;
        this.transformedVerts[5] = d * h0 + b * w0 + ty;
        this.transformedVerts[6] = a * w1 + c * h0 + tx;
        this.transformedVerts[7] = d * h0 + b * w1 + ty;
        for (var i = 0; i < 4; i++) {
            this.aabb.addPoint(this.transformedVerts[i * 2], this.transformedVerts[i * 2 + 1]);
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Sprite;



/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class TypedArray2D {
    constructor(width, height, buffer = null) {
        this.w = width;
        this.h = height;
        if (buffer == null)
            this.buffer = new ArrayBuffer(this.w * this.h * 4);
        else
            this.buffer = buffer;
        this.data32 = new Uint32Array(this.buffer);
        this.data8 = new Uint8Array(this.buffer);
    }
    get(x, y) {
        return this.data32[y * this.w + x];
    }
    set(x, y, v) {
        this.data32[y * this.w + x] = v;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = TypedArray2D;



/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Contact__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Filter__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__geom_Vector2__ = __webpack_require__(0);



const contact = new __WEBPACK_IMPORTED_MODULE_0__Contact__["a" /* Contact */]();
const epsilon = 1e-8;
let collideCount = 0;
const Collide = function (proxyA, proxyB) {
    collideCount++;
    //Exit on static vs statics, they should never be sent but you never know
    //Sensors dont trigger other sensors
    if ((proxyA.isStatic && proxyB.isStatic) || (proxyA.isSensor && proxyB.isSensor))
        return false;
    if (!proxyA.isActive || !proxyB.isActive)
        return false;
    //Do filtering
    if (!__WEBPACK_IMPORTED_MODULE_1__Filter__["a" /* Filter */].CHECK(proxyA.filter, proxyB.filter))
        return false;
    var collided = false;
    if (proxyA.isSensor || proxyB.isSensor) {
        //One is a sensor so just check for overlap
        collided = StaticAABBvsStaticAABB(proxyA.aabb.position, proxyA.aabb.extents, proxyB.aabb.position, proxyB.aabb.extents, contact);
        //TODO should we make a special case for bullets?
    }
    else if (!proxyA.isStatic && !proxyB.isStatic) {
        //Both are dynamic, which means both have bodies
        if (proxyA.body.isBullet && proxyB.body.isBullet) {
            //Both bullets? for now nothing
            return false;
        }
        else if (proxyA.body.isBullet) {
            //Just A is a bullet
            if (StaticAABBvsSweeptAABB(proxyB.aabb.position, proxyB.aabb.extents, proxyA.aabb.position, proxyA.aabb.extents, proxyA.body.delta, contact) == true) {
                proxyA.body.respondBulletCollision(contact);
                collided = true;
            }
        }
        else if (proxyB.body.isBullet) {
            //Just B is a bullet
            if (StaticAABBvsSweeptAABB(proxyA.aabb.position, proxyA.aabb.extents, proxyB.aabb.position, proxyB.aabb.extents, proxyB.body.delta, contact) == true) {
                proxyB.body.respondBulletCollision(contact);
                collided = true;
            }
        }
        else {
            //Regular dynamic<>dynamic
            collided = StaticAABBvsStaticAABB(proxyA.aabb.position, proxyA.aabb.extents, proxyB.aabb.position, proxyB.aabb.extents, contact);
        }
    }
    else {
        //Were just left with static<>dynamic collisions
        //Order them
        var staticProxy, dynamicProxy;
        if (proxyA.isStatic) {
            staticProxy = proxyA;
            dynamicProxy = proxyB;
        }
        else {
            staticProxy = proxyB;
            dynamicProxy = proxyA;
        }
        //Test
        if (dynamicProxy.body.isBullet) {
            collided = BulletAABB(dynamicProxy, staticProxy);
            if (collided) {
                dynamicProxy.body.respondBulletCollision(contact);
            }
        }
        else {
            AABBvsStaticSolidAABB(dynamicProxy.aabb.position, dynamicProxy.aabb.extents, staticProxy.aabb.position, staticProxy.aabb.extents, staticProxy.responseBias, contact);
            //We have to the response process and get the result
            collided = dynamicProxy.body.respondStaticCollision(contact);
        }
    }
    if (collided == true) {
        proxyA.collide(proxyB, contact);
        proxyB.collide(proxyA, contact);
    }
    return collided;
};
/* harmony export (immutable) */ __webpack_exports__["c"] = Collide;

const BulletAABB = function (segmentProxy, staticProxy) {
    // return StaticSegmentvsStaticAABB(staticProxy.aabb.position,staticProxy.aabb.extents,segmentProxy.body.position,segmentProxy.body.delta,0,0,contact);
    return StaticAABBvsSweeptAABB(staticProxy.aabb.position, staticProxy.aabb.extents, segmentProxy.aabb.position, segmentProxy.aabb.extents, segmentProxy.body.delta, contact);
};
/* unused harmony export BulletAABB */

const RayAABB = function (ray, proxy) {
    if (StaticSegmentvsStaticAABB(proxy.aabb.position, proxy.aabb.extents, ray.origin, ray.delta, 0, 0, contact)) {
        ray.report(contact.delta.x, contact.delta.y, contact.normal.x, contact.normal.y, proxy);
        return true;
    }
    return false;
};
/* harmony export (immutable) */ __webpack_exports__["e"] = RayAABB;

const Spring = function (bodyA, bodyB, length, k) {
    var dx = bodyA.position.x - bodyB.position.x;
    var dy = bodyA.position.y - bodyB.position.y;
    // But, we need to account for 'rest length' being `l` not 0
    // Normalize dx and dy to length 1; purely directional. `_n` means 'normalized' here
    var dist = Math.sqrt(dx * dx + dy * dy); //+0.000001;
    if (dist < length)
        return;
    var dx_n = dx / dist;
    var dy_n = dy / dist;
    var true_offset = dist - length;
    dx_n *= true_offset;
    dy_n *= true_offset;
    var fx = k * dx_n;
    var fy = k * dy_n;
    bodyA.addForce(new __WEBPACK_IMPORTED_MODULE_2__geom_Vector2__["a" /* Vector2 */](fx, fy));
    bodyB.addForce(new __WEBPACK_IMPORTED_MODULE_2__geom_Vector2__["a" /* Vector2 */](-fx, -fy));
    // bodyA.collisionForce.plusEquals(new Vector2(fx,fy));
    // bodyB.collisionForce.plusEquals(new Vector2(-fx,-fy));
};
/* unused harmony export Spring */

const StaticAABBvsStaticAABB = function (aabb_position_A, aabb_extents_A, aabb_position_B, aabb_extents_B, contact) {
    var dx = aabb_position_B.x - aabb_position_A.x;
    var px = aabb_extents_B.x + aabb_extents_A.x - Math.abs(dx);
    if (px <= 0)
        return false;
    var dy = aabb_position_B.y - aabb_position_A.y;
    var py = aabb_extents_B.y + aabb_extents_A.y - Math.abs(dy);
    if (py <= 0)
        return false;
    if (px < py) {
        var sx = dx < 0 ? -1 : 1;
        contact.distance = contact.delta.x = px * sx;
        contact.delta.y = 0;
        contact.normal.x = sx;
        contact.normal.y = 0;
        contact.position.x = aabb_position_A.x + aabb_extents_A.x * sx;
        contact.position.y = aabb_position_B.y;
    }
    else {
        var sy = dy < 0 ? -1 : 1;
        contact.delta.x = 0;
        contact.distance = contact.delta.y = py * sy;
        contact.normal.x = 0;
        contact.normal.y = sy;
        contact.position.x = aabb_position_B.x;
        contact.position.y = aabb_position_A.y + aabb_extents_A.y * sy;
    }
    return true;
};
/* unused harmony export StaticAABBvsStaticAABB */

const IsSegVsAABB = function (segment, aabb_position, aabb_extents, paddingX, paddingY) {
    return IsStaticSegmentvsStaticAABB(aabb_position, aabb_extents, segment.start, segment.scale, segment.sign, paddingX, paddingY);
};
/* harmony export (immutable) */ __webpack_exports__["d"] = IsSegVsAABB;

const IsStaticSegmentvsStaticAABB = function (aabb_position, aabb_extents, segment_position, scale, sign, paddingX, paddingY) {
    // var scale.x = 1/segment_delta.x;
    // var scale.y = 1/segment_delta.y;
    // var sign.x = scale.x<0 ? -1 : 1;
    // var sign.y = scale.y<0 ? -1 : 1;
    var nearTimeX = (aabb_position.x - sign.x * (aabb_extents.x + paddingX) - segment_position.x) * scale.x;
    var nearTimeY = (aabb_position.y - sign.y * (aabb_extents.y + paddingY) - segment_position.y) * scale.y;
    var farTimeX = (aabb_position.x + sign.x * (aabb_extents.x + paddingX) - segment_position.x) * scale.x;
    var farTimeY = (aabb_position.y + sign.y * (aabb_extents.y + paddingY) - segment_position.y) * scale.y;
    if (nearTimeX > farTimeY || nearTimeY > farTimeX)
        return false;
    var nearTime = Math.max(nearTimeX, nearTimeY);
    var farTime = Math.min(farTimeX, farTimeY);
    if (nearTime >= 1 || farTime <= 0)
        return false;
    return true;
};
/* unused harmony export IsStaticSegmentvsStaticAABB */

const StaticSegmentvsStaticAABB = function (aabb_position, aabb_extents, segment_position, segment_delta, paddingX, paddingY, contact) {
    var scaleX = 1 / segment_delta.x;
    var scaleY = 1 / segment_delta.y;
    var signX = scaleX < 0 ? -1 : 1;
    var signY = scaleY < 0 ? -1 : 1;
    var nearTimeX = (aabb_position.x - signX * (aabb_extents.x + paddingX) - segment_position.x) * scaleX;
    var nearTimeY = (aabb_position.y - signY * (aabb_extents.y + paddingY) - segment_position.y) * scaleY;
    var farTimeX = (aabb_position.x + signX * (aabb_extents.x + paddingX) - segment_position.x) * scaleX;
    var farTimeY = (aabb_position.y + signY * (aabb_extents.y + paddingY) - segment_position.y) * scaleY;
    if (nearTimeX > farTimeY || nearTimeY > farTimeX)
        return false;
    var nearTime = Math.max(nearTimeX, nearTimeY);
    var farTime = Math.min(farTimeX, farTimeY);
    if (nearTime >= 1 || farTime <= 0)
        return false;
    contact.time = Math.min(Math.max(nearTime, 0), 1);
    if (nearTimeX > nearTimeY) {
        contact.normal.x = -signX;
        contact.normal.y = 0;
    }
    else {
        contact.normal.x = 0;
        contact.normal.y = -signY;
    }
    contact.delta.x = contact.time * segment_delta.x;
    contact.delta.y = contact.time * segment_delta.y;
    contact.position.x = segment_position.x + contact.delta.x;
    contact.position.y = segment_position.y + contact.delta.y;
    return true;
};
/* unused harmony export StaticSegmentvsStaticAABB */

const StaticAABBvsSweeptAABB = function (aabb_position_A, aabb_extents_A, aabb_position_B, aabb_extents_B, aabb_delta_B, contact) {
    if (aabb_delta_B.x == 0 && aabb_delta_B.y == 0) {
        contact.sweepPosition.x = aabb_position_B.x;
        contact.sweepPosition.y = aabb_position_B.y;
        if (StaticAABBvsStaticAABB(aabb_position_A, aabb_extents_A, aabb_position_B, aabb_extents_B, contact)) {
            contact.time = 0;
            return true;
        }
        else {
            contact.time = 1;
            return false;
        }
    }
    else {
        if (StaticSegmentvsStaticAABB(aabb_position_A, aabb_extents_A, aabb_position_B, aabb_delta_B, aabb_extents_B.x, aabb_extents_B.y, contact)) {
            contact.time = Math.min(Math.max(contact.time - epsilon, 0), 1);
            contact.sweepPosition.x = aabb_position_B.x + aabb_delta_B.x * contact.time;
            contact.sweepPosition.y = aabb_position_B.y + aabb_delta_B.y * contact.time;
            //Inline expanded normalize to avoid object creation
            var t = Math.sqrt(aabb_delta_B.x * aabb_delta_B.x + aabb_delta_B.y * aabb_delta_B.y);
            contact.position.x += aabb_delta_B.x / t * aabb_extents_B.x;
            contact.position.y += aabb_delta_B.y / t * aabb_extents_B.y;
            return true;
        }
        else {
            contact.sweepPosition.x = aabb_position_B.x * aabb_delta_B.x;
            contact.sweepPosition.y = aabb_position_B.y * aabb_delta_B.y;
            return false;
        }
    }
};
/* harmony export (immutable) */ __webpack_exports__["f"] = StaticAABBvsSweeptAABB;

const AABBvsStaticSolidAABB = function (aabb_position_A, aabb_extents_A, aabb_position_B, aabb_extents_B, bias, contact) {
    //New overlap code, handle corners better
    var dx = aabb_position_B.x - aabb_position_A.x;
    var px = aabb_extents_B.x + aabb_extents_A.x - Math.abs(dx);
    var dy = aabb_position_B.y - aabb_position_A.y;
    var py = aabb_extents_B.y + aabb_extents_A.y - Math.abs(dy);
    if (px < py) {
        contact.normal.x = dx < 0 ? 1 : -1;
        contact.normal.y = 0;
    }
    else {
        contact.normal.x = 0;
        contact.normal.y = dy < 0 ? 1 : -1;
    }
    contact.normal.x *= bias.x;
    contact.normal.y *= bias.y;
    // var dx = aabb_position_B.x - aabb_position_A.x;
    // var dy = aabb_position_B.y - aabb_position_A.y;
    // if (dx*dx>dy*dy) {
    //     contact.normal.x = dx>=0 ? -1: 1;
    //     contact.normal.y = 0;
    // } else {
    //     contact.normal.x = 0;
    //     contact.normal.y = dy>=0 ? -1 : 1;
    // }
    var pcx = contact.normal.x * (aabb_extents_A.x + aabb_extents_B.x) + aabb_position_B.x;
    var pcy = contact.normal.y * (aabb_extents_A.y + aabb_extents_B.y) + aabb_position_B.y;
    var pdx = aabb_position_A.x - pcx;
    var pdy = aabb_position_A.y - pcy;
    contact.distance = pdx * contact.normal.x + pdy * contact.normal.y;
    return true;
};
/* harmony export (immutable) */ __webpack_exports__["a"] = AABBvsStaticSolidAABB;

// public static Stairs(aabb_position_A:Vector2,aabb_extents_A:Vector2,aabb_position_B:Vector2,aabb_extents_B:Vector2,bias:Vector2,contact:Contact):number {
//      //New overlap code, handle corners better
//      var dx = aabb_position_B.x - aabb_position_A.x;
//      var px = (aabb_extents_B.x + aabb_extents_A.x) - Math.abs(dx);
//      var dy = aabb_position_B.y - aabb_position_A.y;
//      var py = (aabb_extents_B.y + aabb_extents_A.y) - Math.abs(dy);
//      if (px<py) {
//          contact.normal.x = dx<0 ? 1 : -1;
//          contact.normal.y = 0;
//      } else {
//          contact.normal.x = 0;
//          contact.normal.y = dy<0 ? 1 : -1;
//      }
//      contact.normal.x = 0;
//      contact.normal.y = -1;
//      var pcx = (contact.normal.x * (aabb_extents_A.x+aabb_extents_B.x) ) + aabb_position_B.x;
//      var pcy = (contact.normal.y * (aabb_extents_A.y+aabb_extents_B.y) ) + aabb_position_B.y;
//      var pdx = aabb_position_A.x - pcx;
//      var pdy = aabb_position_A.y - pcy;
//      contact.distance = pdx*contact.normal.x + pdy*contact.normal.y;
//      if (px<py) {
//          return dx<0 ? 1 : -1;
//      }
//      return 0;
//  }
/*
    This is seperate to avoid overcomplicating the above with too much branching
    */
const AABBvsStaticSolidAABBFixedNormal = function (aabb_position_A, aabb_extents_A, aabb_position_B, aabb_extents_B, normal, contact) {
    contact.normal.copy(normal);
    var pcx = contact.normal.x * (aabb_extents_A.x + aabb_extents_B.x) + aabb_position_B.x;
    var pcy = contact.normal.y * (aabb_extents_A.y + aabb_extents_B.y) + aabb_position_B.y;
    var pdx = aabb_position_A.x - pcx;
    var pdy = aabb_position_A.y - pcy;
    contact.distance = pdx * contact.normal.x + pdy * contact.normal.y;
    return true;
};
/* harmony export (immutable) */ __webpack_exports__["b"] = AABBvsStaticSolidAABBFixedNormal;

const AABBvsStaticSolidAABBSlope = function (aabb_position_A, aabb_extents_A, aabb_position_B, aabb_extents_B, bias, contact) {
    var _sqr = 0.70710678118655;
    //New overlap code, handle corners better
    var dx = aabb_position_B.x - aabb_position_A.x;
    var px = aabb_extents_B.x + aabb_extents_A.x - Math.abs(dx);
    var dy = aabb_position_B.y - aabb_position_A.y;
    var py = aabb_extents_B.y + aabb_extents_A.y - Math.abs(dy);
    // if (px<py) {
    //     contact.normal.x = dx<0 ? 1 : -1;
    //     contact.normal.y = 0;
    // } else {
    //     contact.normal.x = 0;
    //     contact.normal.y = dy<0 ? 1 : -1;
    // }
    // contact.normal.x *= bias.x;
    // contact.normal.y *= bias.y;
    contact.normal.x = -_sqr;
    contact.normal.y = -_sqr;
    // var dx = aabb_position_B.x - aabb_position_A.x;
    // var dy = aabb_position_B.y - aabb_position_A.y;
    // if (dx*dx>dy*dy) {
    //     contact.normal.x = dx>=0 ? -1: 1;
    //     contact.normal.y = 0;
    // } else {
    //     contact.normal.x = 0;
    //     contact.normal.y = dy>=0 ? -1 : 1;
    // }
    var pcx = contact.normal.x * (aabb_extents_A.x + aabb_extents_B.x) + aabb_position_B.x;
    var pcy = contact.normal.y * (aabb_extents_A.y + aabb_extents_B.y) + aabb_position_B.y;
    var pdx = aabb_position_A.x - pcx - 8;
    var pdy = aabb_position_A.y - pcy;
    contact.distance = pdx * contact.normal.x + pdy * contact.normal.y;
    return true;
};


/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_Random__ = __webpack_require__(8);

class Explosion {
    constructor(mass, power) {
        this.mass = mass;
        this.power = power;
    }
    update(time, c4e, position, particleEngine) {
        for (let i = 0; i < this.mass; i++) {
            var angle = Object(__WEBPACK_IMPORTED_MODULE_0__util_Random__["b" /* RandomFloat */])(0, Math.PI * 2);
            var p = Object(__WEBPACK_IMPORTED_MODULE_0__util_Random__["b" /* RandomFloat */])(0, this.power * 2);
            var vx = Math.cos(angle) * p;
            var vy = Math.sin(angle) * p;
            particleEngine.EmitParticle(position.x, position.y, vx, vy, 0, 1, Object(__WEBPACK_IMPORTED_MODULE_0__util_Random__["b" /* RandomFloat */])(50, 200), 0.99, false, true, null, 4, 255, 255, 0, 0);
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Explosion;



/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Contact__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__geom_AABB2__ = __webpack_require__(11);



class Ray {
    constructor() {
        this.origin = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.target = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.range = 0;
        this.delta = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.direction = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.contact = new __WEBPACK_IMPORTED_MODULE_1__Contact__["a" /* Contact */]();
        this.bounds = new __WEBPACK_IMPORTED_MODULE_2__geom_AABB2__["a" /* AABB2 */]();
    }
    initalize(origin, target, range, callback) {
        this.reset();
        this.origin.copy(origin);
        this.target.copy(target);
        this.delta.copy(target);
        this.delta.minusEquals(origin);
        this.direction.copy(this.delta);
        this.direction.normalize();
        if (range <= 0) {
            this.range = this.delta.length();
        }
        else {
            this.range = range;
            //scale the delta correctly now
            this.delta.copy(this.direction);
            this.delta.multEquals(range);
        }
        this.bounds.addPoint(this.origin.x, this.origin.y);
        this.bounds.addPoint(this.origin.x + this.delta.x, this.origin.y + this.delta.y);
        this.callback = callback;
    }
    reset() {
        this.contact.distance = 9999999999;
        this.hit = false;
    }
    report(distX, distY, normalX, normalY, proxy = null) {
        if (this.callback != null && proxy != null) {
            if (this.callback(proxy) < 0) {
                return;
            }
        }
        var distSqrd = distX * distX + distY * distY;
        if (distSqrd < this.contact.distance * this.contact.distance) {
            this.contact.position.setTo(this.origin.x + distX, this.origin.y + distY);
            this.contact.normal.setTo(normalX, normalY);
            this.contact.distance = Math.sqrt(distSqrd);
            this.hit = true;
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Ray;



/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = toRad;
/* unused harmony export toDeg */
/* unused harmony export Clamp */
/* unused harmony export ScaleRectangleWithRatio */
const ZERO_TOLERANCE = 1e-8;
/* harmony export (immutable) */ __webpack_exports__["a"] = ZERO_TOLERANCE;

const RAD_DEG = 180 / Math.PI;
/* unused harmony export RAD_DEG */

const DEG_RAD = Math.PI / 180;
/* unused harmony export DEG_RAD */

const LN2 = 0.6931471805599453;
/* unused harmony export LN2 */

const LN10 = 2.302585092994046;
/* unused harmony export LN10 */

const PIHALF = 1.5707963267948966;
/* unused harmony export PIHALF */

const PI = 3.141592653589793;
/* unused harmony export PI */

const PI2 = 6.283185307179586;
/* unused harmony export PI2 */

const EPS = 1e-6;
/* unused harmony export EPS */

const SQRT2 = 1.414213562373095;
/* unused harmony export SQRT2 */

function toRad(deg) {
    return deg * DEG_RAD;
}
function toDeg(rad) {
    return rad * RAD_DEG;
}
function Clamp(value, min, max) {
    return Math.min(Math.max(value, min), max);
}
function ScaleRectangleWithRatio(containerRect, itemRect) {
    //var sX = itemRect.x / containerRect.x;
    //var sY = itemRect.y / containerRect.y;
    var sX = containerRect.x / itemRect.x;
    var sY = containerRect.y / itemRect.y;
    var rD = containerRect.x / containerRect.y;
    var rR = itemRect.x / itemRect.y;
    return rD < rR ? sX : sY;
}


/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Light {
    constructor(range, attenuation, intensity, flicker, red, green, blue) {
        this.range = range;
        this.attenuation = attenuation;
        this.intensity = intensity;
        this.flicker = flicker;
        this.red = red;
        this.green = green;
        this.blue = blue;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Light;



/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glaze_physics_Body__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glaze_physics_Material__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__glaze_core_components_Extents__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__glaze_graphics_components_Graphics__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__glaze_graphics_components_GraphicsAnimation__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__glaze_physics_components_PhysicsBody__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__glaze_physics_components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__glaze_core_components_Moveable__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__glaze_core_components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__glaze_ai_steering_components_Steering__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__glaze_ai_steering_behaviors_Wander__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__glaze_ai_steering_behaviors_Seek__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__glaze_ai_steering_SteeringAgentParameters__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__glaze_core_components_Age__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__glaze_core_components_Health__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__glaze_core_components_Destroy__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__glaze_core_components_State__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__glaze_ai_steering_behaviors_WallAvoidance__ = __webpack_require__(61);


















class BeeFactory {
    static create(engine, position) {
        var beeBody = new __WEBPACK_IMPORTED_MODULE_0__glaze_physics_Body__["a" /* Body */](new __WEBPACK_IMPORTED_MODULE_1__glaze_physics_Material__["a" /* Material */](0.1, 0.3, 0));
        beeBody.setMass(0.1);
        beeBody.setBounces(0);
        beeBody.globalForceFactor = 0.0;
        beeBody.maxScalarVelocity = 200;
        var bee = engine.createEntity();
        engine.addComponentsToEntity(bee, [
            position,
            new __WEBPACK_IMPORTED_MODULE_2__glaze_core_components_Extents__["a" /* Extents */](3 / 2 * 1, 3 / 2 * 1),
            new __WEBPACK_IMPORTED_MODULE_3__glaze_graphics_components_Graphics__["a" /* Graphics */]("insects"),
            new __WEBPACK_IMPORTED_MODULE_4__glaze_graphics_components_GraphicsAnimation__["a" /* GraphicsAnimation */]("insects", "firefly"),
            new __WEBPACK_IMPORTED_MODULE_5__glaze_physics_components_PhysicsBody__["a" /* PhysicsBody */](beeBody, true),
            new __WEBPACK_IMPORTED_MODULE_7__glaze_core_components_Moveable__["a" /* Moveable */](),
            new __WEBPACK_IMPORTED_MODULE_6__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */](false, null, []),
            new __WEBPACK_IMPORTED_MODULE_9__glaze_ai_steering_components_Steering__["a" /* Steering */]([
                new __WEBPACK_IMPORTED_MODULE_10__glaze_ai_steering_behaviors_Wander__["a" /* Wander */](80, 40, 143.5),
                new __WEBPACK_IMPORTED_MODULE_11__glaze_ai_steering_behaviors_Seek__["a" /* Seek */](position.coords.clone(), 32),
                new __WEBPACK_IMPORTED_MODULE_17__glaze_ai_steering_behaviors_WallAvoidance__["a" /* WallAvoidance */](40)
            ], __WEBPACK_IMPORTED_MODULE_12__glaze_ai_steering_SteeringAgentParameters__["b" /* HEAVY_STEERING_PARAMS */]),
            new __WEBPACK_IMPORTED_MODULE_16__glaze_core_components_State__["a" /* State */](BeeFactory.states, null, false),
            new __WEBPACK_IMPORTED_MODULE_13__glaze_core_components_Age__["a" /* Age */](10000, "destroy"),
            new __WEBPACK_IMPORTED_MODULE_14__glaze_core_components_Health__["a" /* Health */](10, 10, 0, "destroy"),
            new __WEBPACK_IMPORTED_MODULE_8__glaze_core_components_Active__["a" /* Active */](),
        ]);
        return bee;
    }
    static onDestroy(engine, entity) {
        if (engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_15__glaze_core_components_Destroy__["a" /* Destroy */]))
            return;
        engine.addComponentsToEntity(entity, [new __WEBPACK_IMPORTED_MODULE_15__glaze_core_components_Destroy__["a" /* Destroy */](1)]);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = BeeFactory;

BeeFactory.states = {
    destroy: function (engine, entity) {
        if (engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_15__glaze_core_components_Destroy__["a" /* Destroy */]))
            return;
        engine.addComponentsToEntity(entity, [new __WEBPACK_IMPORTED_MODULE_15__glaze_core_components_Destroy__["a" /* Destroy */](1)]);
    }
};


/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class SteeringAgentParameters {
    constructor(maxAcceleration, maxSteeringForcePerStep) {
        this.maxAcceleration = maxAcceleration;
        this.maxSteeringForcePerStep = maxSteeringForcePerStep;
    }
}
/* unused harmony export SteeringAgentParameters */

SteeringAgentParameters.default_scale = 0.2;
SteeringAgentParameters.heavy_scale = 5;
SteeringAgentParameters.default_maxAcceleration = 100;
SteeringAgentParameters.default_maxSteeringForcePerStep = 100;
const DEFAULT_STEERING_PARAMS = new SteeringAgentParameters(SteeringAgentParameters.default_maxAcceleration * SteeringAgentParameters.default_scale, SteeringAgentParameters.default_maxSteeringForcePerStep * SteeringAgentParameters.default_scale);
/* harmony export (immutable) */ __webpack_exports__["a"] = DEFAULT_STEERING_PARAMS;

const HEAVY_STEERING_PARAMS = new SteeringAgentParameters(SteeringAgentParameters.default_maxAcceleration * SteeringAgentParameters.heavy_scale, SteeringAgentParameters.default_maxSteeringForcePerStep * SteeringAgentParameters.heavy_scale);
/* harmony export (immutable) */ __webpack_exports__["b"] = HEAVY_STEERING_PARAMS;



/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Behavior__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__SteeringSettings__ = __webpack_require__(29);


class Seek extends __WEBPACK_IMPORTED_MODULE_0__Behavior__["a" /* Behavior */] {
    constructor(target, seekDist = 0) {
        super(__WEBPACK_IMPORTED_MODULE_1__SteeringSettings__["a" /* SteeringSettings */].seekWeight, __WEBPACK_IMPORTED_MODULE_1__SteeringSettings__["a" /* SteeringSettings */].seekPriority);
        this.target = target;
        this.seekDist = seekDist;
    }
    calculate(agent, params, result) {
        Seek.calc(agent, params, result, this.target, this.seekDist);
    }
    //Hand optimized as called so often
    static calc(agent, params, result, target, seekDist = 0) {
        var dX = target.x - agent.position.x + 0.000001;
        var dY = target.y - agent.position.y + 0.000001;
        var d = dX * dX + dY * dY;
        if (seekDist > 0 && d < seekDist * seekDist) {
            return false;
        }
        var t = Math.sqrt(d);
        result.x = dX / t;
        result.x *= params.maxSteeringForcePerStep;
        result.x -= agent.velocity.x * (60 / 1000);
        result.y = dY / t;
        result.y *= params.maxSteeringForcePerStep;
        result.y -= agent.velocity.y * (60 / 1000);
        return true;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Seek;



/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Behavior__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Feeler__ = __webpack_require__(132);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__SteeringSettings__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__geom_AABB2__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_Maths__ = __webpack_require__(56);






class WallAvoidance extends __WEBPACK_IMPORTED_MODULE_0__Behavior__["a" /* Behavior */] {
    constructor(feelerLength) {
        super(__WEBPACK_IMPORTED_MODULE_3__SteeringSettings__["a" /* SteeringSettings */].wallAvoidanceWeight, __WEBPACK_IMPORTED_MODULE_3__SteeringSettings__["a" /* SteeringSettings */].wallAvoidancePriority);
        this.pA = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */]();
        this.pB = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */]();
        this.top = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */](0, -1);
        this.right = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */](1, 0);
        this.bottom = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */](0, 1);
        this.left = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */](-1, 0);
        this.searchAABB = new __WEBPACK_IMPORTED_MODULE_4__geom_AABB2__["a" /* AABB2 */]();
        this.closestFeeler = null;
        this.closestDist = Number.POSITIVE_INFINITY;
        this.feelerLength = feelerLength;
        this.ptv1 = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */]();
        this.ptv2 = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */]();
        this.feelers = new Array();
        this.feelers.push(new __WEBPACK_IMPORTED_MODULE_2__Feeler__["a" /* Feeler */](0, feelerLength));
        this.feelers.push(new __WEBPACK_IMPORTED_MODULE_2__Feeler__["a" /* Feeler */](Object(__WEBPACK_IMPORTED_MODULE_5__util_Maths__["b" /* toRad */])(-40), feelerLength * 0.5));
        this.feelers.push(new __WEBPACK_IMPORTED_MODULE_2__Feeler__["a" /* Feeler */](Object(__WEBPACK_IMPORTED_MODULE_5__util_Maths__["b" /* toRad */])(40), feelerLength * 0.5));
        this.lastPos = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */]();
    }
    checkAABB(aabb) {
        for (var i = 0; i < this.feelers.length; i++) {
            // for (feeler in feelers) {
            const feeler = this.feelers[i];
            //top
            this.pA.setTo(aabb.l, aabb.t);
            this.pB.setTo(aabb.r, aabb.t);
            feeler.TestSegment(this.pA, this.pB, this.top);
            //right
            this.pA.setTo(aabb.r, aabb.b);
            feeler.TestSegment(this.pB, this.pA, this.right);
            //bottom
            this.pB.setTo(aabb.l, aabb.b);
            feeler.TestSegment(this.pA, this.pB, this.bottom);
            //left
            this.pA.setTo(aabb.l, aabb.t);
            feeler.TestSegment(this.pB, this.pA, this.left);
            if (feeler.distToClosestIP < this.closestDist) {
                this.closestDist = feeler.distToClosestIP;
                this.closestFeeler = feeler;
            }
        }
    }
    // function check(shape:GeometricShape, pos:Vector2):Void {
    // 	var tile:Tile = cast shape;
    // 	var tv1 : Vector2 = tile.transformedVertices[0];
    // 	var tv2 : Vector2 = tile.transformedVertices[1];
    // 	for (i in 0...tile.vertexCount) {
    // 		ptv1.x = tv1.x + pos.x;
    // 		ptv1.y = tv1.y + pos.y;
    // 		ptv2.x = tv2.x + pos.x;
    // 		ptv2.y = tv2.y + pos.y;
    // 		for (feeler in feelers) {
    // 			//if (feeler.dot(ta.n) > 0)
    // 			//	continue;
    // 			feeler.TestSegment(ptv1, ptv2, tile.transformedAxes[i].n);
    // 		}
    // 		tv1 = tv2;
    // 		tv2 = tile.transformedVertices[(i + 2) % tile.vertexCount];
    // 	}
    // }
    calculate(agent, params, result) {
        if (this.lastPos.distSqrd(agent.position) < 1)
            return;
        this.lastPos.copy(agent.position);
        var unit = agent.velocity.clone();
        unit.normalize(); //GetVelocity().unit();
        for (var i = 0; i < this.feelers.length; i++) {
            const feeler = this.feelers[i];
            feeler.Reset(unit, agent.position);
        }
        this.closestFeeler = null;
        this.closestDist = Number.POSITIVE_INFINITY;
        this.searchAABB.reset();
        this.searchAABB.addPoint(agent.position.x, agent.position.y);
        this.searchAABB.addPoint(this.feelers[0].tip.x, this.feelers[0].tip.y);
        this.searchAABB.addPoint(this.feelers[1].tip.x, this.feelers[1].tip.y);
        this.searchAABB.addPoint(this.feelers[2].tip.x, this.feelers[2].tip.y);
        // searchAABB.expand(20);
        params.map.iterateCells(this.searchAABB, this.checkAABB);
        if (this.closestFeeler != null)
            this.closestFeeler.CalculateForce(result);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = WallAvoidance;



/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Wind {
    constructor(particlePerUnitPerFrame) {
        this.particlePerUnitPerFrame = particlePerUnitPerFrame;
        this.particleCount = 0.0;
        this.incPerFrame = 0.0;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Wind;



/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glaze_util_EntityGroup__ = __webpack_require__(64);

class BeeHive {
    constructor(maxBees) {
        this.group = new __WEBPACK_IMPORTED_MODULE_0__glaze_util_EntityGroup__["a" /* EntityGroup */](maxBees);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = BeeHive;



/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__signals_Signal__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_state_EntityStates__ = __webpack_require__(65);


// enum GroupEvent {
// 	MemberAdded;
// 	MemberRemoved;
// }
class EntityGroup {
    constructor(maxMembers) {
        // this.groupManager = groupManager;
        this.maxMembers = maxMembers;
        this.members = new Set();
        this.messages = new __WEBPACK_IMPORTED_MODULE_0__signals_Signal__["a" /* Signal */]();
        this.onMemberMessage = this.onMemberMessage.bind(this);
    }
    addMember(entity, state) {
        if (!this.hasCapacity())
            return;
        this.members.add(entity);
        state.messages.add(this.onMemberMessage);
        // entity.messages.add(this.onMemberMessage);
        // this.messages.dispatch(GroupEvent.MemberAdded,entity);
    }
    removeMember(entity) {
        this.members.delete(entity);
    }
    onMemberMessage(entity, state) {
        switch (state) {
            case __WEBPACK_IMPORTED_MODULE_1__core_state_EntityStates__["a" /* EntityState */].Destroy:
                this.removeMember(entity);
        }
    }
    hasCapacity() {
        return this.members.size < this.maxMembers;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = EntityGroup;



/***/ }),
/* 65 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EntityState; });
var EntityState;
(function (EntityState) {
    EntityState["Destroy"] = "destroy";
})(EntityState || (EntityState = {}));


/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glaze_util_EntityGroup__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glaze_util_IntervalDelay__ = __webpack_require__(45);


class BirdNest {
    constructor(maxBirds) {
        this.triggered = false;
        this.radius = 100;
        this.group = new __WEBPACK_IMPORTED_MODULE_0__glaze_util_EntityGroup__["a" /* EntityGroup */](maxBirds);
        this.intervalDelay = new __WEBPACK_IMPORTED_MODULE_1__glaze_util_IntervalDelay__["a" /* IntervalDelay */](1000);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = BirdNest;



/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glaze_util_IntervalDelay__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glaze_ai_fsm_StackFSM__ = __webpack_require__(143);


class Bird {
    constructor(nest) {
        this.nest = nest;
        this.ai = new __WEBPACK_IMPORTED_MODULE_1__glaze_ai_fsm_StackFSM__["a" /* LightStackStateMachine */]();
        this.delay = new __WEBPACK_IMPORTED_MODULE_0__glaze_util_IntervalDelay__["a" /* IntervalDelay */](1000);
        this.chaseCheck = new __WEBPACK_IMPORTED_MODULE_0__glaze_util_IntervalDelay__["a" /* IntervalDelay */](500);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Bird;



/***/ }),
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__SteeringSettings__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Behavior__ = __webpack_require__(28);


class Arrival extends __WEBPACK_IMPORTED_MODULE_1__Behavior__["a" /* Behavior */] {
    constructor(target, arrivalZone = 0, seekDist = 0) {
        super(__WEBPACK_IMPORTED_MODULE_0__SteeringSettings__["a" /* SteeringSettings */].seekWeight, __WEBPACK_IMPORTED_MODULE_0__SteeringSettings__["a" /* SteeringSettings */].seekPriority);
        this.target = target;
        this.arrivalZone = arrivalZone;
        this.seekDist = seekDist;
    }
    calculate(agent, params, result) {
        Arrival.calc(agent, params, result, this.target, this.arrivalZone, this.seekDist);
    }
    //Hand optimized as called so often
    static calc(agent, params, result, target, arrivalZone = 0, seekDist = 0) {
        var dX = target.x - agent.position.x + 0.000001;
        var dY = target.y - agent.position.y + 0.000001;
        var d = dX * dX + dY * dY;
        if (seekDist > 0 && d < seekDist * seekDist) {
            return false;
        }
        var t = Math.sqrt(d);
        var scale = 1.0;
        if (t < arrivalZone) {
            scale = t / arrivalZone;
        }
        result.x = dX / t;
        result.x *= params.maxSteeringForcePerStep;
        result.x -= agent.velocity.x * (60 / 1000);
        result.x *= scale;
        result.y = dY / t;
        result.y *= params.maxSteeringForcePerStep;
        result.y -= agent.velocity.y * (60 / 1000);
        result.x *= scale;
        return true;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Arrival;



/***/ }),
/* 69 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Water {
    constructor() { }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Water;



/***/ }),
/* 70 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Door {
    constructor(type, open, triggerEvent) {
        this.type = type;
        this.open = open;
        this.triggerEvent = triggerEvent;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Door;



/***/ }),
/* 71 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Chicken {
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Chicken;



/***/ }),
/* 72 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class DebugGraphics {
    constructor() { }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DebugGraphics;



/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glaze_util_IntervalDelay__ = __webpack_require__(45);

class GunTurret {
    constructor(interval) {
        this.intervalDelay = new __WEBPACK_IMPORTED_MODULE_0__glaze_util_IntervalDelay__["a" /* IntervalDelay */](interval);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = GunTurret;



/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Teleporter {
    constructor(teleportPosition) {
        this.teleportPosition = teleportPosition;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Teleporter;



/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__test_GameTestA__ = __webpack_require__(76);

const game = new __WEBPACK_IMPORTED_MODULE_0__test_GameTestA__["a" /* GameTestA */]();


/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glaze_GlazeEngine__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glaze_graphics_systems_GraphicsRenderSystem__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__glaze_geom_AABB2__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__glaze_core_components_Position__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__glaze_graphics_components_Graphics__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__glaze_geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__glaze_graphics_render_sprite_SpriteRenderer__ = __webpack_require__(92);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__glaze_tmx_TMXMap__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__glaze_graphics_render_tile_TileMapRenderer__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__glaze_graphics_components_GraphicsAnimation__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__glaze_graphics_systems_AnimationSystem__ = __webpack_require__(99);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__glaze_physics_collision_broadphase_TileMapCollision__ = __webpack_require__(101);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__glaze_physics_systems_PhysicsStaticSystem__ = __webpack_require__(104);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__glaze_physics_systems_PhysicsMoveableSystem__ = __webpack_require__(106);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__glaze_physics_systems_PhysicsCollisionSystem__ = __webpack_require__(107);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__glaze_physics_systems_PhysicsMassSystem__ = __webpack_require__(108);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__glaze_physics_systems_PhysicsPositionSystem__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__glaze_core_components_Extents__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__glaze_physics_components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__glaze_physics_collision_Filter__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__glaze_physics_Material__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__glaze_physics_Body__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__glaze_physics_components_PhysicsBody__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__glaze_core_components_Moveable__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__glaze_core_components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__glaze_physics_systems_PhysicsUpdateSystem__ = __webpack_require__(110);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__glaze_core_systems_ControllerSystem__ = __webpack_require__(111);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__glaze_graphics_systems_TileGraphicsRenderSystem__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__glaze_graphics_components_TileGraphics__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__glaze_core_components_Fixed__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__glaze_particle_engines_BlockParticleEngine2__ = __webpack_require__(114);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__glaze_particle_systems_ParticleSystem__ = __webpack_require__(117);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__glaze_space_systems_FixedViewManagementSystem__ = __webpack_require__(118);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__glaze_core_systems_AgeSystem__ = __webpack_require__(122);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__glaze_core_systems_HealthSystem__ = __webpack_require__(123);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__glaze_core_systems_CollisionCountSystem__ = __webpack_require__(124);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__config_Filters__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__factories_projectile_StandardBullet__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__glaze_core_systems_DestroySystem__ = __webpack_require__(128);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__factories_character_PlayerFactory__ = __webpack_require__(129);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__systems_PlayerSystem__ = __webpack_require__(130);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__glaze_physics_systems_EnvironmentForceSystem__ = __webpack_require__(136);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__glaze_tmx_TMXFactory__ = __webpack_require__(137);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__glaze_tmx_factories_ForceFactory__ = __webpack_require__(138);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__glaze_core_components_Viewable__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_45__glaze_ai_steering_systems_SteeringSystem__ = __webpack_require__(139);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_46__components_BeeHive__ = __webpack_require__(63);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_47__systems_BeeHiveSystem__ = __webpack_require__(140);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_48__components_BirdNest__ = __webpack_require__(66);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_49__systems_BirdNestSystem__ = __webpack_require__(141);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_50__glaze_util_CombatUtils__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_51__systems_BirdSystem__ = __webpack_require__(144);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_52__glaze_core_systems_WaterSystem__ = __webpack_require__(145);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_53__glaze_core_systems_WindSystem__ = __webpack_require__(146);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_54__glaze_tmx_factories_WaterFactory__ = __webpack_require__(147);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_55__factories_item_DoorFactory__ = __webpack_require__(148);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_56__glaze_core_systems_StateSystem__ = __webpack_require__(149);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_57__glaze_util_MessageBus__ = __webpack_require__(150);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_58__glaze_core_systems_StateUpdateSystem__ = __webpack_require__(151);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_59__glaze_tools_HTMLDevTools__ = __webpack_require__(152);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_60__glaze_physics_collision_broadphase_DynamicTreeBroadphase__ = __webpack_require__(155);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_61__systems_ChickenSystem__ = __webpack_require__(157);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_62__glaze_graphics_systems_DebugRendererSystem__ = __webpack_require__(158);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_63__glaze_graphics_components_DebugGraphics__ = __webpack_require__(72);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_64__components_GunTurret__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_65__systems_GunTurretSystem__ = __webpack_require__(160);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_66__glaze_util_FnUtils__ = __webpack_require__(161);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_67__glaze_graphics_displaylist_Camera__ = __webpack_require__(162);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_68__glaze_core_components_Holdable__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_69__glaze_core_systems_HolderSystem__ = __webpack_require__(163);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_70__glaze_core_systems_HoldableSystem__ = __webpack_require__(164);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_71__glaze_core_systems_HeldSystem__ = __webpack_require__(165);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_72__glaze_ecs_Phase__ = __webpack_require__(167);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_73__factories_item_TeleporterFactory__ = __webpack_require__(168);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_74__systems_TeleporterSystem__ = __webpack_require__(170);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_75__glaze_core_components_WaterHolder__ = __webpack_require__(171);












































































const MAP_DATA = "data/16map.json";
const TEXTURE_CONFIG = "data/sprites.json";
const TEXTURE_DATA = "data/sprites.png";
const FRAMES_CONFIG = "data/frames.json";
const PARTICLE_TEXTURE_CONFIG = "data/particles.json";
const PARTICLE_TEXTURE_DATA = "data/particles.png";
const PARTICLE_FRAMES_CONFIG = "data/particleFrames.json";
const TILE_FRAMES_CONFIG = "data/tileFrames.json";
// const COL_SPRITE_SHEET:string = "data/superSet.png";
// const TILE_SPRITE_SHEET_1:string = "data/superSet.png";
// const TILE_SPRITE_SHEET_2:string = "data/superSet.png";
// const TILE_SPRITE_SHEET_B:string = "data/superSet.png";
const TILE_SPRITE_SHEET = "data/superSet.png";
const TILE_SIZE = 16;
class GameTestA extends __WEBPACK_IMPORTED_MODULE_0__glaze_GlazeEngine__["a" /* GlazeEngine */] {
    constructor() {
        const canvas = document.getElementById("view");
        super(canvas);
        this.loadAssets([TEXTURE_CONFIG, TEXTURE_DATA, FRAMES_CONFIG, MAP_DATA, TILE_SPRITE_SHEET, TILE_FRAMES_CONFIG]);
    }
    initalize() {
        this.engine.addCapacityToEngine(1000);
        const tmxMap = JSON.parse(this.assets.assets.get(MAP_DATA));
        var cameraRange = new __WEBPACK_IMPORTED_MODULE_2__glaze_geom_AABB2__["a" /* AABB2 */](0, TILE_SIZE * tmxMap.width, TILE_SIZE * tmxMap.height, 0);
        cameraRange.expand(-TILE_SIZE);
        const camera = new __WEBPACK_IMPORTED_MODULE_67__glaze_graphics_displaylist_Camera__["a" /* Camera */]();
        camera.worldExtentsAABB = cameraRange;
        const collisionData = Object(__WEBPACK_IMPORTED_MODULE_7__glaze_tmx_TMXMap__["c" /* LayerToCollisionData */])(Object(__WEBPACK_IMPORTED_MODULE_7__glaze_tmx_TMXMap__["e" /* TMXdecodeLayer */])(Object(__WEBPACK_IMPORTED_MODULE_7__glaze_tmx_TMXMap__["a" /* GetLayer */])(tmxMap, "Collision")), Object(__WEBPACK_IMPORTED_MODULE_7__glaze_tmx_TMXMap__["b" /* GetTileSet */])(tmxMap, "Collision").firstgid, TILE_SIZE);
        const tileMapCollision = new __WEBPACK_IMPORTED_MODULE_11__glaze_physics_collision_broadphase_TileMapCollision__["a" /* TileMapCollision */](collisionData);
        const blockParticleEngine = new __WEBPACK_IMPORTED_MODULE_30__glaze_particle_engines_BlockParticleEngine2__["a" /* BlockParticleEngine2 */](4000, 1000 / 60, collisionData);
        // const broadphase = new BruteforceBroadphase(tileMapCollision);
        const broadphase = new __WEBPACK_IMPORTED_MODULE_60__glaze_physics_collision_broadphase_DynamicTreeBroadphase__["a" /* DynamicTreeBroadphase */](tileMapCollision);
        this.dynamicTree = broadphase.tree;
        __WEBPACK_IMPORTED_MODULE_50__glaze_util_CombatUtils__["a" /* CombatUtils */].setup(this.engine, broadphase);
        const messageBus = new __WEBPACK_IMPORTED_MODULE_57__glaze_util_MessageBus__["a" /* MessageBus */]();
        // Just a hack for dev
        window.mb = messageBus;
        const corePhase = new __WEBPACK_IMPORTED_MODULE_72__glaze_ecs_Phase__["a" /* Phase */]();
        this.engine.addPhase(corePhase);
        // Non dynamic
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_15__glaze_physics_systems_PhysicsMassSystem__["a" /* PhysicsMassSystem */]());
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_12__glaze_physics_systems_PhysicsStaticSystem__["a" /* PhysicsStaticSystem */](broadphase));
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_13__glaze_physics_systems_PhysicsMoveableSystem__["a" /* PhysicsMoveableSystem */](broadphase));
        // Dynamic
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_25__glaze_physics_systems_PhysicsUpdateSystem__["a" /* PhysicsUpdateSystem */]());
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_14__glaze_physics_systems_PhysicsCollisionSystem__["a" /* PhysicsCollisionSystem */](broadphase));
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_16__glaze_physics_systems_PhysicsPositionSystem__["a" /* PhysicsPositionSystem */]());
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_71__glaze_core_systems_HeldSystem__["a" /* HeldSystem */]());
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_40__systems_PlayerSystem__["a" /* PlayerSystem */](this.input, blockParticleEngine));
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_45__glaze_ai_steering_systems_SteeringSystem__["a" /* SteeringSystem */](tileMapCollision));
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_26__glaze_core_systems_ControllerSystem__["a" /* ControllerSystem */](this.input));
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_31__glaze_particle_systems_ParticleSystem__["a" /* ParticleSystem */](blockParticleEngine));
        // TODO Temp
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_32__glaze_space_systems_FixedViewManagementSystem__["a" /* FixedViewManagementSystem */](camera));
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_33__glaze_core_systems_AgeSystem__["a" /* AgeSystem */]());
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_34__glaze_core_systems_HealthSystem__["a" /* HealthSystem */]());
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_35__glaze_core_systems_CollisionCountSystem__["a" /* CollsionCountSystem */]());
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_41__glaze_physics_systems_EnvironmentForceSystem__["a" /* EnvironmentForceSystem */]());
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_47__systems_BeeHiveSystem__["a" /* BeeHiveSystem */]());
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_49__systems_BirdNestSystem__["a" /* BirdNestSystem */]());
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_51__systems_BirdSystem__["a" /* BirdSystem */](__WEBPACK_IMPORTED_MODULE_50__glaze_util_CombatUtils__["a" /* CombatUtils */].bfAreaQuery));
        const chickenSystem = new __WEBPACK_IMPORTED_MODULE_61__systems_ChickenSystem__["a" /* ChickenSystem */](blockParticleEngine);
        corePhase.addSystem(chickenSystem);
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_65__systems_GunTurretSystem__["a" /* GunTurretSystem */]());
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_52__glaze_core_systems_WaterSystem__["a" /* WaterSystem */](blockParticleEngine));
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_53__glaze_core_systems_WindSystem__["a" /* WindSystem */](blockParticleEngine, 16));
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_56__glaze_core_systems_StateSystem__["a" /* StateSystem */]());
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_58__glaze_core_systems_StateUpdateSystem__["a" /* StateUpdateSystem */](messageBus));
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_69__glaze_core_systems_HolderSystem__["a" /* HolderSystem */](__WEBPACK_IMPORTED_MODULE_36__config_Filters__["a" /* TestFilters */].HOLDABLE_CAT));
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_70__glaze_core_systems_HoldableSystem__["a" /* HoldableSystem */](__WEBPACK_IMPORTED_MODULE_36__config_Filters__["a" /* TestFilters */].HOLDABLE_CAT));
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_74__systems_TeleporterSystem__["a" /* TeleporterSystem */]());
        corePhase.addSystem(new __WEBPACK_IMPORTED_MODULE_38__glaze_core_systems_DestroySystem__["a" /* DestroySystem */]());
        // BEGIN RENDER SYSTEM
        const renderPhase = new __WEBPACK_IMPORTED_MODULE_72__glaze_ecs_Phase__["a" /* Phase */]();
        this.engine.addPhase(renderPhase);
        this.renderSystem = new __WEBPACK_IMPORTED_MODULE_1__glaze_graphics_systems_GraphicsRenderSystem__["a" /* GraphicsRenderSystem */](this.canvas, camera, new __WEBPACK_IMPORTED_MODULE_5__glaze_geom_Vector2__["a" /* Vector2 */](1280, 720));
        this.renderSystem.textureManager.AddTexture(TEXTURE_DATA, this.assets.assets.get(TEXTURE_DATA));
        this.renderSystem.textureManager.AddTexture(TILE_SPRITE_SHEET, this.assets.assets.get(TILE_SPRITE_SHEET));
        this.renderSystem.textureManager.ParseTexturePackerJSON(this.assets.assets.get(TEXTURE_CONFIG), TEXTURE_DATA);
        this.renderSystem.frameListManager.ParseFrameListJSON(this.assets.assets.get(FRAMES_CONFIG));
        // TODO Move this up, later & dort out deps.
        renderPhase.addSystem(new __WEBPACK_IMPORTED_MODULE_10__glaze_graphics_systems_AnimationSystem__["a" /* AnimationSystem */](this.renderSystem.frameListManager));
        const background = Object(__WEBPACK_IMPORTED_MODULE_7__glaze_tmx_TMXMap__["d" /* LayerToCoordTexture */])(Object(__WEBPACK_IMPORTED_MODULE_7__glaze_tmx_TMXMap__["e" /* TMXdecodeLayer */])(Object(__WEBPACK_IMPORTED_MODULE_7__glaze_tmx_TMXMap__["a" /* GetLayer */])(tmxMap, "Background")));
        const foreground1 = Object(__WEBPACK_IMPORTED_MODULE_7__glaze_tmx_TMXMap__["d" /* LayerToCoordTexture */])(Object(__WEBPACK_IMPORTED_MODULE_7__glaze_tmx_TMXMap__["e" /* TMXdecodeLayer */])(Object(__WEBPACK_IMPORTED_MODULE_7__glaze_tmx_TMXMap__["a" /* GetLayer */])(tmxMap, "Foreground1")));
        const foreground2 = Object(__WEBPACK_IMPORTED_MODULE_7__glaze_tmx_TMXMap__["d" /* LayerToCoordTexture */])(Object(__WEBPACK_IMPORTED_MODULE_7__glaze_tmx_TMXMap__["e" /* TMXdecodeLayer */])(Object(__WEBPACK_IMPORTED_MODULE_7__glaze_tmx_TMXMap__["a" /* GetLayer */])(tmxMap, "Foreground2")));
        var tileMapRenderer = new __WEBPACK_IMPORTED_MODULE_8__glaze_graphics_render_tile_TileMapRenderer__["a" /* TileMapRenderer */](16 / 2, 2);
        tileMapRenderer.SetTileRenderLayer("bg", ["Background", "Foreground1"]);
        tileMapRenderer.SetTileRenderLayer("fg", ["Foreground2"]);
        this.renderSystem.renderer.AddRenderer(tileMapRenderer);
        tileMapRenderer.SetTileLayerFromData(foreground2, this.renderSystem.textureManager.baseTextures.get(TILE_SPRITE_SHEET), "Foreground2", 1, 1);
        tileMapRenderer.SetTileLayerFromData(foreground1, this.renderSystem.textureManager.baseTextures.get(TILE_SPRITE_SHEET), "Foreground1", 1, 1);
        tileMapRenderer.SetTileLayerFromData(background, this.renderSystem.textureManager.baseTextures.get(TILE_SPRITE_SHEET), "Background", 1, 1);
        const spriteRender = new __WEBPACK_IMPORTED_MODULE_6__glaze_graphics_render_sprite_SpriteRenderer__["a" /* SpriteRenderer */]();
        spriteRender.AddStage(this.renderSystem.stage);
        this.renderSystem.renderer.AddRenderer(spriteRender);
        this.renderSystem.itemContainer.addChild(tileMapRenderer.renderLayersMap.get("bg").sprite);
        this.renderSystem.camera.addChild(tileMapRenderer.renderLayersMap.get("fg").sprite);
        renderPhase.addSystem(this.renderSystem);
        const debugCanvas = document.getElementById("viewDebug");
        const debugRenderSystem = new __WEBPACK_IMPORTED_MODULE_62__glaze_graphics_systems_DebugRendererSystem__["a" /* DebugRenderSystem */](debugCanvas, this.renderSystem.camera);
        renderPhase.addSystem(debugRenderSystem);
        this.debugGraphics = debugRenderSystem.debugRender;
        renderPhase.addSystem(new __WEBPACK_IMPORTED_MODULE_27__glaze_graphics_systems_TileGraphicsRenderSystem__["a" /* TileGraphicsRenderSystem */](this.assets.assets.get(TILE_FRAMES_CONFIG), tileMapRenderer, tileMapCollision));
        this.renderSystem.renderer.AddRenderer(blockParticleEngine.renderer);
        // GPU calculated lights
        // const lightSystem = new PointLightingSystem(tileMapCollision);
        // this.renderSystem.renderer.AddRenderer(lightSystem.renderer);
        // renderPhase.addSystem(lightSystem);
        // JS calculated ights
        // const lightSystem = new FloodLightingSystem(tileMapCollision.data);
        // this.renderSystem.renderer.AddRenderer(lightSystem.renderer);
        // renderPhase.addSystem(lightSystem);
        // JS recursive lights slooooow
        // const lightSystem = new RecursiveLightingSystem(tileMapCollision.data);
        // or less slow
        // const lightSystem = new BFSLightingSystem(tileMapCollision.data);
        // const lightSystem = new WaterRenderSystem(tileMapCollision.data);
        // const lightSystem = new CALightingSystem(tileMapCollision.data);
        // this.renderSystem.renderer.AddRenderer(lightSystem.renderer);
        // renderPhase.addSystem(lightSystem);
        // END SETUP RENDER SYSTEM
        const playerPosition = this.mapPosition(33.5, 38.5); //     this.mapPosition(3, 16);
        const playerEntity = __WEBPACK_IMPORTED_MODULE_39__factories_character_PlayerFactory__["a" /* PlayerFactory */].create(this.engine, playerPosition);
        chickenSystem.scaredOf(playerEntity);
        this.renderSystem.cameraTarget = playerPosition.coords;
        let x = 0;
        let y = 0;
        let player = null;
        for (var count = 0; count < 1; count++) {
            const chicken = this.engine.createEntity();
            if (player == null) {
                player = chicken;
            }
            x += 20;
            if (x > 700) {
                x = 0;
                y += 20;
            }
            var chickenBody = new __WEBPACK_IMPORTED_MODULE_21__glaze_physics_Body__["a" /* Body */](__WEBPACK_IMPORTED_MODULE_20__glaze_physics_Material__["a" /* Material */].NORMAL);
            chickenBody.setBounces(3);
            chickenBody.maxScalarVelocity = 1000;
            this.engine.addComponentsToEntity(chicken, [
                new __WEBPACK_IMPORTED_MODULE_3__glaze_core_components_Position__["a" /* Position */](100 + x, 200 + y),
                new __WEBPACK_IMPORTED_MODULE_17__glaze_core_components_Extents__["a" /* Extents */](12, 12),
                new __WEBPACK_IMPORTED_MODULE_4__glaze_graphics_components_Graphics__["a" /* Graphics */]("chicken"),
                new __WEBPACK_IMPORTED_MODULE_9__glaze_graphics_components_GraphicsAnimation__["a" /* GraphicsAnimation */]("chicken", "walk"),
                new __WEBPACK_IMPORTED_MODULE_18__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */](false, new __WEBPACK_IMPORTED_MODULE_19__glaze_physics_collision_Filter__["a" /* Filter */](), []),
                new __WEBPACK_IMPORTED_MODULE_22__glaze_physics_components_PhysicsBody__["a" /* PhysicsBody */](chickenBody, true),
                new __WEBPACK_IMPORTED_MODULE_23__glaze_core_components_Moveable__["a" /* Moveable */](),
                new __WEBPACK_IMPORTED_MODULE_24__glaze_core_components_Active__["a" /* Active */](),
                // new Light(64, 1, 1, 1, 255, 255, 255),
                new __WEBPACK_IMPORTED_MODULE_44__glaze_core_components_Viewable__["a" /* Viewable */](),
                new __WEBPACK_IMPORTED_MODULE_63__glaze_graphics_components_DebugGraphics__["a" /* DebugGraphics */](),
            ]);
        }
        const factories = new Map();
        factories.set(__WEBPACK_IMPORTED_MODULE_43__glaze_tmx_factories_ForceFactory__["a" /* ForceFactory */].mapping, __WEBPACK_IMPORTED_MODULE_43__glaze_tmx_factories_ForceFactory__["a" /* ForceFactory */].createTMXEntity);
        factories.set(__WEBPACK_IMPORTED_MODULE_54__glaze_tmx_factories_WaterFactory__["a" /* WaterFactory */].mapping, __WEBPACK_IMPORTED_MODULE_54__glaze_tmx_factories_WaterFactory__["a" /* WaterFactory */].createTMXEntity);
        factories.set(__WEBPACK_IMPORTED_MODULE_55__factories_item_DoorFactory__["a" /* DoorFactory */].mapping, __WEBPACK_IMPORTED_MODULE_55__factories_item_DoorFactory__["a" /* DoorFactory */].createTMXEntity);
        Object(__WEBPACK_IMPORTED_MODULE_42__glaze_tmx_TMXFactory__["a" /* createTMXLayerEntities */])(this.engine, Object(__WEBPACK_IMPORTED_MODULE_7__glaze_tmx_TMXMap__["a" /* GetLayer */])(tmxMap, "Objects"), factories);
        // const pos: Position = this.engine.getComponentForEntity(player, Position);
        // this.renderSystem.cameraTarget = pos.coords; // new Vector2(400, 400);
        __WEBPACK_IMPORTED_MODULE_73__factories_item_TeleporterFactory__["a" /* TeleporterFactory */].create(this.engine, this.mapPosition(3, 23), new __WEBPACK_IMPORTED_MODULE_17__glaze_core_components_Extents__["a" /* Extents */](16, 32));
        const doorSwitch = this.engine.createEntity();
        this.engine.addComponentsToEntity(doorSwitch, [
            this.mapPosition(10.5, 18.5),
            new __WEBPACK_IMPORTED_MODULE_17__glaze_core_components_Extents__["a" /* Extents */](8, 8),
            new __WEBPACK_IMPORTED_MODULE_18__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */](false, new __WEBPACK_IMPORTED_MODULE_19__glaze_physics_collision_Filter__["a" /* Filter */](), [
                // ()=>{debugger;},
                Object(__WEBPACK_IMPORTED_MODULE_66__glaze_util_FnUtils__["a" /* throttle */])(() => {
                    messageBus.trigger("doorA", {});
                }, 1000),
            ]),
            new __WEBPACK_IMPORTED_MODULE_29__glaze_core_components_Fixed__["a" /* Fixed */](),
            new __WEBPACK_IMPORTED_MODULE_24__glaze_core_components_Active__["a" /* Active */](),
            new __WEBPACK_IMPORTED_MODULE_28__glaze_graphics_components_TileGraphics__["a" /* TileGraphics */]("switchOff"),
        ]);
        const beeHive = this.engine.createEntity();
        this.engine.addComponentsToEntity(beeHive, [
            this.mapPosition(20.5, 17),
            new __WEBPACK_IMPORTED_MODULE_17__glaze_core_components_Extents__["a" /* Extents */](16, 16),
            new __WEBPACK_IMPORTED_MODULE_4__glaze_graphics_components_Graphics__["a" /* Graphics */]("insects", "hive"),
            new __WEBPACK_IMPORTED_MODULE_18__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */](false, null, []),
            new __WEBPACK_IMPORTED_MODULE_29__glaze_core_components_Fixed__["a" /* Fixed */](),
            new __WEBPACK_IMPORTED_MODULE_24__glaze_core_components_Active__["a" /* Active */](),
            new __WEBPACK_IMPORTED_MODULE_46__components_BeeHive__["a" /* BeeHive */](5),
        ]);
        const birdNest = this.engine.createEntity();
        this.engine.addComponentsToEntity(birdNest, [
            this.mapPosition(34, 30),
            new __WEBPACK_IMPORTED_MODULE_17__glaze_core_components_Extents__["a" /* Extents */](7, 7),
            new __WEBPACK_IMPORTED_MODULE_29__glaze_core_components_Fixed__["a" /* Fixed */](),
            new __WEBPACK_IMPORTED_MODULE_48__components_BirdNest__["a" /* BirdNest */](5),
            new __WEBPACK_IMPORTED_MODULE_24__glaze_core_components_Active__["a" /* Active */](),
        ]);
        const turret = this.engine.createEntity();
        const turretFilter = new __WEBPACK_IMPORTED_MODULE_19__glaze_physics_collision_Filter__["a" /* Filter */]();
        turretFilter.groupIndex = __WEBPACK_IMPORTED_MODULE_36__config_Filters__["a" /* TestFilters */].TURRET_GROUP;
        this.engine.addComponentsToEntity(turret, [
            this.mapPosition(25, 1.5),
            new __WEBPACK_IMPORTED_MODULE_28__glaze_graphics_components_TileGraphics__["a" /* TileGraphics */]("turret"),
            new __WEBPACK_IMPORTED_MODULE_17__glaze_core_components_Extents__["a" /* Extents */](12, 12),
            new __WEBPACK_IMPORTED_MODULE_18__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */](false, turretFilter, []),
            new __WEBPACK_IMPORTED_MODULE_29__glaze_core_components_Fixed__["a" /* Fixed */](),
            new __WEBPACK_IMPORTED_MODULE_64__components_GunTurret__["a" /* GunTurret */](1000),
            new __WEBPACK_IMPORTED_MODULE_24__glaze_core_components_Active__["a" /* Active */](),
        ]);
        const rock = this.engine.createEntity();
        this.engine.addComponentsToEntity(rock, [
            this.mapPosition(13, 4),
            new __WEBPACK_IMPORTED_MODULE_17__glaze_core_components_Extents__["a" /* Extents */](7, 7),
            new __WEBPACK_IMPORTED_MODULE_4__glaze_graphics_components_Graphics__["a" /* Graphics */]("items", "rock"),
            new __WEBPACK_IMPORTED_MODULE_18__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */](false, new __WEBPACK_IMPORTED_MODULE_19__glaze_physics_collision_Filter__["a" /* Filter */](), []),
            new __WEBPACK_IMPORTED_MODULE_23__glaze_core_components_Moveable__["a" /* Moveable */](),
            new __WEBPACK_IMPORTED_MODULE_22__glaze_physics_components_PhysicsBody__["a" /* PhysicsBody */](new __WEBPACK_IMPORTED_MODULE_21__glaze_physics_Body__["a" /* Body */](__WEBPACK_IMPORTED_MODULE_20__glaze_physics_Material__["a" /* Material */].ROCK), true),
            new __WEBPACK_IMPORTED_MODULE_68__glaze_core_components_Holdable__["a" /* Holdable */](),
            new __WEBPACK_IMPORTED_MODULE_24__glaze_core_components_Active__["a" /* Active */](),
        ]);
        const waterContainer = this.engine.createEntity();
        this.engine.addComponentsToEntity(waterContainer, [
            this.mapPosition(25, 57),
            new __WEBPACK_IMPORTED_MODULE_17__glaze_core_components_Extents__["a" /* Extents */](6, 14),
            new __WEBPACK_IMPORTED_MODULE_4__glaze_graphics_components_Graphics__["a" /* Graphics */]("items", "water_container"),
            new __WEBPACK_IMPORTED_MODULE_18__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */](false, new __WEBPACK_IMPORTED_MODULE_19__glaze_physics_collision_Filter__["a" /* Filter */](), []),
            new __WEBPACK_IMPORTED_MODULE_23__glaze_core_components_Moveable__["a" /* Moveable */](),
            new __WEBPACK_IMPORTED_MODULE_22__glaze_physics_components_PhysicsBody__["a" /* PhysicsBody */](new __WEBPACK_IMPORTED_MODULE_21__glaze_physics_Body__["a" /* Body */](__WEBPACK_IMPORTED_MODULE_20__glaze_physics_Material__["a" /* Material */].NORMAL), true),
            new __WEBPACK_IMPORTED_MODULE_68__glaze_core_components_Holdable__["a" /* Holdable */](),
            new __WEBPACK_IMPORTED_MODULE_75__glaze_core_components_WaterHolder__["a" /* WaterHolder */](10),
            new __WEBPACK_IMPORTED_MODULE_24__glaze_core_components_Active__["a" /* Active */]()
        ]);
        this.loop.start();
        Object(__WEBPACK_IMPORTED_MODULE_59__glaze_tools_HTMLDevTools__["a" /* listenDebugButtons */])(this.engine);
    }
    mapPosition(xTiles, yTiles) {
        return new __WEBPACK_IMPORTED_MODULE_3__glaze_core_components_Position__["a" /* Position */](xTiles * TILE_SIZE, yTiles * TILE_SIZE);
    }
    fireBullet(position, target) {
        var filter = new __WEBPACK_IMPORTED_MODULE_19__glaze_physics_collision_Filter__["a" /* Filter */]();
        filter.groupIndex = __WEBPACK_IMPORTED_MODULE_36__config_Filters__["a" /* TestFilters */].TURRET_GROUP;
        var bullet = __WEBPACK_IMPORTED_MODULE_37__factories_projectile_StandardBullet__["a" /* StandardBullet */].create(this.engine, new __WEBPACK_IMPORTED_MODULE_3__glaze_core_components_Position__["a" /* Position */](position.x, position.y), filter, target);
    }
    preUpdate() {
        this.input.Update(-this.renderSystem.camera.position.x, -this.renderSystem.camera.position.y);
    }
    postUpdate() {
        if (__WEBPACK_IMPORTED_MODULE_0__glaze_GlazeEngine__["a" /* GlazeEngine */].params.debug && this.dynamicTree)
            this.dynamicTree.debugDraw(this.debugGraphics);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = GameTestA;



/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__ = __webpack_require__(0);

class DigitalInput {
    constructor() {
        this.keyMap = new Array();
        for (var i = 0; i < 256; i++) {
            this.keyMap[i] = 0;
        }
        this.mousePosition = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.mousePreviousPosition = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.mouseOffset = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.frameRef = 2;
    }
    InputTarget(target, inputCorrection) {
        this.target = target;
        target.addEventListener("keydown", this.KeyDown.bind(this), false);
        target.addEventListener("keyup", this.KeyUp.bind(this), false);
        target.addEventListener("mousedown", this.MouseDown.bind(this), false);
        //target.addEventListener("touchstart",MouseDown,false);
        target.addEventListener("mouseup", this.MouseUp.bind(this), false);
        target.addEventListener("mousemove", this.MouseMove.bind(this), false);
        // target.addEventListener(MouseEvent.RIGHT_MOUSE_DOWN, RightMouseDown, false, 0, true);
        // target.addEventListener(MouseEvent.RIGHT_MOUSE_UP, RightMouseUp, false, 0, true);
        this.inputCorrection = inputCorrection;
    }
    ViewCorrectedMousePosition() {
        var pos = this.mousePosition.clone();
        pos.plusEquals(this.mouseOffset);
        return pos;
    }
    Update(x, y) {
        this.mouseOffset.x = x;
        this.mouseOffset.y = y;
        this.frameRef++;
        // mousePreviousPosition.x = mousePosition.x;
        // mousePreviousPosition.y = mousePosition.y;
        // mousePosition.x = target.mouseX + screenOffset.x;
        // mousePosition.y = target.mouseY + screenOffset.y;
    }
    KeyDown(event) {
        if (this.keyMap[event.keyCode] == 0) {
            this.keyMap[event.keyCode] = this.frameRef;
        }
        event.preventDefault();
    }
    KeyUp(event) {
        this.keyMap[event.keyCode] = 0;
        event.preventDefault();
    }
    MouseDown(event) {
        this.keyMap[200] = this.frameRef;
        event.preventDefault();
    }
    MouseUp(event) {
        this.keyMap[200] = 0;
        event.preventDefault();
    }
    MouseMove(event) {
        this.mousePreviousPosition.x = this.mousePosition.x;
        this.mousePreviousPosition.y = this.mousePosition.y;
        this.mousePosition.x = event.clientX - this.inputCorrection.x;
        this.mousePosition.y = event.clientY - this.inputCorrection.y;
        event.preventDefault();
    }
    // public  RightMouseDown(event : MouseEvent) : Void {
    //     keyMap[201] = frameRef;
    // }
    // public  RightMouseUp(event : MouseEvent) : Void {
    //     keyMap[201] = 0;
    // }
    Pressed(keyCode) {
        return this.keyMap[keyCode] > 0;
    }
    JustPressed(keyCode) {
        return this.keyMap[keyCode] == this.frameRef - 1;
    }
    PressedDuration(keyCode) {
        var duration = this.keyMap[keyCode];
        return duration > 0 ? this.frameRef - duration : -1;
    }
    Released(keyCode) {
        return this.keyMap[keyCode] == 0;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DigitalInput;



/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_Pool__ = __webpack_require__(48);

class Engine {
    constructor() {
        this.components = new Map();
        this.phases = new Array();
        this.systems = new Array();
        this.c4e = new Map();
        this.entityPool = new __WEBPACK_IMPORTED_MODULE_0__util_Pool__["a" /* Pool */](i => i);
    }
    addCapacityToEngine(entityCount) {
        this.entityPool.addCapacity(entityCount);
        this.components.forEach((_, name) => this.components.set(name, [...this.components.get(name), ...emptyNullArray(this.entityPool.capacity)]));
    }
    createEntity() {
        const entity = this.entityPool.reserve();
        this.c4e.set(entity, createGetComponentForEntity(this, entity));
        return entity;
    }
    destroyEntity(entity) {
        this.systems.forEach(system => system.removeEntity(entity));
        this.clearAllComponentsForEntity(entity);
        this.entityPool.free(entity);
        this.c4e.delete(entity);
    }
    getComponentForEntity(entity, component) {
        const name = component.name;
        if (this.components.has(name))
            return this.components.get(name)[entity];
        return null;
    }
    addComponentsToEntity(entity, componentsToAdd) {
        componentsToAdd.forEach(component => {
            const name = component.constructor.name;
            if (!this.components.has(name)) {
                this.createComponentEntry(name);
            }
            this.components.get(name)[entity] = component;
        });
        this.matchEntity(entity);
    }
    removeComponentsFromEntity(entity, componentsToRemove) {
        componentsToRemove.forEach(component => {
            const name = component.name;
            if (this.components.has(name))
                this.components.get(name)[entity] = null;
        });
        this.matchEntity(entity);
    }
    addPhase(phase) {
        phase.engine = this;
        this.phases.push(phase);
    }
    addPhaseSystemToEngine(system) {
        system.engine = this;
        this.systems.push(system);
        system.components.forEach((name) => this.createComponentEntry(name));
    }
    update(dt, timestamp) {
        this.phases.forEach(phase => phase.updatePhase(dt, timestamp));
    }
    query(query) {
        const result = [];
        for (let i = 0; i < this.entityPool.capacity; i++) {
            if (query.every(component => this.components.get(component.name)[i] !== null)) {
                result.push(i);
            }
        }
        return result;
    }
    createComponentEntry(name) {
        this.components.set(name, emptyNullArray(this.entityPool.capacity));
    }
    matchEntity(entity) {
        this.systems.forEach(system => system.components.reduce((sum, name) => (this.components.get(name)[entity] ? sum - 1 : sum), system.components.length) === 0
            ? system.addEntity(entity, this.entityComponentsForSystem(entity, system))
            : system.removeEntity(entity));
    }
    entityComponentsForSystem(entity, system) {
        return system.components.map(name => this.components.get(name)[entity]);
    }
    addEntitiesToComponentList(componentName) {
        this.components.set(componentName, emptyNullArray(this.entityPool.capacity));
    }
    clearAllComponentsForEntity(entity) {
        this.components.forEach((entities) => (entities[entity] = null));
    }
    snapshot() {
        return {
            activeEntities: this.entityPool.assigned,
            totalEntitiesCreated: this.entityPool.totalAllocations,
        };
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Engine;

// const setIdOnComponent = (component: IComponent<any>, id: number) => (component._id_ = id);
const emptyArray = () => [];
const emptyNullArray = count => Array(count).fill(null);
const createGetComponentForEntity = (engine, entity) => (component) => engine.getComponentForEntity(entity, component);
/* unused harmony export createGetComponentForEntity */



/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__signals_Signal__ = __webpack_require__(24);

class AssetLoader {
    constructor() {
        this.assets = new Map();
        this.loaded = new __WEBPACK_IMPORTED_MODULE_0__signals_Signal__["a" /* Signal */]();
        this.Reset();
    }
    Reset() {
        this.running = false;
        this.loaders = new Array();
    }
    SetImagesToLoad(urls) {
        urls.forEach(url => this.AddAsset(url));
    }
    AddAsset(url) {
        if (this.running == true)
            return;
        var loader = this.LoaderFactory(url);
        loader.Init(url);
        this.loaders.push(loader);
    }
    LoaderFactory(url) {
        var extention = url.substring(url.length - 3, url.length);
        if (extention == "png")
            return new ImageAsset(this);
        if (extention == "tmx" || extention == "xml" || extention == "son")
            return new BlobAsset(this);
        return null;
    }
    Load() {
        if (this.running == true || this.loaders.length == 0)
            return;
        this.completeCount = this.loaders.length;
        this.running = true;
        this.loaders.forEach(loader => loader.Load());
    }
    onLoad(item) {
        this.completeCount--;
        this.assets.set(item.getKey(), item.getValue());
        if (this.completeCount == 0) {
            this.loaded.dispatch();
            this.running = false;
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = AssetLoader;

class ImageAsset {
    constructor(mgr) {
        this.mgr = mgr;
    }
    Init(url) {
        this.url = url;
        this.image = new Image();
        this.image.onload = this.onLoad.bind(this);
        this.image.crossOrigin = "anonymous";
    }
    Load() {
        this.image.src = this.url + "?cb=" + Date.now();
        if (this.image.complete == true) {
            this.onLoad(null);
        }
    }
    onLoad(event) {
        if (this.mgr != null) {
            this.mgr.onLoad(this);
        }
    }
    getKey() {
        return this.url;
    }
    getValue() {
        return this.image;
    }
}
class BlobAsset {
    constructor(mgr) {
        this.mgr = mgr;
    }
    Init(url) {
        this.url = url;
        this.xhr = new XMLHttpRequest();
        this.xhr.responseType = "text";
        this.xhr.onload = this.onLoad.bind(this);
        this.xhr.open("GET", this.url + "?cb=" + Date.now(), true);
    }
    Load() {
        this.xhr.send();
    }
    onLoad(event) {
        if (this.mgr != null) {
            this.mgr.onLoad(this);
        }
    }
    getKey() {
        return this.url;
    }
    getValue() {
        return this.xhr.response;
    }
}


/***/ }),
/* 80 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class SignalBinding {
    constructor(signal, listener, isOnce, listenerContext, priority = 0) {
        this.active = true;
        this.params = null;
        this._listener = listener;
        this._isOnce = isOnce;
        this.context = listenerContext;
        this._signal = signal;
        this.priority = priority || 0;
    }
    execute(paramsArr) {
        var handlerReturn;
        var params;
        if (this.active && !!this._listener) {
            params = this.params ? this.params.concat(paramsArr) : paramsArr;
            handlerReturn = this._listener.apply(this.context, params);
            if (this._isOnce) {
                this.detach();
            }
        }
        return handlerReturn;
    }
    detach() {
        return this.isBound() ? this._signal.remove(this._listener, this.context) : null;
    }
    isBound() {
        return !!this._signal && !!this._listener;
    }
    isOnce() {
        return this._isOnce;
    }
    getListener() {
        return this._listener;
    }
    getSignal() {
        return this._signal;
    }
    _destroy() {
        delete this._signal;
        delete this._listener;
        delete this.context;
    }
    toString() {
        return ("[SignalBinding isOnce:" + this._isOnce + ", isBound:" + this.isBound() + ", active:" + this.active + "]");
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SignalBinding;



/***/ }),
/* 81 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const MIN_DELTA = 1000 / 60 + 1e-8;
class GameLoop {
    constructor() {
        this.isRunning = false;
        this.update = this.update.bind(this);
    }
    update(timestamp) {
        this.delta = this.prevAnimationTime == 0 ? MIN_DELTA : timestamp - this.prevAnimationTime;
        this.prevAnimationTime = timestamp;
        if (this.updateFunc != null)
            //trace(Math.max(delta,MIN_DELTA));
            //updateFunc(Math.max(delta,MIN_DELTA),Math.floor(timestamp));
            // updateFunc(1000/60,Math.floor(timestamp));
            this.updateFunc(MIN_DELTA, Math.floor(timestamp));
        this.rafID = window.requestAnimationFrame(this.update);
        return false;
    }
    start() {
        if (this.isRunning == true)
            return;
        this.isRunning = true;
        this.prevAnimationTime = 0;
        this.rafID = window.requestAnimationFrame(this.update);
    }
    stop() {
        if (this.isRunning == false)
            return;
        this.isRunning = false;
        window.cancelAnimationFrame(this.rafID);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = GameLoop;



/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_components_Position__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_Graphics__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__displaylist_Stage__ = __webpack_require__(83);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__render_RenderEngine__ = __webpack_require__(86);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__texture_TextureManager__ = __webpack_require__(87);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__displaylist_DisplayObjectContainer__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__frame_FrameListManager__ = __webpack_require__(88);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__displaylist_Sprite__ = __webpack_require__(51);









class GraphicsRenderSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor(canvas, camera, screenDimension) {
        super([__WEBPACK_IMPORTED_MODULE_1__core_components_Position__["a" /* Position */], __WEBPACK_IMPORTED_MODULE_2__components_Graphics__["a" /* Graphics */]]);
        this.canvas = canvas;
        this.stage = new __WEBPACK_IMPORTED_MODULE_3__displaylist_Stage__["a" /* Stage */]();
        this.camera = camera;
        this.stage.addChild(this.camera);
        this.renderer = new __WEBPACK_IMPORTED_MODULE_4__render_RenderEngine__["a" /* RendererEngine */](this.stage, this.camera, this.canvas, screenDimension.x, screenDimension.y);
        this.camera.Resize(this.renderer.width, this.renderer.height);
        this.textureManager = new __WEBPACK_IMPORTED_MODULE_5__texture_TextureManager__["a" /* TextureManager */](this.renderer.gl);
        this.frameListManager = new __WEBPACK_IMPORTED_MODULE_7__frame_FrameListManager__["a" /* FrameListManager */](this.textureManager);
        this.itemContainer = new __WEBPACK_IMPORTED_MODULE_6__displaylist_DisplayObjectContainer__["a" /* DisplayObjectContainer */]();
        this.itemContainer.id = "itemContainer";
        this.camera.addChild(this.itemContainer);
    }
    initalize() {
    }
    onEntityAdded(entity, position, graphics) {
        if (graphics.sprite == null) {
            graphics.sprite = new __WEBPACK_IMPORTED_MODULE_8__displaylist_Sprite__["a" /* Sprite */]();
            graphics.frameList = this.frameListManager.getFrameList(graphics.frameListId);
            if (graphics.initialFrameId != null) {
                graphics.setFrame(graphics.frameList.getFrame(graphics.initialFrameId));
            }
            else {
                graphics.setFrame(graphics.frameList.frames[0]);
            }
            graphics.sprite.position = position.coords;
        }
        this.itemContainer.addChild(graphics.sprite);
    }
    onEntityRemoved(entity, position, graphics) {
        this.itemContainer.removeChild(graphics.sprite);
    }
    updateSystem() {
        this.camera.Focus(this._cameraTarget.x, this._cameraTarget.y);
        this.renderer.Render(this.camera.viewPortAABB);
    }
    set cameraTarget(target) {
        this._cameraTarget = target;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = GraphicsRenderSystem;



/***/ }),
/* 83 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__DisplayObjectContainer__ = __webpack_require__(25);

class Stage extends __WEBPACK_IMPORTED_MODULE_0__DisplayObjectContainer__["a" /* DisplayObjectContainer */] {
    constructor() {
        super();
        this.id = "Stage";
        this.worldAlpha = this.alpha;
    }
    updateTransform() {
        var child = this.head;
        while (child != null) {
            child.updateTransform();
            child = child.next;
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Stage;



/***/ }),
/* 84 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geom_Matrix3__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__geom_AABB2__ = __webpack_require__(11);



class DisplayObject {
    constructor() {
        this.position = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.scale = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */](1, 1);
        this.pivot = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this._rotationComponents = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.rotation = 0;
        this.alpha = 1;
        this.visible = true;
        this.renderable = false;
        this.aabb = new __WEBPACK_IMPORTED_MODULE_2__geom_AABB2__["a" /* AABB2 */]();
        this.parent = null;
        this.worldTransform = Object(__WEBPACK_IMPORTED_MODULE_1__geom_Matrix3__["a" /* Create */])();
        this.localTransform = Object(__WEBPACK_IMPORTED_MODULE_1__geom_Matrix3__["a" /* Create */])();
    }
    get rotation() {
        return this._rotation;
    }
    set rotation(v) {
        this._rotation = v;
        this._rotationComponents.x = Math.cos(this._rotation);
        this._rotationComponents.y = Math.sin(this._rotation);
    }
    get visible() {
        return this._visible;
    }
    set visible(v) {
        this._visible = v;
    }
    RoundFunction(v) {
        return v;
        // return Math.round(v);
        // return Math.round( v * 10) / 10;
    }
    updateTransform() {
        //TODO Rounding at the moment...
        //position.x = Math.round(position.x);
        //position.y = Math.round(position.y);
        //JS hack, much faster...
        // var positionx:number = untyped{(0.5 + position.x) >> 0;};
        // var positiony:number = untyped{(0.5 + position.y) >> 0;};
        //positionx = cast Math.round( position.x * 10) / 10;
        //positiony = cast Math.round( position.y * 10) / 10;
        // var positionx = position.x;
        // var positiony = position.y;
        var positionx = Math.floor(this.position.x);
        var positiony = Math.floor(this.position.y);
        var sinR = this._rotationComponents.y; //Math.sin(rotation);
        var cosR = this._rotationComponents.x; //Math.cos(rotation);
        this.localTransform[0] = cosR * this.scale.x;
        this.localTransform[1] = -sinR * this.scale.y;
        this.localTransform[3] = sinR * this.scale.x;
        this.localTransform[4] = cosR * this.scale.y;
        var px = this.pivot.x;
        var py = this.pivot.y;
        var parentTransform = this.parent.worldTransform;
        var a00 = this.localTransform[0];
        var a01 = this.localTransform[1];
        var a02 = positionx - this.localTransform[0] * px - py * this.localTransform[1];
        var a10 = this.localTransform[3];
        var a11 = this.localTransform[4];
        var a12 = positiony - this.localTransform[4] * py - px * this.localTransform[3];
        var b00 = parentTransform[0];
        var b01 = parentTransform[1];
        var b02 = parentTransform[2];
        var b10 = parentTransform[3];
        var b11 = parentTransform[4];
        var b12 = parentTransform[5];
        this.localTransform[2] = a02;
        this.localTransform[5] = a12;
        this.worldTransform[0] = b00 * a00 + b01 * a10;
        this.worldTransform[1] = b00 * a01 + b01 * a11;
        this.worldTransform[2] = b00 * a02 + b01 * a12 + b02;
        this.worldTransform[3] = b10 * a00 + b11 * a10;
        this.worldTransform[4] = b10 * a01 + b11 * a11;
        this.worldTransform[5] = b10 * a02 + b11 * a12 + b12;
        this.worldAlpha = this.alpha * this.parent.worldAlpha;
    }
    calcExtents() {
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DisplayObject;



/***/ }),
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = Create;
/* unused harmony export Identity */
/* unused harmony export Multiply */
/* unused harmony export Clone */
/* unused harmony export Transpose */
function Create() {
    return Identity(new Float32Array(9));
}
function Identity(matrix) {
    matrix[0] = 1;
    matrix[1] = 0;
    matrix[2] = 0;
    matrix[3] = 0;
    matrix[4] = 1;
    matrix[5] = 0;
    matrix[6] = 0;
    matrix[7] = 0;
    matrix[8] = 1;
    return matrix;
}
function Multiply(mat, mat2, dest) {
    if (dest != null)
        dest = mat;
    var a00 = mat[0], a01 = mat[1], a02 = mat[2], a10 = mat[3], a11 = mat[4], a12 = mat[5], a20 = mat[6], a21 = mat[7], a22 = mat[8], b00 = mat2[0], b01 = mat2[1], b02 = mat2[2], b10 = mat2[3], b11 = mat2[4], b12 = mat2[5], b20 = mat2[6], b21 = mat2[7], b22 = mat2[8];
    dest[0] = b00 * a00 + b01 * a10 + b02 * a20;
    dest[1] = b00 * a01 + b01 * a11 + b02 * a21;
    dest[2] = b00 * a02 + b01 * a12 + b02 * a22;
    dest[3] = b10 * a00 + b11 * a10 + b12 * a20;
    dest[4] = b10 * a01 + b11 * a11 + b12 * a21;
    dest[5] = b10 * a02 + b11 * a12 + b12 * a22;
    dest[6] = b20 * a00 + b21 * a10 + b22 * a20;
    dest[7] = b20 * a01 + b21 * a11 + b22 * a21;
    dest[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return dest;
}
function Clone(mat) {
    var matrix = new Float32Array(9);
    matrix[0] = mat[0];
    matrix[1] = mat[1];
    matrix[2] = mat[2];
    matrix[3] = mat[3];
    matrix[4] = mat[4];
    matrix[5] = mat[5];
    matrix[6] = mat[6];
    matrix[7] = mat[7];
    matrix[8] = mat[8];
    return matrix;
}
function Transpose(mat, dest) {
    if (dest != null || mat == dest) {
        var a01 = mat[1], a02 = mat[2], a12 = mat[5];
        mat[1] = mat[3];
        mat[2] = mat[6];
        mat[3] = a01;
        mat[5] = mat[7];
        mat[6] = a02;
        mat[7] = a12;
        return mat;
    }
    dest[0] = mat[0];
    dest[1] = mat[3];
    dest[2] = mat[6];
    dest[3] = mat[1];
    dest[4] = mat[4];
    dest[5] = mat[7];
    dest[6] = mat[2];
    dest[7] = mat[5];
    dest[8] = mat[8];
    return dest;
}


/***/ }),
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class RendererEngine {
    constructor(stage, camera, view, width = 800, height = 600, transparent = false, antialias = false) {
        this.stage = stage;
        this.camera = camera;
        this.view = view;
        this.contextLost = false;
        this.contextAttributes = {};
        this.contextAttributes.alpha = transparent;
        this.contextAttributes.antialias = antialias;
        this.contextAttributes.premultipliedAlpha = true;
        this.contextAttributes.stencil = false;
        this.renderers = new Array();
        this.InitalizeWebGlContext();
        this.Resize(width, height);
    }
    InitalizeWebGlContext() {
        this.view.addEventListener("webglcontextlost", this.onContextLost, false);
        this.view.addEventListener("webglcontextrestored", this.onContextRestored, false);
        this.gl = this.view.getContext("webgl", this.contextAttributes);
        this.gl.disable(WebGLRenderingContext.DEPTH_TEST);
        this.gl.disable(WebGLRenderingContext.CULL_FACE);
        this.gl.enable(WebGLRenderingContext.BLEND);
        this.gl.colorMask(true, true, true, this.contextAttributes.alpha);
        this.gl.clearColor(0, 0, 0, 1);
        this.gl.blendFunc(WebGLRenderingContext.SRC_ALPHA, WebGLRenderingContext.ONE_MINUS_SRC_ALPHA);
        if (!this.gl.getExtension("OES_texture_float"))
            console.log("New browser time: Float textures not supported");
    }
    Resize(width, height) {
        this.width = width;
        this.height = height;
        this.view.width = width;
        this.view.height = height;
        this.gl.viewport(0, 0, width, height);
        this.gl.scissor(0, 0, width, height);
    }
    AddRenderer(renderer) {
        renderer.Init(this.gl, this.camera);
        renderer.Resize(this.width, this.height);
        this.renderers.push(renderer);
    }
    Render(clip) {
        if (this.contextLost)
            return;
        // this.stage.updateTransform();
        // stage.PreRender();
        // gl.viewport(0,0,width,height);
        // gl.colorMask(true,true,true,contextAttributes.alpha);
        // gl.bindFramebuffer(RenderingContext.FRAMEBUFFER,null);
        // gl.clearColor(0.2,0.2,0.2,1.0);
        // gl.clear(RenderingContext.COLOR_BUFFER_BIT);
        // this.gl.colorMask(true, true, true, true);
        // gl.clearColor(1.0, 0.0, 0.0, 1.0);
        this.gl.clearColor(159 / 255, 188 / 255, 197 / 255, 1.0);
        this.gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT);
        this.gl.colorMask(true, true, true, false);
        this.gl.blendFunc(WebGLRenderingContext.SRC_ALPHA, WebGLRenderingContext.ONE_MINUS_SRC_ALPHA);
        // this.gl.disable(WebGLRenderingContext.BLEND);
        // this.gl.disable(WebGLRenderingContext.DEPTH_TEST);
        //9FBCC5
        //159 188 197 1
        // this.gl.blendFunc(WebGLRenderingContext.SRC_ALPHA,WebGLRenderingContext.ONE_MINUS_SRC_ALPHA);
        // return;
        // console.log("----");
        this.renderers.forEach(renderer => {
            renderer.Render(clip);
        });
    }
    onContextLost(event) {
        this.contextLost = true;
        console.log("webGL Context Lost");
    }
    onContextRestored(event) {
        this.contextLost = false;
        console.log("webGL Context Restored");
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = RendererEngine;



/***/ }),
/* 87 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BaseTexture__ = __webpack_require__(49);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Texture__ = __webpack_require__(50);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__geom_Rectangle__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__geom_Vector2__ = __webpack_require__(0);




class TextureManager {
    constructor(gl) {
        this.gl = gl;
        this.baseTextures = new Map();
        this.textures = new Map();
    }
    AddTexture(id, image) {
        var baseTexture = __WEBPACK_IMPORTED_MODULE_0__BaseTexture__["a" /* BaseTexture */].FromImage(this.gl, image);
        // baseTexture.RegisterTexture();
        this.baseTextures.set(id, baseTexture);
        return baseTexture;
    }
    ParseTexturePackerJSON(textureConfig, id) {
        if (!(typeof textureConfig === "string")) {
            return;
        }
        var baseTexture = this.baseTextures.get(id);
        var textureData = JSON.parse(textureConfig);
        //var fields = Reflect.fields(textureData.frames);
        Object.keys(textureData.frames).forEach(prop => {
            // for (let prop:any in textureData.frames) {
            var frame = textureData.frames[prop]; // Reflect.field(textureData.frames, prop);
            this.textures.set(prop, new __WEBPACK_IMPORTED_MODULE_1__Texture__["a" /* Texture */](baseTexture, new __WEBPACK_IMPORTED_MODULE_2__geom_Rectangle__["a" /* Rectangle */](frame.frame.x, frame.frame.y, frame.frame.w, frame.frame.h), new __WEBPACK_IMPORTED_MODULE_3__geom_Vector2__["a" /* Vector2 */](frame.pivot.x, frame.pivot.y)));
        });
    }
    ParseTexturesFromTiles(tileSize, id) { }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = TextureManager;



/***/ }),
/* 88 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__FrameList__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Frame__ = __webpack_require__(90);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__animation_Animaton__ = __webpack_require__(91);



class FrameListManager {
    constructor(textureManager) {
        this.textureManager = textureManager;
        this.frameLists = new Map();
    }
    getFrameList(id) {
        return this.frameLists.get(id);
    }
    ParseFrameListJSON(frameListConfig) {
        if (typeof frameListConfig !== "string")
            return;
        var frameListConfigData = JSON.parse(frameListConfig);
        Object.keys(frameListConfigData).forEach(itemName => {
            var frameList = new __WEBPACK_IMPORTED_MODULE_0__FrameList__["a" /* FrameList */]();
            this.frameLists.set(itemName, frameList);
            const framelistItem = frameListConfigData[itemName];
            if (framelistItem.frames != null) {
                framelistItem.frames.forEach(frame => {
                    frameList.addFrame(new __WEBPACK_IMPORTED_MODULE_1__Frame__["a" /* Frame */](frame.id, this.textureManager.textures.get(frame.name), frame.scale));
                });
                if (framelistItem.animations != null) {
                    Object.keys(framelistItem.animations).forEach(animationName => {
                        var animation = framelistItem.animations[animationName];
                        frameList.addAnimation(new __WEBPACK_IMPORTED_MODULE_2__animation_Animaton__["a" /* Animation */](animationName, animation.frames.map(frameIndex => frameList.frames[frameIndex]), animation.fps, animation.looped, animation.flipX, animation.flipY));
                    });
                }
            }
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = FrameListManager;



/***/ }),
/* 89 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class FrameList {
    constructor() {
        this.frames = new Array();
        this.framesHash = new Map();
        this.animationsHash = new Map();
    }
    addFrame(frame) {
        this.frames.push(frame);
        this.framesHash.set(frame.name, frame);
    }
    getFrame(id) {
        return this.framesHash.get(id);
    }
    addAnimation(animation) {
        this.animationsHash.set(animation.name, animation);
    }
    getAnimation(id) {
        return this.animationsHash.get(id);
    }
    get numFrames() {
        return frames.length;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = FrameList;



/***/ }),
/* 90 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Frame {
    constructor(name, texture, scale) {
        this.name = name;
        this.texture = texture;
        this.scale = scale;
    }
    updateSprite(sprite, flipX = 1, flipY = 1) {
        sprite.texture = this.texture;
        sprite.pivot.x = sprite.texture.frame.width * sprite.texture.pivot.x;
        sprite.pivot.y = (sprite.texture.frame.height + 2) * sprite.texture.pivot.y;
        sprite.scale.x = this.scale.x * flipX;
        sprite.scale.y = this.scale.y * flipY;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Frame;



/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Animation {
    constructor(name, frames, frameRate = 0, looped = true, flipX = false, flipY = false) {
        this.name = name;
        this.frameRate = frameRate;
        this.frames = frames;
        this.looped = looped;
        this.flipX = flipX;
        this.flipY = flipY;
        this.msPerFrame = 1000 / this.frameRate;
        this.length = this.frames.length;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Animation;



/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_WebGLShaderUtil__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_ShaderWrapper__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__SpriteBatch__ = __webpack_require__(93);




class SpriteRenderer {
    constructor() {
        this.first = true;
    }
    Init(gl, camera) {
        this.gl = gl;
        this.camera = camera;
        this.projection = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.spriteShader = new __WEBPACK_IMPORTED_MODULE_2__util_ShaderWrapper__["a" /* ShaderWrapper */](gl, __WEBPACK_IMPORTED_MODULE_1__util_WebGLShaderUtil__["a" /* CompileProgram */](gl, SpriteRenderer.SPRITE_VERTEX_SHADER, SpriteRenderer.SPRITE_FRAGMENT_SHADER));
        this.spriteBatch = new __WEBPACK_IMPORTED_MODULE_3__SpriteBatch__["a" /* WebGLBatch */](gl);
        this.spriteBatch.ResizeBatch(1000);
    }
    Resize(width, height) {
        this.projection.x = width / 2;
        this.projection.y = height / 2;
    }
    AddStage(stage) {
        this.stage = stage;
    }
    Render(clip) {
        this.stage.updateTransform();
        this.gl.useProgram(this.spriteShader.program);
        // if (first) {
        this.gl.uniform2f(this.spriteShader.uniform.projectionVector, this.projection.x, this.projection.y);
        this.gl.enableVertexAttribArray(this.spriteShader.attribute.aVertexPosition);
        this.gl.enableVertexAttribArray(this.spriteShader.attribute.aTextureCoord);
        this.gl.enableVertexAttribArray(this.spriteShader.attribute.aColor);
        //     first=false;
        // }
        this.gl.vertexAttribPointer(this.spriteShader.attribute.aVertexPosition, 2, WebGLRenderingContext.FLOAT, false, 20, 0);
        this.gl.vertexAttribPointer(this.spriteShader.attribute.aTextureCoord, 2, WebGLRenderingContext.FLOAT, false, 20, 8);
        this.gl.vertexAttribPointer(this.spriteShader.attribute.aColor, 1, WebGLRenderingContext.FLOAT, false, 20, 16);
        this.spriteBatch.Render(this.spriteShader, this.stage, this.camera.viewPortAABB);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SpriteRenderer;

SpriteRenderer.SPRITE_VERTEX_SHADER = `
        precision mediump float;
        attribute vec2 aVertexPosition;
        attribute vec2 aTextureCoord;
        attribute float aColor;
        uniform vec2 projectionVector;
        varying vec2 vTextureCoord;
        varying float vColor;
        void main(void) {
            gl_Position = vec4( aVertexPosition.x / projectionVector.x -1.0, aVertexPosition.y / -projectionVector.y + 1.0 , 0.0, 1.0);
            vTextureCoord = aTextureCoord;
            vColor = aColor;
        }`;
SpriteRenderer.SPRITE_FRAGMENT_SHADER = `
        precision mediump float;
        varying vec2 vTextureCoord;
        varying float vColor;
        uniform sampler2D uSampler;
        void main(void) {
            gl_FragColor = texture2D(uSampler,vTextureCoord) * vColor;
        }`;


/***/ }),
/* 93 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class WebGLBatch {
    constructor(gl) {
        this.gl = gl;
        this.size = 1;
        this.indexBuffer = gl.createBuffer();
        this.dataBuffer = gl.createBuffer();
        this.blendMode = 0;
        this.dynamicSize = 1;
    }
    Clean() { }
    ResizeBatch(size) {
        this.size = size;
        this.dynamicSize = size;
        this.data = new Float32Array(this.dynamicSize * 20);
        this.gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER, this.dataBuffer);
        this.gl.bufferData(WebGLRenderingContext.ARRAY_BUFFER, this.data, WebGLRenderingContext.DYNAMIC_DRAW);
        this.indices = new Uint16Array(this.dynamicSize * 6);
        for (let i = 0; i < this.dynamicSize; i++) {
            const index2 = i * 6;
            const index3 = i * 4;
            this.indices[index2 + 0] = index3 + 0;
            this.indices[index2 + 1] = index3 + 1;
            this.indices[index2 + 2] = index3 + 2;
            this.indices[index2 + 3] = index3 + 0;
            this.indices[index2 + 4] = index3 + 2;
            this.indices[index2 + 5] = index3 + 3;
        }
        this.gl.bindBuffer(WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
        this.gl.bufferData(WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, this.indices, WebGLRenderingContext.STATIC_DRAW);
    }
    Flush(shader, texture, size) {
        this.gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER, this.dataBuffer);
        // this.gl.bufferData(WebGLRenderingContext.ARRAY_BUFFER,data,WebGLRenderingContext.STATIC_DRAW);
        this.gl.bufferSubData(WebGLRenderingContext.ARRAY_BUFFER, 0, this.data);
        this.gl.vertexAttribPointer(shader.attribute.aVertexPosition, 2, WebGLRenderingContext.FLOAT, false, 20, 0);
        this.gl.vertexAttribPointer(shader.attribute.aTextureCoord, 2, WebGLRenderingContext.FLOAT, false, 20, 8);
        this.gl.vertexAttribPointer(shader.attribute.aColor, 1, WebGLRenderingContext.FLOAT, false, 20, 16);
        this.gl.activeTexture(WebGLRenderingContext.TEXTURE0);
        this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, texture);
        this.gl.drawElements(WebGLRenderingContext.TRIANGLES, size * 6, WebGLRenderingContext.UNSIGNED_SHORT, 0);
    }
    AddSpriteToBatch(sprite, indexRun) {
        const index = indexRun * 20;
        const frame = sprite.texture.frame;
        const tw = sprite.texture.baseTexture.width;
        const th = sprite.texture.baseTexture.height;
        const uvs = sprite.texture.uvs;
        //0
        //Verts
        this.data[index + 0] = sprite.transformedVerts[0];
        this.data[index + 1] = sprite.transformedVerts[1];
        //UV
        this.data[index + 2] = uvs[0]; //frame.x / tw;
        this.data[index + 3] = uvs[1]; //frame.y / th;
        //Colour
        this.data[index + 4] = sprite.worldAlpha;
        //1
        //Verts
        this.data[index + 5] = sprite.transformedVerts[2];
        this.data[index + 6] = sprite.transformedVerts[3];
        //UV
        this.data[index + 7] = uvs[2]; //(frame.x + frame.width) / tw;
        this.data[index + 8] = uvs[3]; //frame.y / th;
        //Colour
        this.data[index + 9] = sprite.worldAlpha;
        //2
        //Verts
        this.data[index + 10] = sprite.transformedVerts[4];
        this.data[index + 11] = sprite.transformedVerts[5];
        //UV
        this.data[index + 12] = uvs[4]; //(frame.x + frame.width) / tw;
        this.data[index + 13] = uvs[5]; //(frame.y + frame.height) / th;
        //Colour
        this.data[index + 14] = sprite.worldAlpha;
        //3
        //Verts
        this.data[index + 15] = sprite.transformedVerts[6];
        this.data[index + 16] = sprite.transformedVerts[7];
        //UV
        this.data[index + 17] = uvs[6]; //frame.x / tw;
        this.data[index + 18] = uvs[7]; //(frame.y + frame.height) / th;
        //Colour
        this.data[index + 19] = sprite.worldAlpha;
    }
    Render(shader, stage, clip) {
        // this.gl.useProgram(shader.program);
        var node;
        var stack;
        var top;
        node = stage;
        stack = new Array();
        stack[0] = node;
        top = 1;
        var indexRun = 0;
        var currentTexture = null;
        while (top > 0) {
            var thisNode = stack[--top];
            //If there is an adjacent node, push it to the stack
            if (thisNode.next != null)
                stack[top++] = thisNode.next; //Big assumption is only DisplayListContainers, which it is for now.
            //If there is a child list, push the head (this will get processed first)
            if (thisNode.head != null)
                stack[top++] = thisNode.head; //Same assumption.
            //return the result
            if (thisNode.visible && thisNode.renderable) {
                var sprite = thisNode;
                if (sprite.texture.baseTexture.texture != currentTexture || indexRun == this.size) {
                    this.Flush(shader, currentTexture, indexRun);
                    indexRun = 0;
                    currentTexture = sprite.texture.baseTexture.texture;
                }
                if (clip == null || sprite.aabb.intersect(clip)) {
                    this.AddSpriteToBatch(sprite, indexRun);
                    indexRun++;
                }
            }
        }
        if (indexRun > 0)
            this.Flush(shader, currentTexture, indexRun);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = WebGLBatch;



/***/ }),
/* 94 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["e"] = TMXdecodeLayer;
/* harmony export (immutable) */ __webpack_exports__["a"] = GetLayer;
/* harmony export (immutable) */ __webpack_exports__["b"] = GetTileSet;
/* harmony export (immutable) */ __webpack_exports__["d"] = LayerToCoordTexture;
/* harmony export (immutable) */ __webpack_exports__["c"] = LayerToCollisionData;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ds_TypedArray2D__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ds_Bytes2D__ = __webpack_require__(95);


const decodeBase64 = function (input) {
    return window.atob(input.replace(/[^A-Za-z0-9\+\/\=]/g, ""));
};
const encode = function (input) {
    // make sure our input string has the right format
    return window.btoa(input.replace(/\r\n/g, "\n"));
};
const decodeBase64AsArray = function (input, bytes = 4) {
    var dec = decodeBase64(input), i, j, len;
    var ar = new Uint32Array(dec.length / bytes);
    for (i = 0, len = dec.length / bytes; i < len; i++) {
        ar[i] = 0;
        for (j = bytes - 1; j >= 0; --j) {
            ar[i] += dec.charCodeAt(i * bytes + j) << (j << 3);
        }
    }
    return ar;
};
function TMXdecodeLayer(layer) {
    const d = decodeBase64AsArray(layer.data);
    return new __WEBPACK_IMPORTED_MODULE_1__ds_Bytes2D__["a" /* Bytes2D */](layer.width, layer.height, 16, 4, d.buffer);
}
function GetLayer(map, name) {
    const layer = map.layers.filter(layer => layer.name === name);
    return layer.length === 1 ? layer[0] : null;
}
function GetTileSet(map, name) {
    const tileSet = map.tilesets.filter(tileSet => tileSet.name === name);
    return tileSet.length === 1 ? tileSet[0] : null;
}
function LayerToCoordTexture(layer) {
    //Assumes all tiles are from same set...function
    var tileSet = null;
    var textureData = new __WEBPACK_IMPORTED_MODULE_0__ds_TypedArray2D__["a" /* TypedArray2D */](layer.width, layer.height);
    for (var xp = 0; xp < layer.width; xp++) {
        for (var yp = 0; yp < layer.height; yp++) {
            var source = (layer.get(xp, yp, 3) << 24) |
                (layer.get(xp, yp, 2) << 16) |
                (layer.get(xp, yp, 1) << 8) |
                layer.get(xp, yp, 0);
            if (source > 0) {
                var superSet = Math.floor(source / 1024);
                var superY = Math.floor(superSet / 8);
                var superX = superSet % 8;
                var relativeID = source - superSet * 1024;
                relativeID--; //Not sure why ATM
                var y = Math.floor(relativeID / 32);
                var x = relativeID - 32 * y;
                var v = (superY << 24) | (superX << 16) | (y << 8) | x;
                textureData.set(xp, yp, v);
            }
            else {
                textureData.set(xp, yp, 0xffffffff);
            }
        }
    }
    return textureData;
}
function LayerToCollisionData(layer, guidOffset, tileSize) {
    //Assumes all tiles are from same set...function
    var collisionData = new __WEBPACK_IMPORTED_MODULE_1__ds_Bytes2D__["a" /* Bytes2D */](layer.width, layer.height, tileSize, 1);
    for (var xp = 0; xp < layer.width; xp++) {
        for (var yp = 0; yp < layer.height; yp++) {
            var source = layer.get(xp, yp, 0);
            if (source > 0) {
                var relativeID = source - guidOffset; //tileSet.firstGID;
                collisionData.set(xp, yp, 0, 1 << relativeID); //Implicit +1
            }
            else {
                collisionData.set(xp, yp, 0, 0);
            }
        }
    }
    for (var y = 0; y < 30; y++) {
        let row = "";
        for (var x = 0; x < 30; x++) {
            row += collisionData.get(x, y, 0) ? "X" : "0";
        }
    }
    return collisionData;
}


/***/ }),
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Bytes2D {
    constructor(width, height, cellSize, bytesPerCell, data) {
        this.initalize(width, height, cellSize, bytesPerCell, data);
    }
    initalize(width, height, cellSize, bytesPerCell, data) {
        this.width = width;
        this.height = height;
        this.numberernalWidth = width * bytesPerCell;
        this.cellSize = cellSize;
        this.invCellSize = 1 / cellSize;
        this.bytesPerCell = bytesPerCell;
        if (data == null)
            this.data = new ArrayBuffer(width * height * bytesPerCell);
        else
            this.data = data;
        this.data8 = new Uint8Array(this.data);
    }
    get(x, y, offset) {
        return this.data8[y * this.numberernalWidth + x * this.bytesPerCell + offset];
    }
    set(x, y, offset, value) {
        this.data8[y * this.numberernalWidth + x * this.bytesPerCell + offset] = value;
    }
    getReal(x, y, offset) {
        return this.get(this.Index(x), this.Index(y), offset);
    }
    Index(value) {
        return (value * this.invCellSize) | 0;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Bytes2D;



/***/ }),
/* 96 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__TileLayer__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__TileLayerRenderProxy__ = __webpack_require__(98);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_ShaderWrapper__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ds_TypedArray2D__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_WebGLShaderUtil__ = __webpack_require__(32);






class TileMapRenderer {
    constructor(tileSize, tileScale) {
        this.tileSize = tileSize;
        this.tileScale = tileScale;
        this.layers = new Array();
        this.layersMap = new Map();
        this.renderLayers = new Array();
        this.renderLayersMap = new Map();
    }
    Init(gl, camera) {
        if (this.gl != null)
            return;
        this.gl = gl;
        this.camera = camera;
        //tileScale = 1.0;
        this.filtered = false;
        this.spriteSheet = this.gl.createTexture();
        this.viewportSize = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.scaledViewportSize = new Float32Array(2);
        this.inverseTileTextureSize = new Float32Array(2);
        this.inverseSpriteTextureSize = new Float32Array(2);
        this.quadVertBuffer = this.gl.createBuffer();
        this.gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER, this.quadVertBuffer);
        var quadVerts = new Float32Array([
            -1,
            -1,
            0,
            1,
            1,
            -1,
            1,
            1,
            1,
            1,
            1,
            0,
            -1,
            -1,
            0,
            1,
            1,
            1,
            1,
            0,
            -1,
            1,
            0,
            0,
        ]);
        gl.bufferData(WebGLRenderingContext.ARRAY_BUFFER, quadVerts, WebGLRenderingContext.STATIC_DRAW);
        this.tilemapShader = new __WEBPACK_IMPORTED_MODULE_3__util_ShaderWrapper__["a" /* ShaderWrapper */](gl, __WEBPACK_IMPORTED_MODULE_5__util_WebGLShaderUtil__["a" /* CompileProgram */](gl, TileMapRenderer.TILEMAP_VERTEX_SHADER, TileMapRenderer.TILEMAP_FRAGMENT_SHADER));
        this.flip = false;
        this.writebuffer2 = new __WEBPACK_IMPORTED_MODULE_4__ds_TypedArray2D__["a" /* TypedArray2D */](3, 3); //Max 3x3 tileset changes
        this.renderLayers.forEach(renderLayer => renderLayer.Init(gl, camera));
    }
    Resize(width, height) {
        var expandedWidth = (Math.floor(width / (this.tileSize * this.tileScale)) + 2) * this.tileSize;
        var expandedHeight = (Math.floor(height / (this.tileSize * this.tileScale)) + 2) * this.tileSize;
        this.viewportSize.x = expandedWidth * this.tileScale;
        this.viewportSize.y = expandedHeight * this.tileScale;
        this.scaledViewportSize[0] = this.viewportSize.x / this.tileScale;
        this.scaledViewportSize[1] = this.viewportSize.y / this.tileScale;
        this.renderLayers.forEach(renderLayer => renderLayer.Resize(Math.floor(expandedWidth), Math.floor(expandedHeight)));
    }
    // public  TileScale(scale:Float) {
    //     this.tileScale = scale;
    //     scaledViewportSize[0] = viewportSize.x/scale;
    //     scaledViewportSize[1] = viewportSize.y/scale;
    // }
    SetSpriteSheet(image) {
        this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, this.spriteSheet);
        this.gl.pixelStorei(WebGLRenderingContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);
        // gl.texParameteri(WebGLRenderingContext.TEXTURE_2D,WebGLRenderingContext.TEXTURE_MAG_FILTER,WebGLRenderingContext.NEAREST);
        // gl.texParameteri(WebGLRenderingContext.TEXTURE_2D,WebGLRenderingContext.TEXTURE_MIN_FILTER,WebGLRenderingContext.NEAREST);
        this.gl.texImage2D(WebGLRenderingContext.TEXTURE_2D, 0, WebGLRenderingContext.RGBA, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE, image);
        if (!this.filtered) {
            this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MAG_FILTER, WebGLRenderingContext.NEAREST);
            this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MIN_FILTER, WebGLRenderingContext.NEAREST);
        }
        else {
            this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MAG_FILTER, WebGLRenderingContext.LINEAR);
            this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MIN_FILTER, WebGLRenderingContext.LINEAR); // Worth it to mipmap here?
        }
        this.inverseSpriteTextureSize[0] = 1 / image.width;
        this.inverseSpriteTextureSize[1] = 1 / image.height;
    }
    SetTileLayer(image, layerId, scrollScaleX, scrollScaleY) {
        var layer = new __WEBPACK_IMPORTED_MODULE_1__TileLayer__["a" /* TileLayer */]();
        layer.setTexture(this.gl, image, false);
        layer.scrollScale.x = scrollScaleX;
        layer.scrollScale.y = scrollScaleY;
        this.layers.push(layer);
    }
    SetTileLayerFromData(data, sprite, layerId, scrollScaleX, scrollScaleY) {
        var layer = new __WEBPACK_IMPORTED_MODULE_1__TileLayer__["a" /* TileLayer */]();
        layer.setTextureFromMap(this.gl, data);
        layer.setSpriteTexture(sprite);
        layer.scrollScale.x = scrollScaleX;
        layer.scrollScale.y = scrollScaleY;
        this.layers.push(layer);
        this.layersMap.set(layerId, layer);
    }
    SetTileRenderLayer(id, layers) {
        var tileRenderLayer = new __WEBPACK_IMPORTED_MODULE_2__TileLayerRenderProxy__["a" /* TileLayerRenderProxy */](this, layers);
        this.renderLayers.push(tileRenderLayer);
        this.renderLayersMap.set(id, tileRenderLayer);
    }
    updateMap(x, y, data) {
        var startX = data[0];
        var startY = data[1];
        var width = data[2];
        var height = data[3];
        var centerX = data[4];
        var centerY = data[5];
        var superY = Math.floor(data[6] / 8);
        var superX = data[6] % 8;
        this.writebuffer2.h = height;
        this.writebuffer2.w = width;
        for (var ypos = 0; ypos < height; ypos++) {
            // for (ypos in 0...height) {
            // for (xpos in 0...width) {
            for (var xpos = 0; xpos < width; xpos++) {
                var _x = startX + xpos;
                var _y = startY + ypos;
                var value = (superY << 24) | (superX << 16) | (_y << 8) | _x;
                this.writebuffer2.set(xpos, ypos, value);
            }
        }
        var writeLayer = this.layers[2].tileDataTexture;
        this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, writeLayer);
        this.gl.texSubImage2D(WebGLRenderingContext.TEXTURE_2D, 0, x - centerX, y - centerY, width, height, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE, this.writebuffer2.data8);
    }
    Render(clip) {
        this.renderLayers.forEach(renderLayer => renderLayer.Render(clip));
    }
    RenderLayers(renderLayer) {
        this.gl.clearColor(0.0, 0.0, 0.0, 0.0);
        this.gl.colorMask(true, true, true, true);
        this.gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT);
        this.gl.useProgram(this.tilemapShader.program);
        this.gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER, this.quadVertBuffer);
        this.gl.enableVertexAttribArray(this.tilemapShader.attribute.position);
        this.gl.enableVertexAttribArray(this.tilemapShader.attribute.texture);
        this.gl.vertexAttribPointer(this.tilemapShader.attribute.position, 2, WebGLRenderingContext.FLOAT, false, 16, 0);
        this.gl.vertexAttribPointer(this.tilemapShader.attribute.texture, 2, WebGLRenderingContext.FLOAT, false, 16, 8);
        this.gl.uniform2fv(this.tilemapShader.uniform.viewportSize, this.scaledViewportSize);
        this.gl.uniform1f(this.tilemapShader.uniform.tileSize, this.tileSize);
        this.gl.uniform1f(this.tilemapShader.uniform.inverseTileSize, 1 / this.tileSize);
        this.gl.uniform1i(this.tilemapShader.uniform.sprites, 0);
        this.gl.uniform1i(this.tilemapShader.uniform.tiles, 1);
        // for (i in renderLayer.layers) {
        for (var i = 0; i < renderLayer.layers.length; i++) {
            // var layer = this.layers[i];
            const layer = this.layersMap.get(renderLayer.layers[i]);
            const pX = renderLayer.thisSnap.x / 2;
            const pY = renderLayer.thisSnap.y / 2;
            this.gl.uniform2f(this.tilemapShader.uniform.viewOffset, pX, pY);
            this.gl.uniform2fv(this.tilemapShader.uniform.inverseSpriteTextureSize, layer.inverseSpriteTextureSize);
            this.gl.uniform2fv(this.tilemapShader.uniform.inverseTileTextureSize, layer.inverseTileDataTextureSize);
            this.gl.activeTexture(WebGLRenderingContext.TEXTURE0);
            this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, layer.spriteTexture);
            this.gl.activeTexture(WebGLRenderingContext.TEXTURE1);
            this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, layer.tileDataTexture);
            this.gl.drawArrays(WebGLRenderingContext.TRIANGLES, 0, 6);
        }
        this.gl.colorMask(true, true, true, false);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = TileMapRenderer;

/*

256*8=2048

8x8 supertiles = 64 supertiles

of

16*16 8*8 pixel tiles = 256 tiles

total = 64 * 256 = 16k tiles

p.y = index % 8;
p.x = Math.floor(index / 8);

*/
TileMapRenderer.TILEMAP_VERTEX_SHADER = `
        precision mediump float;
        attribute vec2 position;
        attribute vec2 texture;

        varying vec2 pixelCoord;
        varying vec2 texCoord;

        uniform vec2 viewOffset;
        uniform vec2 viewportSize;
        uniform vec2 inverseTileTextureSize;
        uniform float inverseTileSize;

        void main(void) {
           pixelCoord = (texture * viewportSize) + viewOffset;
           texCoord = pixelCoord * inverseTileTextureSize * inverseTileSize;
           gl_Position = vec4(position, 0.0, 1.0);
        }`;
TileMapRenderer.TILEMAP_FRAGMENT_SHADER = `
        precision mediump float;

        varying vec2 pixelCoord;
        varying vec2 texCoord;

        uniform sampler2D tiles;
        uniform sampler2D sprites;

        uniform vec2 inverseTileTextureSize;
        uniform vec2 inverseSpriteTextureSize;
        uniform float tileSize;

        void main(void) {
           vec4 tile = texture2D(tiles, texCoord);
            // if(tile.x == 1.0 && tile.y == 1.0) { discard; }
            if (tile.x == 1.0 && tile.y == 1.0) { 
                discard;
                // gl_FragColor = vec4(0.0,0.0,0.0,0.0);
            } else {
                vec2 superSpriteOffset = floor(tile.zw * 256.0) * 256.0;
                vec2 spriteOffset = floor(tile.xy * 256.0) * tileSize;
                vec2 spriteCoord = mod(pixelCoord, tileSize);

                //Works
                //    spriteCoord.x = (-1.0+(2.0* 0.0)) * (( 0.0*tileSize) - spriteCoord.x); //normal  0
                //    spriteCoord.x = (-1.0+(2.0* 1.0)) * (( 1.0*tileSize) - spriteCoord.x); //flip   1

                gl_FragColor = texture2D(sprites, (superSpriteOffset + spriteOffset + spriteCoord) * inverseSpriteTextureSize);
            }
        }`;


/***/ }),
/* 97 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__ = __webpack_require__(0);

class TileLayer {
    constructor() {
        this.scrollScale = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */](1, 1);
        this.inverseTileDataTextureSize = new Float32Array(2);
        this.inverseSpriteTextureSize = new Float32Array(2);
    }
    setSpriteTexture(spriteTexture) {
        this.spriteTexture = spriteTexture.texture;
        this.inverseSpriteTextureSize[0] = 1 / spriteTexture.width;
        this.inverseSpriteTextureSize[1] = 1 / spriteTexture.height;
    }
    setTextureFromMap(gl, data) {
        if (this.tileDataTexture == null)
            this.tileDataTexture = gl.createTexture();
        gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, this.tileDataTexture);
        gl.texImage2D(WebGLRenderingContext.TEXTURE_2D, 0, WebGLRenderingContext.RGBA, data.w, data.h, 0, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE, data.data8);
        gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MAG_FILTER, WebGLRenderingContext.NEAREST);
        gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MIN_FILTER, WebGLRenderingContext.NEAREST);
        gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_S, WebGLRenderingContext.CLAMP_TO_EDGE);
        gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_T, WebGLRenderingContext.CLAMP_TO_EDGE);
        this.inverseTileDataTextureSize[0] = 1 / data.w;
        this.inverseTileDataTextureSize[1] = 1 / data.h;
    }
    setTexture(gl, image, repeat) {
        if (this.tileDataTexture == null)
            this.tileDataTexture = gl.createTexture();
        gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, this.tileDataTexture);
        gl.texImage2D(WebGLRenderingContext.TEXTURE_2D, 0, WebGLRenderingContext.RGBA, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE, image);
        gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MAG_FILTER, WebGLRenderingContext.NEAREST);
        gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MIN_FILTER, WebGLRenderingContext.NEAREST);
        if (repeat) {
            gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_S, WebGLRenderingContext.REPEAT);
            gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_T, WebGLRenderingContext.REPEAT);
        }
        else {
            gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_S, WebGLRenderingContext.CLAMP_TO_EDGE);
            gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_T, WebGLRenderingContext.CLAMP_TO_EDGE);
        }
        this.inverseTileDataTextureSize[0] = 1 / image.width;
        this.inverseTileDataTextureSize[1] = 1 / image.height;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = TileLayer;



/***/ }),
/* 98 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__texture_BaseTexture__ = __webpack_require__(49);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__texture_Texture__ = __webpack_require__(50);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__displaylist_Sprite__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__geom_Rectangle__ = __webpack_require__(31);





//TODO: Get rid of this class eventually
//Its only to be able to split the tilemap renderer in the short term
class TileLayerRenderProxy {
    constructor(tileMap, layers) {
        this.tileMap = tileMap;
        this.layers = layers;
        this.lastSnap = new __WEBPACK_IMPORTED_MODULE_3__geom_Vector2__["a" /* Vector2 */](0, 0);
        this.thisSnap = new __WEBPACK_IMPORTED_MODULE_3__geom_Vector2__["a" /* Vector2 */](-1000, -1000);
        this.snapChanged = false;
        this.size = new __WEBPACK_IMPORTED_MODULE_3__geom_Vector2__["a" /* Vector2 */]();
        this.renderSurface = this.renderSurface.bind(this);
    }
    Init(gl, camera) {
        this.sprite = new __WEBPACK_IMPORTED_MODULE_2__displaylist_Sprite__["a" /* Sprite */]();
        this.sprite.id = "renderTexture";
    }
    Resize(width, height) {
        this.size.setTo(width, height);
        this.surface = new __WEBPACK_IMPORTED_MODULE_0__texture_BaseTexture__["a" /* BaseTexture */](this.tileMap.gl, width, height);
        this.texture = new __WEBPACK_IMPORTED_MODULE_1__texture_Texture__["a" /* Texture */](this.surface, new __WEBPACK_IMPORTED_MODULE_4__geom_Rectangle__["a" /* Rectangle */](0, 0, width, height), new __WEBPACK_IMPORTED_MODULE_3__geom_Vector2__["a" /* Vector2 */](0, 0));
        this.sprite.texture = this.texture;
        this.sprite.scale.setTo(2, -2);
        this.sprite.pivot.setTo(width / 2, height / 2);
    }
    calcSnap(cameraPos) {
        this.lastSnap.copy(this.thisSnap);
        this.thisSnap.x = (Math.floor(cameraPos.x / -16) - 1) * 16;
        this.thisSnap.y = (Math.floor(cameraPos.y / -16) - 1) * 16;
        this.snapChanged = this.lastSnap.x != this.thisSnap.x || this.lastSnap.y != this.thisSnap.y;
        return this.snapChanged;
    }
    Render(clip) {
        // if (calcSnap(tileMap.camera.position)) {
        this.calcSnap(this.tileMap.camera.position);
        this.sprite.position.copy(this.size);
        this.sprite.position.plusEquals(this.thisSnap);
        // sprite.position.setTo(416+thisSnap.x,336+thisSnap.y);
        this.surface.drawTo(this.renderSurface);
        // }
    }
    renderSurface() {
        this.tileMap.RenderLayers(this);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = TileLayerRenderProxy;



/***/ }),
/* 99 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_components_Position__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_Graphics__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_GraphicsAnimation__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__animation_AnimationController__ = __webpack_require__(100);





class AnimationSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor(frameListManager) {
        super([__WEBPACK_IMPORTED_MODULE_1__core_components_Position__["a" /* Position */], __WEBPACK_IMPORTED_MODULE_2__components_Graphics__["a" /* Graphics */], __WEBPACK_IMPORTED_MODULE_3__components_GraphicsAnimation__["a" /* GraphicsAnimation */]]);
        this.frameListManager = frameListManager;
    }
    onEntityAdded(entity, position, graphics, graphicsAnimation) {
        const newAnimation = this.frameListManager
            .getFrameList(graphicsAnimation.frameListId)
            .getAnimation(graphicsAnimation.animationId);
        graphicsAnimation.dirty = false;
        graphicsAnimation.animationController = new __WEBPACK_IMPORTED_MODULE_4__animation_AnimationController__["a" /* AnimationController */](newAnimation);
    }
    updateEntity(entity, position, graphics, graphicsAnimation) {
        if (graphicsAnimation.dirty)
            this.playAnimation(graphicsAnimation);
        graphicsAnimation.animationController
            .update(this.dt)
            .updateSprite(graphics.sprite, position.direction.x, position.direction.y);
    }
    playAnimation(graphicsAnimation) {
        graphicsAnimation.dirty = false;
        const animation = this.frameListManager
            .getFrameList(graphicsAnimation.frameListId)
            .getAnimation(graphicsAnimation.animationId);
        graphicsAnimation.animationController.play(animation);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = AnimationSystem;



/***/ }),
/* 100 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class AnimationController {
    constructor(animation) {
        this.play(animation);
    }
    update(dt) {
        this.accumulatedTime += dt;
        if (this.accumulatedTime > this.animation.msPerFrame) {
            this.frameIndex = ++this.frameIndex % this.animation.length;
            this.accumulatedTime = 0;
        }
        return this.animation.frames[this.frameIndex];
    }
    play(animation) {
        this.animation = animation;
        this.frameIndex = 0;
        this.accumulatedTime = 0;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = AnimationController;



/***/ }),
/* 101 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geom_Segment__ = __webpack_require__(102);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Contact__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Intersect__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__geom_Plane__ = __webpack_require__(103);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__geom_AABB__ = __webpack_require__(22);






const SOLID = 0x1 << 0;
const ONE_WAY = 0x1 << 1;
const STEP = 0x1 << 2;
const AABBCOLLIDABLE = SOLID | ONE_WAY | STEP;
const ONE_WAY_TOLLERANCE = -4.0;
const CORRECTION = 0.0;
const ROUNDDOWN = 0.01;
const ROUNDUP = 0.5;
class TileMapCollision {
    // public  debug:Int->Int->Void;
    constructor(data) {
        this.tilePosition = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.tileExtents = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.halftilePosition = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.halftileExtents = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.bias = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */](1, 1);
        this.step = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */](0, -1);
        this.plane = new __WEBPACK_IMPORTED_MODULE_4__geom_Plane__["a" /* Plane */]();
        this.segment = new __WEBPACK_IMPORTED_MODULE_1__geom_Segment__["a" /* Segment */]();
        this.data = data;
        this.tileSize = data.cellSize;
        this.tileHalfSize = this.tileSize / 2;
        this.tileExtents.setTo(this.tileHalfSize, this.tileHalfSize);
        this.halftileExtents.setTo(this.tileHalfSize / 4, this.tileHalfSize / 4);
        this.contact = new __WEBPACK_IMPORTED_MODULE_2__Contact__["a" /* Contact */]();
        this.closestContact = new __WEBPACK_IMPORTED_MODULE_2__Contact__["a" /* Contact */]();
    }
    //TODO
    //Can be improved
    testCollision(proxy) {
        var body = proxy.body;
        var startX = this.data.Index(Math.min(body.position.x, body.predictedPosition.x) - proxy.aabb.extents.x - CORRECTION);
        var startY = this.data.Index(Math.min(body.position.y, body.predictedPosition.y) - proxy.aabb.extents.y - CORRECTION);
        var endX = this.data.Index(Math.max(body.position.x, body.predictedPosition.x) + proxy.aabb.extents.x + CORRECTION - ROUNDDOWN) + 1;
        var endY = this.data.Index(Math.max(body.position.y, body.predictedPosition.y) + proxy.aabb.extents.y + CORRECTION) +
            1;
        var c = 0;
        if (body.isBullet) {
            this.plane.setFromSegment(body.predictedPosition, body.position);
            this.closestContact.time = Number.POSITIVE_INFINITY;
            for (var y = startY; y < endY; y++) {
                for (var x = startX; x < endX; x++) {
                    var cell = this.data.get(x, y, 0);
                    //Bullets dont collide with 1 ways at all
                    if ((cell & SOLID) == 1 && (cell & ONE_WAY) == 0) {
                        this.tilePosition.x = x * this.tileSize + this.tileHalfSize;
                        this.tilePosition.y = y * this.tileSize + this.tileHalfSize;
                        //yuk fix this,
                        c++;
                        if (Math.abs(this.plane.distancePoint(this.tilePosition)) < 40) {
                            if (Object(__WEBPACK_IMPORTED_MODULE_3__Intersect__["f" /* StaticAABBvsSweeptAABB */])(this.tilePosition, this.tileExtents, body.position, proxy.aabb.extents, body.delta, this.contact) == true) {
                                if (body.respondBulletCollision(this.contact)) {
                                    this.closestContact.setTo(this.contact);
                                }
                            }
                        }
                    }
                }
            }
            if (this.closestContact.time < Number.POSITIVE_INFINITY) {
                proxy.collide(null, this.contact);
            }
        }
        else {
            // plane.setFromSegment(body.predictedPosition,body.position);
            for (var y = startY; y < endY; y++) {
                for (var x = startX; x < endX; x++) {
                    var cell = this.data.get(x, y, 0);
                    if ((cell & AABBCOLLIDABLE) > 0) {
                        this.tilePosition.x = x * this.tileSize + this.tileHalfSize;
                        this.tilePosition.y = y * this.tileSize + this.tileHalfSize;
                        if ((cell & STEP) == STEP && body.usesStairs) {
                            this.segment.set(body.position, body.predictedPosition);
                            // js.Lib.debug();
                            //-4,+4
                            //+4,-4
                            //step 8
                            var stairstep = 2;
                            // var stairSize = 4;
                            // var startStair = -6;
                            for (var stair = 0; stair < 8; stair++) {
                                var p = 8 - stair * stairstep;
                                this.halftilePosition.copy(this.tilePosition);
                                this.halftilePosition.x += p * -1;
                                this.halftilePosition.y += p;
                                if (Object(__WEBPACK_IMPORTED_MODULE_3__Intersect__["d" /* IsSegVsAABB */])(this.segment, this.halftilePosition, this.halftileExtents, proxy.aabb.extents.x, proxy.aabb.extents.y)) {
                                    Object(__WEBPACK_IMPORTED_MODULE_3__Intersect__["b" /* AABBvsStaticSolidAABBFixedNormal */])(body.position, proxy.aabb.extents, this.halftilePosition, this.halftileExtents, this.step, this.contact);
                                    body.respondStaticCollision(this.contact);
                                    proxy.collide(null, this.contact);
                                }
                            }
                            // Intersect.AABBvsStaticSolidAABBSlope(body.position,proxy.aabb.extents,tilePosition,tileExtents,bias,contact);
                        }
                        else {
                            Object(__WEBPACK_IMPORTED_MODULE_3__Intersect__["a" /* AABBvsStaticSolidAABB */])(body.position, proxy.aabb.extents, this.tilePosition, this.tileExtents, this.bias, this.contact);
                            // }
                            //if (Intersect.AABBvsStaticSolidAABB(body.position,proxy.aabb.extents,tilePosition,tileExtents,bias,contact)==true) {
                            //Check for 1 way platform?
                            if ((cell & ONE_WAY) == ONE_WAY) {
                                if (body.collideOneWay &&
                                    this.contact.normal.y < 0 &&
                                    this.contact.distance >= ONE_WAY_TOLLERANCE) {
                                    body.respondStaticCollision(this.contact);
                                    proxy.collide(null, this.contact);
                                }
                                // if ( contact.normal.x!=0 && contact.distance<16) {
                                //     contact.normal.setTo(0,-1);
                                // }
                                // body.respondStaticCollision(contact);
                            }
                            else {
                                var nextX = x + this.contact.normal.x;
                                var nextY = y + this.contact.normal.y;
                                var nextCell = this.data.get(nextX, nextY, 0);
                                if ((nextCell & AABBCOLLIDABLE) == 0) {
                                    body.respondStaticCollision(this.contact);
                                    proxy.collide(null, this.contact);
                                }
                            }
                        }
                        // if (cell&ONE_WAY==0 || ( contact.normal.y<0&&contact.distance>=-4 ) )
                        // {
                        // var nextX:Int = x + Std.int(contact.normal.x);
                        // var nextY:Int = y + Std.int(contact.normal.y);
                        // var nextCell = data.get(nextX,nextY,0);
                        // if (nextCell&AABBCOLLIDABLE==0) {
                        //     body.respondStaticCollision(contact);
                        //     proxy.collide(null,contact);
                        // }
                        // }
                        //}
                    }
                }
            }
        }
        // trace(c);
        // if (c>100) {
        //     trace(startX,endX,startX,endY);
        //     js.Lib.debug();
        // }
        // plane.setFromSegment(body.predictedPosition,body.position);
        // for (x in startX...endX) {
        //     for (y in startY...endY) {
        //         var cell = data.get(x,y,1);
        //         if (cell&COLLIDABLE==1) {
        //             tilePosition.x = (x*tileSize)+tileHalfSize;
        //             tilePosition.y = (y*tileSize)+tileHalfSize;
        //             if (body.isBullet) {
        //                 //FIXME
        //                 if (Math.abs(plane.distancePoint(tilePosition))<40) {
        //                     if (Intersect.StaticAABBvsSweeptAABB(tilePosition,tileExtents,body.position,proxy.aabb.extents,body.delta,contact)==true) {
        //                         body.respondBulletCollision(contact);
        //                         if (proxy.contactCallback!=null) {
        //                             proxy.contactCallback(proxy,null,contact);
        //                         }
        //                     }
        //                 }
        //             } else {
        //                 if (Intersect.AABBvsStaticSolidAABB(body.position,proxy.aabb.extents,tilePosition,tileExtents,contact)==true) {
        //                     var nextX:Int = x + Std.int(contact.normal.x);
        //                     var nextY:Int = y + Std.int(contact.normal.y);
        //                     var nextCell = data.get(nextX,nextY,1);
        //                     if (nextCell&COLLIDABLE==0) {
        //                         body.respondStaticCollision(contact);
        //                         if (proxy.contactCallback!=null) {
        //                             proxy.contactCallback(proxy,null,contact);
        //                         }
        //                     } else {
        //                     }
        //                 }
        //             }
        //         }
        //     }
        // }
    }
    iterateCells(aabb, cb) {
        var startX = this.data.Index(aabb.l);
        var startY = this.data.Index(aabb.t);
        var endX = this.data.Index(aabb.r) + 1;
        var endY = this.data.Index(aabb.b) + 1;
        var aabbArg = new __WEBPACK_IMPORTED_MODULE_5__geom_AABB__["a" /* AABB */]();
        aabbArg.extents.setTo(this.tileHalfSize, this.tileHalfSize);
        for (var y = startY; y < endY; y++) {
            for (var x = startX; x < endX; x++) {
                // for (x in startX...endX) {
                //     for (y in startY...endY) {
                var cell = this.data.get(x, y, 0);
                if ((cell & SOLID) == SOLID) {
                    aabbArg.position.setTo((x * this.tileSize) + this.tileHalfSize, (y * this.tileSize) + this.tileHalfSize);
                    cb(aabbArg);
                }
            }
        }
    }
    castRay(ray) {
        var x = this.data.Index(ray.origin.x);
        var y = this.data.Index(ray.origin.y);
        var cX = x * this.tileSize;
        var cY = y * this.tileSize;
        var d = ray.direction;
        if (d.x == 0.0 && d.y == 0.0)
            return true;
        var stepX = 0;
        var tMaxX = 100000000;
        var tDeltaX = 0;
        if (d.x < 0) {
            stepX = -1;
            tMaxX = (cX - ray.origin.x) / d.x;
            tDeltaX = this.tileSize / -d.x;
        }
        else if (d.x > 0) {
            stepX = 1;
            tMaxX = (cX + this.tileSize - ray.origin.x) / d.x;
            tDeltaX = this.tileSize / d.x;
        }
        var stepY = 0;
        var tMaxY = 100000000;
        var tDeltaY = 0;
        if (d.y < 0) {
            stepY = -1;
            tMaxY = (cY - ray.origin.y) / d.y;
            tDeltaY = this.tileSize / -d.y;
        }
        else if (d.y > 0) {
            stepY = 1;
            tMaxY = (cY + this.tileSize - ray.origin.y) / d.y;
            tDeltaY = this.tileSize / d.y;
        }
        var distX = 0.0;
        var distY = 0.0;
        var transitionEdgeNormalX = 0;
        var transitionEdgeNormalY = 0;
        while (true) {
            if (tMaxX < tMaxY) {
                distX = tMaxX * d.x;
                distY = tMaxX * d.y;
                tMaxX += tDeltaX;
                x += stepX;
            }
            else {
                distX = tMaxY * d.x;
                distY = tMaxY * d.y;
                tMaxY += tDeltaY;
                y += stepY;
            }
            if (distX * distX + distY * distY > ray.range * ray.range)
                return false;
            var tile = this.data.get(x, y, 0);
            if ((tile & SOLID) == SOLID) {
                if (tMaxX < tMaxY) {
                    transitionEdgeNormalX = stepX < 0 ? 1 : -1;
                    transitionEdgeNormalY = 0;
                }
                else {
                    transitionEdgeNormalX = 0;
                    transitionEdgeNormalY = stepY < 0 ? 1 : -1;
                }
                ray.report(distX, distY, transitionEdgeNormalX, transitionEdgeNormalY);
                return true;
            }
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = TileMapCollision;



/***/ }),
/* 102 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Vector2__ = __webpack_require__(0);

class Segment {
    constructor() {
        this.start = new __WEBPACK_IMPORTED_MODULE_0__Vector2__["a" /* Vector2 */]();
        this.end = new __WEBPACK_IMPORTED_MODULE_0__Vector2__["a" /* Vector2 */]();
        this.delta = new __WEBPACK_IMPORTED_MODULE_0__Vector2__["a" /* Vector2 */]();
        this.scale = new __WEBPACK_IMPORTED_MODULE_0__Vector2__["a" /* Vector2 */]();
        this.sign = new __WEBPACK_IMPORTED_MODULE_0__Vector2__["a" /* Vector2 */]();
    }
    set(s, e) {
        this.start.copy(s);
        this.end.copy(e);
        this.delta.copy(this.end);
        this.delta.minusEquals(this.start);
        this.scale.setTo(1 / this.delta.x, 1 / this.delta.y);
        this.sign.x = this.delta.x < 0 ? -1 : 1;
        this.sign.y = this.delta.y < 0 ? -1 : 1;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Segment;



/***/ }),
/* 103 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Vector2__ = __webpack_require__(0);

class Plane {
    constructor() {
        this.n = new __WEBPACK_IMPORTED_MODULE_0__Vector2__["a" /* Vector2 */]();
        this.d = 0;
    }
    set(n, q) {
        this.n.copy(n);
        this.d = this.n.dot(q);
    }
    setFromSegment(s, e) {
        this.n.copy(s);
        this.n.minusEquals(e);
        this.n.normalize();
        this.n.leftHandNormalEquals();
        this.d = this.n.dot(s);
    }
    distancePoint(q) {
        return this.n.dot(q) - this.d;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Plane;



/***/ }),
/* 104 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_components_Extents__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_components_Position__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_components_Fixed__ = __webpack_require__(13);





class PhysicsStaticSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor(broadphase) {
        super([__WEBPACK_IMPORTED_MODULE_2__core_components_Position__["a" /* Position */], __WEBPACK_IMPORTED_MODULE_1__core_components_Extents__["a" /* Extents */], __WEBPACK_IMPORTED_MODULE_3__components_PhysicsCollision__["a" /* PhysicsCollision */], __WEBPACK_IMPORTED_MODULE_4__core_components_Fixed__["a" /* Fixed */]]);
        this.broadphase = broadphase;
    }
    onEntityAdded(entity, position, extents, physicsCollision, fixed) {
        // position.updatePosition = setPosition;
        physicsCollision.proxy.aabb.extents.copy(extents.halfWidths);
        physicsCollision.proxy.entity = entity;
        physicsCollision.proxy.isStatic = true;
        physicsCollision.proxy.aabb.position = position.coords; //Because its not linked to a body
        this.broadphase.addProxy(physicsCollision.proxy);
    }
    onEntityRemoved(entity, position, extents, physicsCollision, fixed) {
        this.broadphase.removeProxy(physicsCollision.proxy);
    }
    updateAllEntities() { }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = PhysicsStaticSystem;



/***/ }),
/* 105 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geom_AABB__ = __webpack_require__(22);


class BFProxy {
    constructor() {
        this.isStatic = false;
        this.isSensor = false;
        this.isActive = true;
        this.limitToStaticCheck = false;
        this.userData1 = -1;
        this.userData2 = -1;
        this.contactCallbacks = [];
        this.aabb = new __WEBPACK_IMPORTED_MODULE_1__geom_AABB__["a" /* AABB */]();
        this.offset = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.responseBias = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */](1, 1);
        this.id = BFProxy.nextID++;
    }
    setBody(body) {
        this.body = body;
        this.aabb.position = body.position;
        this.isStatic = false; //bodies are always dynamic
    }
    collide(proxy, contact) {
        this.contactCallbacks.forEach(callback => callback(this, proxy, contact));
    }
    // public static inline  CreateStaticFeature(x:Float,y:Float,hw:Float,hh:Float,filter:Filter):BFProxy {
    //     var bfproxy = new BFProxy();
    //     bfproxy.aabb.extents.setTo(hw,hh);
    //     bfproxy.filter = filter;
    //     bfproxy.aabb.position.setTo(x,y);
    //     bfproxy.isStatic = true;
    //     return bfproxy;
    // }
    static HashBodyIDs(a, b) {
        return a < b ? (a << 16) | b : (b << 16) | a;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = BFProxy;

BFProxy.nextID = 0;


/***/ }),
/* 106 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_components_Position__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_components_Extents__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_components_Moveable__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ecs_System__ = __webpack_require__(1);





class PhysicsMoveableSystem extends __WEBPACK_IMPORTED_MODULE_4__ecs_System__["a" /* System */] {
    constructor(broadphase) {
        super([__WEBPACK_IMPORTED_MODULE_0__core_components_Position__["a" /* Position */], __WEBPACK_IMPORTED_MODULE_1__core_components_Extents__["a" /* Extents */], __WEBPACK_IMPORTED_MODULE_2__components_PhysicsCollision__["a" /* PhysicsCollision */], __WEBPACK_IMPORTED_MODULE_3__core_components_Moveable__["a" /* Moveable */]]);
        this.broadphase = broadphase;
    }
    onEntityAdded(entity, position, extents, physicsCollision, moveable) {
        physicsCollision.proxy.aabb.extents.copy(extents.halfWidths);
        physicsCollision.proxy.isStatic = false;
        physicsCollision.proxy.entity = entity;
        physicsCollision.proxy.aabb.position = position.coords; //Because its not linked to a body BUT it could cause an issue?
        physicsCollision.proxy.userData1 = entity;
        this.broadphase.addProxy(physicsCollision.proxy);
    }
    onEntityRemoved(entity, position, extents, physicsCollision, moveable) {
        this.broadphase.removeProxy(physicsCollision.proxy);
    }
    updateAllEntities() { }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = PhysicsMoveableSystem;



/***/ }),
/* 107 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_PhysicsBody__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_components_Moveable__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ecs_System__ = __webpack_require__(1);




class PhysicsCollisionSystem extends __WEBPACK_IMPORTED_MODULE_3__ecs_System__["a" /* System */] {
    constructor(broadphase) {
        super([__WEBPACK_IMPORTED_MODULE_0__components_PhysicsCollision__["a" /* PhysicsCollision */], __WEBPACK_IMPORTED_MODULE_1__components_PhysicsBody__["a" /* PhysicsBody */], __WEBPACK_IMPORTED_MODULE_2__core_components_Moveable__["a" /* Moveable */]]);
        this.broadphase = broadphase;
    }
    onEntityAdded(entity, physicsCollision, physicsBody, moveable) {
        //All this really does is add the body to the proxy and run the physics
        physicsCollision.proxy.setBody(physicsBody.body);
    }
    updateAllEntities() {
        this.broadphase.collide();
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = PhysicsCollisionSystem;



/***/ }),
/* 108 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_PhysicsBody__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_components_Extents__ = __webpack_require__(5);



class PhysicsMassSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor() {
        super([__WEBPACK_IMPORTED_MODULE_1__components_PhysicsBody__["a" /* PhysicsBody */], __WEBPACK_IMPORTED_MODULE_2__core_components_Extents__["a" /* Extents */]]);
    }
    onEntityAdded(entity, physicsBody, extents) {
        if (physicsBody.setMassFromVolume) {
            physicsBody.body.setMassFromVolumeMaterial(extents.halfWidths.x * extents.halfWidths.y * 4);
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = PhysicsMassSystem;



/***/ }),
/* 109 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_components_Position__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_PhysicsBody__ = __webpack_require__(6);



class PhysicsPositionSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor() {
        super([__WEBPACK_IMPORTED_MODULE_1__core_components_Position__["a" /* Position */], __WEBPACK_IMPORTED_MODULE_2__components_PhysicsBody__["a" /* PhysicsBody */]]);
    }
    updateEntity(entity, position, physicsBody) {
        physicsBody.body.updatePosition();
        position.update(physicsBody.body.position);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = PhysicsPositionSystem;



/***/ }),
/* 110 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_components_Position__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_PhysicsBody__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_components_Active__ = __webpack_require__(4);





class PhysicsUpdateSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor() {
        super([__WEBPACK_IMPORTED_MODULE_2__core_components_Position__["a" /* Position */], __WEBPACK_IMPORTED_MODULE_3__components_PhysicsBody__["a" /* PhysicsBody */], __WEBPACK_IMPORTED_MODULE_4__core_components_Active__["a" /* Active */]]);
        this.globalForce = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */](0, 30);
        this.globalDamping = 0.99;
    }
    onEntityAdded(entity, position, physicsBody, active) {
        physicsBody.body.position.copy(position.coords);
    }
    updateEntity(entity, position, physicsBody, active) {
        physicsBody.body.update(this.dt / 1000, this.globalForce, this.globalDamping);
        position.direction.x = physicsBody.body.velocity.x > 0 ? 1 : -1;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = PhysicsUpdateSystem;



/***/ }),
/* 111 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__physics_components_PhysicsBody__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_Controllable__ = __webpack_require__(112);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ecs_System__ = __webpack_require__(1);



class ControllerSystem extends __WEBPACK_IMPORTED_MODULE_2__ecs_System__["a" /* System */] {
    constructor(input) {
        super([__WEBPACK_IMPORTED_MODULE_0__physics_components_PhysicsBody__["a" /* PhysicsBody */], __WEBPACK_IMPORTED_MODULE_1__components_Controllable__["a" /* Controllable */]]);
        this.input = input;
    }
    onEntityAdded(entity, physicsBody, controllable) { }
    updateEntity(entity, physicsBody, controllable) {
        this.input.Pressed(38) ? (physicsBody.body.velocity.y -= controllable.force) : 0;
        this.input.Pressed(40) ? (physicsBody.body.velocity.y += controllable.force) : 0;
        this.input.Pressed(37) ? (physicsBody.body.velocity.x -= controllable.force) : 0;
        this.input.Pressed(39) ? (physicsBody.body.velocity.x += controllable.force) : 0;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ControllerSystem;



/***/ }),
/* 112 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Controllable {
    constructor(force) {
        this.force = 1;
        this.force = force;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Controllable;



/***/ }),
/* 113 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_TileGraphics__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_components_Position__ = __webpack_require__(3);



class TileGraphicsRenderSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor(tileFramesConfig, tileMap, map) {
        super([__WEBPACK_IMPORTED_MODULE_2__core_components_Position__["a" /* Position */], __WEBPACK_IMPORTED_MODULE_1__components_TileGraphics__["a" /* TileGraphics */]]);
        this.updates = new Array();
        this.frames = new Map();
        this.tileMap = tileMap;
        this.map = map;
        this.parseFramesConfig(tileFramesConfig);
    }
    //Format
    // "switchOn":[x,y,w,h,cx,cy] 64 32 32 32 32
    //                               5  4 4 4 4
    //                              16 12 8 4 0
    parseFramesConfig(config) {
        var data = JSON.parse(config);
        data.sheets.forEach((sheet, i) => {
            Object.keys(sheet).forEach(frameId => {
                sheet[frameId].push(i);
                this.frames.set(frameId, sheet[frameId]);
            });
        });
    }
    onEntityAdded(entity, position, tileGraphics) {
        tileGraphics.onChange = this.onChange.bind(this, entity);
        if (tileGraphics.tileFrameId != null)
            this.onChange(entity);
    }
    onChange(entity) {
        this.updates.push(entity);
    }
    updateAllEntities() {
        while (this.updates.length > 0) {
            var entity = this.updates.pop();
            var position = this.engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_2__core_components_Position__["a" /* Position */]);
            var tileDisplay = this.engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_1__components_TileGraphics__["a" /* TileGraphics */]);
            if (tileDisplay.tileFrameId != "")
                this.tileMap.updateMap(this.map.data.Index(position.coords.x), this.map.data.Index(position.coords.y), this.frames.get(tileDisplay.tileFrameId));
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = TileGraphicsRenderSystem;



/***/ }),
/* 114 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__graphics_render_particle_PointBlockParticleRender__ = __webpack_require__(115);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__BlockParticle__ = __webpack_require__(116);



class BlockParticleEngine2 {
    constructor(particleCount, deltaTime, map) {
        this.particleCount = particleCount;
        this.deltaTime = deltaTime;
        this.invDeltaTime = deltaTime / 1000;
        this.map = map;
        this.ZERO_FORCE = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */]();
        this.activeParticles = new Array();
        this.activeParticles[0] = new Array(this.particleCount);
        this.activeParticles[1] = new Array(this.particleCount);
        this.cachedParticles = new Array(this.particleCount);
        for (let i = 0; i < particleCount; i++) {
            this.cachedParticles[i] = new __WEBPACK_IMPORTED_MODULE_2__BlockParticle__["a" /* BlockParticle */]();
        }
        this.availableParticleCount = this.particleCount;
        this.activeParticlesCount = 0;
        this.activePool = 0;
        this.renderer = new __WEBPACK_IMPORTED_MODULE_0__graphics_render_particle_PointBlockParticleRender__["a" /* PointBlockParticleRender */](particleCount);
    }
    EmitParticle(x, y, vX, vY, fX, fY, ttl, damping, decayable, top, externalForce, data1, data2, data3, data4, data5) {
        if (this.availableParticleCount == 0)
            return false;
        var particle = this.cachedParticles[--this.availableParticleCount];
        this.activeParticles[this.activePool][this.activeParticlesCount++] = particle;
        particle.Initalize(x, y, vX, vY, fX, fY, ttl, damping, decayable ? this.deltaTime / ttl : 0, top, externalForce != null ? externalForce : this.ZERO_FORCE, data1, data2, data3, data4, data5);
        return true;
    }
    Update() {
        this.renderer.ResetBatch();
        const poolA = this.activeParticles[this.activePool];
        const poolB = this.activeParticles[this.activePool === 1 ? 0 : 1];
        let newCount = 0;
        for (var i = 0; i < this.activeParticlesCount; i++) {
            const particle = poolA[i];
            if (particle.Update(this.deltaTime, this.invDeltaTime) &&
                (this.map.getReal(particle.pX, particle.pY, 0) & 1) != 1) {
                this.renderer.AddSpriteToBatch(particle.pX, particle.pY, particle.size, (particle.alpha * 255) | 0, particle.red, particle.green, particle.blue);
                poolB[newCount++] = particle;
            }
            else {
                this.cachedParticles[this.availableParticleCount++] = particle;
            }
        }
        this.activeParticlesCount = newCount;
        this.activePool = this.activePool === 1 ? 0 : 1;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = BlockParticleEngine2;



/***/ }),
/* 115 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_ShaderWrapper__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_WebGLShaderUtil__ = __webpack_require__(32);



class PointBlockParticleRender {
    constructor(size) {
        this.first = true;
        this.maxSprites = size;
    }
    Init(gl, camera) {
        this.gl = gl;
        this.camera = camera;
        this.projection = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.pointSpriteShader = new __WEBPACK_IMPORTED_MODULE_1__util_ShaderWrapper__["a" /* ShaderWrapper */](gl, Object(__WEBPACK_IMPORTED_MODULE_2__util_WebGLShaderUtil__["a" /* CompileProgram */])(gl, PointBlockParticleRender.SPRITE_VERTEX_SHADER, PointBlockParticleRender.SPRITE_FRAGMENT_SHADER));
        this.dataBuffer = this.gl.createBuffer();
        this.arrayBuffer = new ArrayBuffer(20 * 4 * this.maxSprites);
        this.data = new Float32Array(this.arrayBuffer);
        this.data8 = new Uint8ClampedArray(this.arrayBuffer);
        this.gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER, this.dataBuffer);
        this.gl.bufferData(WebGLRenderingContext.ARRAY_BUFFER, this.data, WebGLRenderingContext.DYNAMIC_DRAW);
        this.ResetBatch();
    }
    Resize(width, height) {
        this.projection.x = width / 2;
        this.projection.y = height / 2;
    }
    AddStage(stage) {
        this.stage = stage;
    }
    ResetBatch() {
        this.indexRun = 0;
    }
    AddSpriteToBatch(x, y, size, alpha, red, green, blue) {
        var index = this.indexRun * 4;
        this.data[index + 0] = x; //Math.floor(x);// + camera.position.x);
        this.data[index + 1] = y; //Math.floor(y);// + camera.position.y);
        this.data[index + 2] = size;
        index *= 4;
        this.data8[index + 12] = red;
        this.data8[index + 13] = green;
        this.data8[index + 14] = blue;
        this.data8[index + 15] = alpha;
        this.indexRun++;
    }
    Render(clip) {
        if (this.indexRun == 0)
            return;
        // this.gl.enable(WebGLRenderingContext.BLEND);
        // this.gl.blendFunc(WebGLRenderingContext.SRC_ALPHA, WebGLRenderingContext.ONE_MINUS_SRC_ALPHA);
        this.gl.useProgram(this.pointSpriteShader.program);
        this.gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER, this.dataBuffer);
        // this.gl.bufferData(WebGLRenderingContext.ARRAY_BUFFER,data,WebGLRenderingContext.DYNAMIC_DRAW);
        this.gl.bufferSubData(WebGLRenderingContext.ARRAY_BUFFER, 0, this.data);
        this.gl.enableVertexAttribArray(this.pointSpriteShader.attribute.position);
        this.gl.enableVertexAttribArray(this.pointSpriteShader.attribute.size);
        this.gl.enableVertexAttribArray(this.pointSpriteShader.attribute.colour);
        this.gl.vertexAttribPointer(this.pointSpriteShader.attribute.position, 2, WebGLRenderingContext.FLOAT, false, 16, 0);
        this.gl.vertexAttribPointer(this.pointSpriteShader.attribute.size, 1, WebGLRenderingContext.FLOAT, false, 16, 8);
        this.gl.vertexAttribPointer(this.pointSpriteShader.attribute.colour, 4, WebGLRenderingContext.UNSIGNED_BYTE, true, 16, 12);
        this.gl.uniform2f(this.pointSpriteShader.uniform.cameraPosition, this.camera.position.x, this.camera.position.y);
        this.gl.uniform2f(this.pointSpriteShader.uniform.projectionVector, this.projection.x, this.projection.y);
        this.gl.drawArrays(WebGLRenderingContext.POINTS, 0, this.indexRun);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = PointBlockParticleRender;

PointBlockParticleRender.SPRITE_VERTEX_SHADER = `
        precision mediump float;
        uniform vec2 projectionVector;
        uniform vec2 cameraPosition;

        attribute vec2 position;
        attribute float size;
        attribute vec4 colour;
        varying vec4 vColor;
        void main() {
            gl_PointSize = size;
            vColor = colour;
            gl_Position = vec4( (cameraPosition.x + position.x) / projectionVector.x -1.0, (cameraPosition.y + position.y) / -projectionVector.y + 1.0 , 0.0, 1.0);            
        }
    `;
PointBlockParticleRender.SPRITE_FRAGMENT_SHADER = `
        precision mediump float;

        varying vec4 vColor;
        void main() {
            gl_FragColor = vColor;
        }
    `;


/***/ }),
/* 116 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const INV_ALPHA = 1 / 255;
class BlockParticle {
    constructor() { }
    Initalize(x, y, vX, vY, fX, fY, ttl, damping, decay, top, externalForce, data1, data2, data3, data4, data5) {
        this.pX = x;
        this.pY = y;
        this.vX = vX;
        this.vY = vY;
        this.fX = fX;
        this.fY = fY;
        this.ttl = ttl;
        this.age = ttl;
        this.damping = damping;
        this.decay = decay;
        this.externalForce = externalForce;
        this.size = data1;
        this.alpha = data2 * INV_ALPHA;
        this.red = data3;
        this.green = data4;
        this.blue = data5;
    }
    Update(deltaTime, invDeltaTime) {
        this.vX += this.fX + this.externalForce.x;
        this.vY += this.fY + this.externalForce.y;
        this.vX *= this.damping;
        this.vY *= this.damping;
        this.pX += this.vX * invDeltaTime;
        this.pY += this.vY * invDeltaTime;
        this.age -= deltaTime;
        this.alpha -= this.decay;
        return this.age > 0;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = BlockParticle;



/***/ }),
/* 117 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_components_Position__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_ParticleEmitter__ = __webpack_require__(26);




class ParticleSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor(blockParticleEngine) {
        super([__WEBPACK_IMPORTED_MODULE_1__core_components_Position__["a" /* Position */], __WEBPACK_IMPORTED_MODULE_2__core_components_Active__["a" /* Active */], __WEBPACK_IMPORTED_MODULE_3__components_ParticleEmitter__["a" /* ParticleEmitter */]]);
        this.blockParticleEngine = blockParticleEngine;
    }
    updateEntity(entity, position, active, particleEmitter) {
        particleEmitter.emitters.forEach(emitter => emitter.update(this.timestamp, this.engine.c4e.get(entity), position.coords, this.blockParticleEngine));
    }
    postUpdate() {
        this.blockParticleEngine.Update();
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ParticleSystem;



/***/ }),
/* 118 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geom_AABB__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_components_Extents__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_components_Position__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_components_Fixed__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__RegularGridSpaceManager__ = __webpack_require__(119);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_components_Viewable__ = __webpack_require__(15);







class FixedViewManagementSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor(camera) {
        super([__WEBPACK_IMPORTED_MODULE_3__core_components_Position__["a" /* Position */], __WEBPACK_IMPORTED_MODULE_2__core_components_Extents__["a" /* Extents */], __WEBPACK_IMPORTED_MODULE_4__core_components_Fixed__["a" /* Fixed */]]);
        this.camera = camera;
        this.spaceManager = new __WEBPACK_IMPORTED_MODULE_5__RegularGridSpaceManager__["a" /* RegularGridSpaceManager */](10, 10, 500);
        this.activeSpaceAABB = new __WEBPACK_IMPORTED_MODULE_1__geom_AABB__["a" /* AABB */]();
        this.activeSpaceAABB.extents.setTo(camera.viewportSize.x, camera.viewportSize.y); //800 / 2, 600 / 2);
        this.setEntityStatus = this.setEntityStatus.bind(this);
    }
    onEntityAdded(entity, position, extents, fixed) {
        this.spaceManager.addEntity(entity, position, extents);
    }
    updateAllEntities() {
        this.activeSpaceAABB.position.copy(this.camera.realPosition);
        this.spaceManager.search(this.activeSpaceAABB, this.setEntityStatus);
    }
    setEntityStatus(entity, status) {
        if (status == true) {
            this.engine.addComponentsToEntity(entity, [new __WEBPACK_IMPORTED_MODULE_6__core_components_Viewable__["a" /* Viewable */]()]);
        }
        else {
            this.engine.removeComponentsFromEntity(entity, [__WEBPACK_IMPORTED_MODULE_6__core_components_Viewable__["a" /* Viewable */]]);
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = FixedViewManagementSystem;



/***/ }),
/* 119 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ds_Array2D__ = __webpack_require__(120);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__SpaceManagerProxy__ = __webpack_require__(121);


class RegularGridSpaceManager {
    constructor(gridWidth, gridHeight, gridCellSize) {
        this.count = 1;
        this.updateDistanceDelta = 100 * 100;
        this.grid = new __WEBPACK_IMPORTED_MODULE_0__ds_Array2D__["a" /* Array2D */](gridWidth, gridHeight, gridCellSize);
        this.currentCells = new Array();
        for (let y = 0; y < this.grid.gridWidth; y++) {
            for (let x = 0; x < this.grid.gridHeight; x++) {
                this.grid.set(x, y, new Cell());
            }
        }
    }
    addEntity(entity, position, extents) {
        var proxy = new __WEBPACK_IMPORTED_MODULE_1__SpaceManagerProxy__["a" /* SpaceManagerProxy */]();
        proxy.aabb.position = position.coords;
        proxy.aabb.extents = extents.halfWidths;
        proxy.isStatic = true;
        proxy.entity = entity;
        this.hashProxy(proxy);
    }
    hashProxy(proxy) {
        var startX = this.grid.Index(proxy.aabb.position.x - proxy.aabb.extents.x);
        var startY = this.grid.Index(proxy.aabb.position.y - proxy.aabb.extents.y);
        var endX = this.grid.Index(proxy.aabb.position.x + proxy.aabb.extents.x) + 1;
        var endY = this.grid.Index(proxy.aabb.position.y + proxy.aabb.extents.y) + 1;
        for (let y = startY; y < endY; y++) {
            for (let x = startX; x < endX; x++) {
                var cell = this.grid.get(x, y);
                cell.proxies.push(proxy);
            }
        }
    }
    addActiveCell(cell, viewAABB, callback) {
        cell.proxies.forEach(proxy => {
            if (proxy.referenceCount++ == 0) {
                callback(proxy.entity, true);
            }
        });
        cell.updateCount = this.count;
    }
    removeActiveCell(cell, viewAABB, callback) {
        cell.proxies.forEach(proxy => {
            if (--proxy.referenceCount == 0) {
                callback(proxy.entity, false);
            }
        });
        //Reset the update count
        cell.updateCount = 0;
    }
    search(viewAABB, callback) {
        if (this.lastUpdatePosition == null) {
            this.lastUpdatePosition = viewAABB.position.clone();
        }
        else {
            if (this.lastUpdatePosition.distSqrd(viewAABB.position) < this.updateDistanceDelta)
                return;
            this.lastUpdatePosition.copy(viewAABB.position);
        }
        var startX = this.grid.Index(viewAABB.position.x - viewAABB.extents.x);
        var startY = this.grid.Index(viewAABB.position.y - viewAABB.extents.y);
        var endX = this.grid.Index(viewAABB.position.x + viewAABB.extents.x) + 1;
        var endY = this.grid.Index(viewAABB.position.y + viewAABB.extents.y) + 1;
        for (let y = startY; y < endY; y++) {
            for (let x = startX; x < endX; x++) {
                var cell = this.grid.get(x, y);
                if (cell == null)
                    continue;
                if (cell.updateCount == 0)
                    this.currentCells.push(cell);
                else
                    cell.updateCount = this.count;
            }
        }
        var i = this.currentCells.length;
        while (i-- > 0) {
            var cell = this.currentCells[i];
            if (cell.updateCount == 0) {
                this.addActiveCell(cell, viewAABB, callback);
            }
            else if (cell.updateCount < this.count) {
                this.removeActiveCell(cell, viewAABB, callback);
                this.currentCells.splice(i, 1);
            }
        }
        this.count++;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = RegularGridSpaceManager;

class Cell {
    constructor() {
        this.proxies = new Array();
        this.updateCount = 0;
    }
}


/***/ }),
/* 120 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Array2D {
    constructor(gridWidth, gridHeight, cellSize) {
        this.initalize(gridWidth, gridHeight, cellSize);
    }
    initalize(gridWidth, gridHeight, cellSize) {
        this.gridWidth = gridWidth;
        this.gridHeight = gridHeight;
        this.cellSize = cellSize;
        this.invCellSize = 1 / cellSize;
        this.data = new Array(this.gridWidth * this.gridHeight);
    }
    get(x, y) {
        return this.data[y * this.gridWidth + x];
    }
    getSafe(x, y) {
        return x >= this.gridWidth || y >= this.gridHeight || x < 0 || y < 0 ? null : this.data[y * this.gridWidth + x];
    }
    set(x, y, value) {
        this.data[y * this.gridWidth + x] = value;
    }
    Index(value) {
        //FIXME Not sure this always works...
        //return Std.number(value / cellSize);
        //return Math.floor(value * invCellSize);
        return (value * this.invCellSize) | 0;
    }
    Width() {
        return this.gridWidth * this.cellSize;
    }
    Height() {
        return this.gridHeight * this.cellSize;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Array2D;



/***/ }),
/* 121 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geom_AABB__ = __webpack_require__(22);

class SpaceManagerProxy {
    constructor() {
        this.aabb = new __WEBPACK_IMPORTED_MODULE_0__geom_AABB__["a" /* AABB */]();
        this.isStatic = false;
        this.entity = null;
        this.active = false;
        this.referenceCount = 0;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SpaceManagerProxy;



/***/ }),
/* 122 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_Age__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_State__ = __webpack_require__(7);




class AgeSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor() {
        super([__WEBPACK_IMPORTED_MODULE_1__components_Age__["a" /* Age */], __WEBPACK_IMPORTED_MODULE_3__components_State__["a" /* State */], __WEBPACK_IMPORTED_MODULE_2__components_Active__["a" /* Active */]]);
    }
    updateEntity(entity, age, state, active) {
        if (age.growOlder(this.dt)) {
            if (age.onExpire != null)
                state.setState(age.onExpire); // age.onExpire(this.engine,entity);
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = AgeSystem;



/***/ }),
/* 123 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_Health__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_State__ = __webpack_require__(7);




class HealthSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor() {
        super([__WEBPACK_IMPORTED_MODULE_1__components_Health__["a" /* Health */], __WEBPACK_IMPORTED_MODULE_3__components_State__["a" /* State */], __WEBPACK_IMPORTED_MODULE_2__components_Active__["a" /* Active */]]);
    }
    updateEntity(entity, health, state, active) {
        if (health.currentHealth <= 0) {
            if (health.onNoHealth != null) {
                state.setState(health.onNoHealth);
                // health.onNoHealth(this.engine, entity);
            }
        }
        else {
            health.currentHealth = Math.min(health.maxHealth, health.currentHealth + health.recoveryPerMs * this.dt);
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = HealthSystem;



/***/ }),
/* 124 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_CollisionCouner__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__physics_components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_Moveable__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__components_State__ = __webpack_require__(7);






class CollsionCountSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor() {
        super([__WEBPACK_IMPORTED_MODULE_2__components_CollisionCouner__["a" /* CollisionCounter */], __WEBPACK_IMPORTED_MODULE_3__physics_components_PhysicsCollision__["a" /* PhysicsCollision */], __WEBPACK_IMPORTED_MODULE_5__components_State__["a" /* State */], __WEBPACK_IMPORTED_MODULE_1__components_Active__["a" /* Active */]]);
        this.callback = this.callback.bind(this);
    }
    onEntityAdded(entity, collisionCounter, physicsCollision, state, active) {
        physicsCollision.proxy.contactCallbacks.push(this.callback);
    }
    onEntityRemoved(entity, collisionCounter, physicsCollision, state, active) {
        physicsCollision.proxy.contactCallbacks.splice(physicsCollision.proxy.contactCallbacks.indexOf(this.callback), 1);
    }
    updateAllEntities() { }
    callback(a, b, contact) {
        var cc = this.engine.getComponentForEntity(a.entity, __WEBPACK_IMPORTED_MODULE_2__components_CollisionCouner__["a" /* CollisionCounter */]);
        var count = --cc.count;
        //This is the world
        if (b == null) {
            if (count <= 0 && cc.onCount != null) {
                var state = this.engine.getComponentForEntity(a.entity, __WEBPACK_IMPORTED_MODULE_5__components_State__["a" /* State */]);
                state.setState(cc.onCount);
                // cc.onCount(this.engine, a.entity);
            }
        }
        else {
            //Do nothing with sensor
            if (b.isSensor)
                return;
            //Hit Dynamic item? trigger directly
            if (this.engine.getComponentForEntity(b.entity, __WEBPACK_IMPORTED_MODULE_4__components_Moveable__["a" /* Moveable */]) && cc.onCount != null) {
                var state = this.engine.getComponentForEntity(a.entity, __WEBPACK_IMPORTED_MODULE_5__components_State__["a" /* State */]);
                state.setState(cc.onCount);
                // cc.onCount(this.engine, a.entity);
            }
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CollsionCountSystem;



/***/ }),
/* 125 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__physics_collision_Ray__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geom_AABB__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ds_EntityCollection__ = __webpack_require__(126);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Maths__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_components_Position__ = __webpack_require__(3);





class BroadphaseAreaQuery {
    constructor(engine, broadphase) {
        this.engine = engine;
        this.broadphase = broadphase;
        this.entityCollection = new __WEBPACK_IMPORTED_MODULE_2__ds_EntityCollection__["a" /* EntityCollection */]();
        this.aabb = new __WEBPACK_IMPORTED_MODULE_1__geom_AABB__["a" /* AABB */]();
        this.ray = new __WEBPACK_IMPORTED_MODULE_0__physics_collision_Ray__["a" /* Ray */]();
        this.addBroadphaseItem = this.addBroadphaseItem.bind(this);
    }
    query(position, range, filterEntity, visibleCheck) {
        // js.Lib.debug();
        this.entityCollection.clear();
        this.aabb.position.copy(position);
        this.aabb.extents.setTo(range, range);
        this.filterEntity = filterEntity;
        this.visibleCheck = visibleCheck;
        this.broadphase.QueryArea(this.aabb, this.addBroadphaseItem, true, true); //Check static and dynamic items
    }
    addBroadphaseItem(bfproxy) {
        console.log("found " + bfproxy.id);
        if (this.filterEntity != null && bfproxy.entity == this.filterEntity)
            return;
        var distance = bfproxy.aabb.position.distSqrd(this.aabb.position) + __WEBPACK_IMPORTED_MODULE_3__Maths__["a" /* ZERO_TOLERANCE */];
        if (distance > BroadphaseAreaQuery.RAYCAST_THRESHOLD && this.visibleCheck) {
            const pos = this.engine.getComponentForEntity(bfproxy.entity, __WEBPACK_IMPORTED_MODULE_4__core_components_Position__["a" /* Position */]);
            this.ray.initalize(this.aabb.position, pos.coords, 0, null);
            this.broadphase //js.Lib.debug();
                .CastRay(this.ray, null, false, false); //Dont check ray against static and dynamic items
            if (this.ray.hit)
                return;
        }
        var item = this.entityCollection.addItem(bfproxy.entity);
        item.distance = distance;
        item.perspective = this.aabb.position;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = BroadphaseAreaQuery;

BroadphaseAreaQuery.RAYCAST_THRESHOLD = 10;


/***/ }),
/* 126 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EntityCollectionItem__ = __webpack_require__(127);

class EntityCollection {
    constructor() {
        this.entities = new Array();
    }
    addItem(entity) {
        const eci = new __WEBPACK_IMPORTED_MODULE_0__EntityCollectionItem__["a" /* EntityCollectionItem */](entity);
        this.entities.push(eci);
        return eci;
    }
    getItem(entity) {
        return this.entities.find(eci => eci.entity === entity);
    }
    removeItem(entity) {
        this.entities = this.entities.filter(eci => eci.entity !== entity);
    }
    filter(filterFunc) {
        this.entities = this.entities.filter(filterFunc);
    }
    clear() {
        this.entities.length = 0;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = EntityCollection;



/***/ }),
/* 127 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class EntityCollectionItem {
    constructor(entity) {
        this.entity = entity;
    }
    reset() { }
    static SortClosestFirst(a, b) {
        return a.distance - b.distance;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = EntityCollectionItem;



/***/ }),
/* 128 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_Destroy__ = __webpack_require__(20);


class DestroySystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor() {
        super([__WEBPACK_IMPORTED_MODULE_1__components_Destroy__["a" /* Destroy */]]);
        this.toDelete = new Array();
    }
    updateEntity(entity, destroy) {
        if (destroy.count-- <= 0) {
            this.toDelete.push(entity);
        }
    }
    postUpdate() {
        this.toDelete.forEach(entity => this.engine.destroyEntity(entity));
        this.toDelete.length = 0;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DestroySystem;



/***/ }),
/* 129 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glaze_physics_collision_Filter__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__config_Filters__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__glaze_physics_Body__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__glaze_physics_Material__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__glaze_core_components_Extents__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__glaze_graphics_components_Graphics__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__glaze_graphics_components_GraphicsAnimation__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__glaze_physics_components_PhysicsBody__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__glaze_physics_components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__glaze_core_components_Moveable__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__glaze_core_components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__components_Player__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__glaze_graphics_components_Light__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__glaze_core_components_Viewable__ = __webpack_require__(15);














class PlayerFactory {
    static create(engine, position) {
        var playerFilter = new __WEBPACK_IMPORTED_MODULE_0__glaze_physics_collision_Filter__["a" /* Filter */]();
        playerFilter.categoryBits = __WEBPACK_IMPORTED_MODULE_1__config_Filters__["a" /* TestFilters */].PLAYER_CAT;
        playerFilter.maskBits |= __WEBPACK_IMPORTED_MODULE_1__config_Filters__["a" /* TestFilters */].PROJECTILE_CAT;
        playerFilter.groupIndex = __WEBPACK_IMPORTED_MODULE_1__config_Filters__["a" /* TestFilters */].PLAYER_GROUP;
        var body = new __WEBPACK_IMPORTED_MODULE_2__glaze_physics_Body__["a" /* Body */](new __WEBPACK_IMPORTED_MODULE_3__glaze_physics_Material__["a" /* Material */](1, 0.3, 0.1));
        body.maxScalarVelocity = 0;
        body.maxVelocity.setTo(1600, 1000);
        var player = engine.createEntity();
        engine.addComponentsToEntity(player, [
            new __WEBPACK_IMPORTED_MODULE_11__components_Player__["a" /* Player */](),
            position,
            new __WEBPACK_IMPORTED_MODULE_4__glaze_core_components_Extents__["a" /* Extents */](7, 20),
            new __WEBPACK_IMPORTED_MODULE_5__glaze_graphics_components_Graphics__["a" /* Graphics */]("player"),
            new __WEBPACK_IMPORTED_MODULE_6__glaze_graphics_components_GraphicsAnimation__["a" /* GraphicsAnimation */]("player", "idle"),
            new __WEBPACK_IMPORTED_MODULE_7__glaze_physics_components_PhysicsBody__["a" /* PhysicsBody */](body, true),
            new __WEBPACK_IMPORTED_MODULE_8__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */](false, playerFilter, []),
            new __WEBPACK_IMPORTED_MODULE_9__glaze_core_components_Moveable__["a" /* Moveable */](),
            new __WEBPACK_IMPORTED_MODULE_10__glaze_core_components_Active__["a" /* Active */](),
            new __WEBPACK_IMPORTED_MODULE_12__glaze_graphics_components_Light__["a" /* Light */](128, 1, 1, 1, 255, 0, 0),
            new __WEBPACK_IMPORTED_MODULE_13__glaze_core_components_Viewable__["a" /* Viewable */](),
        ]);
        return player;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = PlayerFactory;



/***/ }),
/* 130 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glaze_ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glaze_physics_components_PhysicsBody__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__glaze_core_components_Position__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__glaze_graphics_components_GraphicsAnimation__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__glaze_util_CharacterController__ = __webpack_require__(131);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__glaze_physics_collision_Filter__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__components_Player__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__glaze_physics_components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__glaze_core_components_Extents__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__glaze_util_Random__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__factories_projectile_StandardBullet__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__factories_character_BeeFactory__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__glaze_core_components_Holder__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__config_Filters__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__glaze_core_components_Moveable__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__glaze_core_components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__glaze_util_Ballastics__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__factories_projectile_PlasmaBall__ = __webpack_require__(134);


















/*
backspace   8
tab 9
enter   13
shift   16
ctrl    17
alt 18
pause/break 19
caps lock   20
escape  27
page up 33
page down   34
end 35
home    36
left arrow  37
up arrow    38
right arrow 39
down arrow  40
insert  45
delete  46

0   48
1   49
2   50
3   51
4   52
5   53
6   54
7   55
8   56
9   57

a   65
b   66
c   67
d   68
e   69
f   70
g   71
h   72
i   73
j   74
k   75
l   76
m   77
n   78
o   79
p   80
q   81
r   82
s   83
t   84
u   85
v   86
w   87
x   88
y   89
z   90
*/
class PlayerSystem extends __WEBPACK_IMPORTED_MODULE_0__glaze_ecs_System__["a" /* System */] {
    constructor(input, particleEngine) {
        super([__WEBPACK_IMPORTED_MODULE_2__glaze_core_components_Position__["a" /* Position */], __WEBPACK_IMPORTED_MODULE_6__components_Player__["a" /* Player */], __WEBPACK_IMPORTED_MODULE_7__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */], __WEBPACK_IMPORTED_MODULE_1__glaze_physics_components_PhysicsBody__["a" /* PhysicsBody */], __WEBPACK_IMPORTED_MODULE_3__glaze_graphics_components_GraphicsAnimation__["a" /* GraphicsAnimation */], __WEBPACK_IMPORTED_MODULE_8__glaze_core_components_Extents__["a" /* Extents */]]);
        this.currentWeapon = 0;
        this.input = input;
        this.particleEngine = particleEngine;
    }
    onEntityAdded(entity, position, player, physicsCollision, physicsBody, graphicsAnimation, extents) {
        // physicsBody.body.setMass(880);
        physicsBody.body.usesStairs = true;
        // physicsBody.body.isBullet = true;
        this.characterController = new __WEBPACK_IMPORTED_MODULE_4__glaze_util_CharacterController__["a" /* CharacterController */](this.input, physicsBody.body, 800);
        // TODO
        // playerLight = engine.createEntity(
        //     [
        //     position,
        //     new Light(256,1,1,0,255,255,255),
        //     new Viewable(),
        //     new Moveable(),
        //     new Active()
        //     ],"player light");
        // TODO
        this.holder = new __WEBPACK_IMPORTED_MODULE_12__glaze_core_components_Holder__["a" /* Holder */](entity);
        // TODO
        // inventory = new Inventory(4);
        this.playerHolder = this.engine.createEntity();
        this.engine.addComponentsToEntity(this.playerHolder, [
            position,
            extents,
            this.holder,
            new __WEBPACK_IMPORTED_MODULE_7__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */](true, new __WEBPACK_IMPORTED_MODULE_5__glaze_physics_collision_Filter__["a" /* Filter */](1, 0, __WEBPACK_IMPORTED_MODULE_13__config_Filters__["a" /* TestFilters */].PLAYER_GROUP), [], false, physicsBody.body),
            new __WEBPACK_IMPORTED_MODULE_14__glaze_core_components_Moveable__["a" /* Moveable */](),
            new __WEBPACK_IMPORTED_MODULE_15__glaze_core_components_Active__["a" /* Active */](),
        ]);
        // player.addChildEntity(playerLight);
        // playerFilter = entity.getComponent(PhysicsCollision).proxy.filter;
        // animation = entity.getComponent(SpriteAnimation);
    }
    updateEntity(entity, position, player, physicsCollision, physicsBody, graphicsAnimation, extents) {
        this.characterController.update();
        // if (characterController.isWalking) {
        if (physicsBody.body.onGround && Math.abs(physicsBody.body.velocity.x) > 10) {
            graphicsAnimation.play("runright");
        }
        else if (!physicsBody.body.onGround) {
            graphicsAnimation.play("fly");
        }
        else {
            graphicsAnimation.play("idle");
        }
        if (this.characterController.left > 0)
            position.direction.x = -1;
        if (this.characterController.right > 0)
            position.direction.x = 1;
        physicsBody.body.collideOneWay = !(this.characterController.down > 0);
        var fire = this.input.JustPressed(32);
        var search = this.input.JustPressed(71);
        var hold = this.input.Pressed(72);
        var ray = this.input.Pressed(82);
        // TODO
        // if (this.input.JustPressed(84)) {
        //     var lightActive = playerLight.getComponent(Viewable);
        //     if (lightActive!=null)
        //         playerLight.removeComponent(lightActive);
        //         // playerLight.removeComponent2(Light);
        //     else
        //         playerLight.addComponent(new Viewable());
        // }
        // TODO
        if (this.input.Pressed(85)) {
            __WEBPACK_IMPORTED_MODULE_11__factories_character_BeeFactory__["a" /* BeeFactory */].create(this.engine, position.clone());
        }
        // TODO
        this.holder.activate = this.input.JustPressed(72);
        // trace("x");
        // TODO
        if (this.input.JustPressed(74)) {
            //Drop Item 'J'
            // var item = this.holder.drop();
            __WEBPACK_IMPORTED_MODULE_12__glaze_core_components_Holder__["a" /* Holder */].drop(this.engine, this.holder);
        }
        else if (this.input.JustPressed(75)) {
            //Throw Item 'K'
            const item = __WEBPACK_IMPORTED_MODULE_12__glaze_core_components_Holder__["a" /* Holder */].drop(this.engine, this.holder);
            if (item != null) {
                __WEBPACK_IMPORTED_MODULE_16__glaze_util_Ballastics__["a" /* Ballistics */].calcProjectileVelocity(this.engine.getComponentForEntity(item, __WEBPACK_IMPORTED_MODULE_1__glaze_physics_components_PhysicsBody__["a" /* PhysicsBody */]).body, this.input.ViewCorrectedMousePosition(), 700);
            }
        }
        // TODO
        // if (this.input.JustPressed(81)) { //Q
        //     if (holder.heldItem!=null) {
        //         var state = holder.heldItem.getComponent(State);
        //         if (state!=null) {
        //             state.incrementState();
        //         }
        //     }
        // }
        // if (this.input.JustPressed(90)) {
        //     // js.Lib.debug();
        //     inventory.store();
        // }
        // if (this.input.JustPressed(88)) {
        //     inventory.retrieve();
        // }
        if (fire) {
            if (this.currentWeapon == 0) {
                __WEBPACK_IMPORTED_MODULE_10__factories_projectile_StandardBullet__["a" /* StandardBullet */].create(this.engine, position.clone(), physicsCollision.proxy.filter.clone(), this.input.ViewCorrectedMousePosition());
            }
            if (this.currentWeapon == 1)
                __WEBPACK_IMPORTED_MODULE_17__factories_projectile_PlasmaBall__["a" /* PlasmaBall */].create(this.engine, position.clone(), physicsCollision.proxy.filter.clone(), this.input.ViewCorrectedMousePosition());
        }
        //'e' aim
        if (this.input.Pressed(69)) {
            var vel = this.input.ViewCorrectedMousePosition().clone();
            vel.minusEquals(position.coords);
            vel.normalize();
            vel.multEquals(2000);
            this.particleEngine.EmitParticle(position.coords.x, position.coords.y, vel.x, vel.y, 0, 0, 200, 1, false, true, null, 4, 255, 255, 255, 255);
        }
        if (this.characterController.burn > 0) {
            var ttl = 280;
            var offsetx = position.coords.x - 8 * position.direction.x;
            var velocity = 200 + Object(__WEBPACK_IMPORTED_MODULE_9__glaze_util_Random__["b" /* RandomFloat */])(-150, 150); // + physicsBody.body.velocity.y;
            var count = Math.floor((this.characterController.burn + 500) / 1000);
            if (count > 0)
                this.particleEngine.EmitParticle(offsetx, position.coords.y + 6, Object(__WEBPACK_IMPORTED_MODULE_9__glaze_util_Random__["b" /* RandomFloat */])(-10, 10), velocity, 0, 0, 40, 0.9, false, false, null, 4, 255, 255, 0, 0);
            for (var i = 0; i < count; i++) {
                this.particleEngine.EmitParticle(offsetx, position.coords.y + 6, Object(__WEBPACK_IMPORTED_MODULE_9__glaze_util_Random__["b" /* RandomFloat */])(-50, 50), velocity, 0, 0, ttl, 0.9, true, true, null, 4, 255, 255, 255, 255);
            }
        }
        if (this.input.JustPressed(49))
            this.currentWeapon = 0;
        if (this.input.JustPressed(50))
            this.currentWeapon = 1;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = PlayerSystem;



/***/ }),
/* 131 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__ = __webpack_require__(0);

class CharacterController {
    constructor(input, body, baseForce) {
        this.controlForce = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.jumpUnit = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.jumping = false;
        this.isWalking = false;
        this.originalFriction = 0;
        this.burn = 0;
        this.input = input;
        this.body = body;
        this.originalFriction = body.material.friction;
        this.originalVelocityClamp = body.maxVelocity.clone();
        this.setBaseForce(baseForce);
    }
    setBaseForce(baseForce) {
        this.BASE_FORCE = 600;
        this.WALK_FORCE = 2 * this.BASE_FORCE;
        this.AIR_CONTROL_FORCE = 1 * this.BASE_FORCE;
        this.JUMP_FORCE = 30 * this.BASE_FORCE;
        this.MAX_AIR_HORIZONTAL_VELOCITY = 0.5 * this.BASE_FORCE;
        this.MAX_BURN = 5 * this.BASE_FORCE;
        this.BOOST_FACTOR = 1.4;
    }
    update() {
        this.controlForce.setTo(0.0, 0.0);
        this.left = this.input.PressedDuration(65); //a
        this.right = this.input.PressedDuration(68); //d
        var up = this.input.JustPressed(87); //w
        var upDuration = this.input.PressedDuration(87); //w
        this.down = this.input.PressedDuration(83); //s
        this.boost = this.input.PressedDuration(16);
        //Just jumped?
        if (!this.jumping && this.body.onGround && up) {
            this.jumping = true;
            this.controlForce.y -= this.JUMP_FORCE / 5;
        }
        if ((this.jumping && this.input.Released(87)) || this.body.contactNormal.y > 0) {
            this.jumping = false;
        }
        //Just landed?
        if (this.body.onGround && !this.body.onGroundPrev) {
            this.burn = 0;
        }
        // if (this.body.inWater) {
        //     if (this.left>0)     this.controlForce.x -= WALK_FORCE;
        //     if (this.right>0)    this.controlForce.x += WALK_FORCE;
        //     if (up)         this.controlForce.y -= 400;
        //     if (down>0)       this.controlForce.y += WALK_FORCE;
        // } else
        if (this.body.onGround) {
            if (this.left > 0)
                this.controlForce.x -= this.WALK_FORCE;
            if (this.right > 0)
                this.controlForce.x += this.WALK_FORCE;
            if (up) {
                this.controlForce.y -= this.JUMP_FORCE;
                //burn = MAX_BURN;
            }
            // if (upDuration>0) this.controlForce.y -= 4000;
        }
        else {
            if (this.left > 0)
                this.controlForce.x -= this.AIR_CONTROL_FORCE;
            if (this.right > 0)
                this.controlForce.x += this.AIR_CONTROL_FORCE;
            var d = 10;
            // if (jumping&&upDuration>1&&upDuration<d) this.controlForce.y -= 800/d;//(d-upDuration);
            // if (up) burn-=10000;
            if (up)
                this.burn = this.MAX_BURN;
            if (upDuration > 0)
                this.burn += this.BASE_FORCE;
        }
        if (this.boost > 0) {
            this.burn = Math.min(this.burn, this.MAX_BURN * this.BOOST_FACTOR);
        }
        else {
            this.burn = Math.min(this.burn, this.MAX_BURN);
        }
        this.controlForce.y -= this.burn;
        this.burn *= 0.95;
        this.isWalking = this.body.onGround && (this.left > 0 || this.right > 0);
        if (this.isWalking) {
            // this.body.material.friction = or iginalFriction/2;
        }
        else {
            // this.body.material.friction = originalFriction*3;
            // originalVelocityClamp
        }
        this.body.addForce(this.controlForce);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CharacterController;



/***/ }),
/* 132 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_Geometry__ = __webpack_require__(133);


class Feeler {
    constructor(angle, length) {
        this.angle = angle;
        this.length = length;
        this.base = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.tip = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.closestIP = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.ip = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
        this.normal = new __WEBPACK_IMPORTED_MODULE_0__geom_Vector2__["a" /* Vector2 */]();
    }
    Reset(unitDirection, position) {
        this.distToClosestIP = Number.POSITIVE_INFINITY;
        this.tip.copy(unitDirection);
        this.base.copy(position);
        if (this.angle != 0) {
            var a = Math.atan2(unitDirection.y, unitDirection.x);
            a += this.angle;
            this.tip.x = Math.cos(a);
            this.tip.y = Math.sin(a);
        }
        this.tip.multEquals(length);
        this.tip.plusEquals(this.base);
        //glaze.debug.DebugEngine.DrawParticle(tip.x,tip.y,4,255,0,0);
    }
    TestSegment(a, b, normal) {
        var distToThisIP = Object(__WEBPACK_IMPORTED_MODULE_1__util_Geometry__["a" /* lineIntersection */])(this.base, this.tip, a, b, this.ip);
        if (distToThisIP > 0 && distToThisIP < this.distToClosestIP) {
            this.distToClosestIP = distToThisIP;
            this.closestIP.copy(this.ip);
            this.normal.copy(normal);
        }
    }
    CalculateForce(force) {
        if (this.distToClosestIP != Number.POSITIVE_INFINITY) {
            //glaze.debug.DebugEngine.DrawParticle(closestIP.x,closestIP.y,4,255,255,255);
            // var sf =  normal.mult( tip.minus( closestIP ).length() );
            var sf = this.tip.clone();
            sf.minusEquals(this.closestIP);
            this.normal.multEquals(sf.length());
            force.plusEquals(this.normal);
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Feeler;



/***/ }),
/* 133 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = lineIntersection;
function lineIntersection(A, B, C, D, point) {
    var rTop = (A.y - C.y) * (D.x - C.x) - (A.x - C.x) * (D.y - C.y);
    var sTop = (A.y - C.y) * (B.x - A.x) - (A.x - C.x) * (B.y - A.y);
    var rBot = (B.x - A.x) * (D.y - C.y) - (B.y - A.y) * (D.x - C.x);
    var sBot = (B.x - A.x) * (D.y - C.y) - (B.y - A.y) * (D.x - C.x);
    if (rBot == 0 || sBot == 0) {
        //lines are parallel
        return -1;
    }
    var r = rTop / rBot;
    var s = sTop / sBot;
    if (r > 0 && r < 1 && s > 0 && s < 1) {
        //A + r * (B - A)
        point.x = A.x + r * (B.x - A.x);
        point.y = A.y + r * (B.y - A.y);
        return A.distSqrd(B) * r;
    }
    return 0;
}


/***/ }),
/* 134 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glaze_physics_Material__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glaze_core_components_Position__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__config_Filters__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__glaze_physics_Body__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__glaze_core_components_Extents__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__glaze_graphics_components_Graphics__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__glaze_physics_components_PhysicsBody__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__glaze_core_components_Moveable__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__glaze_physics_components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__glaze_particle_components_ParticleEmitter__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__glaze_core_components_CollisionCouner__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__glaze_core_components_Health__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__glaze_core_components_Age__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__glaze_core_components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__glaze_util_Ballastics__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__glaze_core_components_Destroy__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__glaze_particle_emitter_Explosion__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__glaze_core_components_State__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__glaze_util_CombatUtils__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__glaze_particle_emitter_FireBall__ = __webpack_require__(135);




















class PlasmaBall {
    static create(engine, position, filter, targetPosition) {
        var bulletBody = new __WEBPACK_IMPORTED_MODULE_3__glaze_physics_Body__["a" /* Body */](__WEBPACK_IMPORTED_MODULE_0__glaze_physics_Material__["a" /* Material */].LIGHTMETAL);
        bulletBody.setMass(0.3);
        bulletBody.setBounces(0);
        bulletBody.globalForceFactor = 0.1; //0.5;
        bulletBody.isBullet = true;
        bulletBody.maxScalarVelocity = 10000;
        filter.categoryBits |= __WEBPACK_IMPORTED_MODULE_2__config_Filters__["a" /* TestFilters */].PROJECTILE_CAT;
        filter.maskBits |= __WEBPACK_IMPORTED_MODULE_2__config_Filters__["a" /* TestFilters */].PROJECTILE_COLLIDABLE_CAT;
        var bullet = engine.createEntity();
        engine.addComponentsToEntity(bullet, [
            position,
            new __WEBPACK_IMPORTED_MODULE_4__glaze_core_components_Extents__["a" /* Extents */](2, 2),
            // new LifeCycle(BULLET_LIFECYCLE),
            new __WEBPACK_IMPORTED_MODULE_5__glaze_graphics_components_Graphics__["a" /* Graphics */]("projectiles", "plasma"),
            new __WEBPACK_IMPORTED_MODULE_6__glaze_physics_components_PhysicsBody__["a" /* PhysicsBody */](bulletBody, true),
            new __WEBPACK_IMPORTED_MODULE_7__glaze_core_components_Moveable__["a" /* Moveable */](),
            new __WEBPACK_IMPORTED_MODULE_8__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */](false, filter, []),
            new __WEBPACK_IMPORTED_MODULE_9__glaze_particle_components_ParticleEmitter__["a" /* ParticleEmitter */]([new __WEBPACK_IMPORTED_MODULE_19__glaze_particle_emitter_FireBall__["a" /* FireBall */](0, 400)]),
            new __WEBPACK_IMPORTED_MODULE_17__glaze_core_components_State__["a" /* State */](PlasmaBall.states, null, false),
            new __WEBPACK_IMPORTED_MODULE_10__glaze_core_components_CollisionCouner__["a" /* CollisionCounter */](1, "destroy"),
            new __WEBPACK_IMPORTED_MODULE_11__glaze_core_components_Health__["a" /* Health */](10, 10, 0, "destroy"),
            new __WEBPACK_IMPORTED_MODULE_12__glaze_core_components_Age__["a" /* Age */](1000, "destroy"),
            new __WEBPACK_IMPORTED_MODULE_13__glaze_core_components_Active__["a" /* Active */](),
        ]);
        __WEBPACK_IMPORTED_MODULE_14__glaze_util_Ballastics__["a" /* Ballistics */].calcProjectileVelocity(bulletBody, targetPosition, 600);
        return bullet;
    }
    static onDestroy(engine, entity) {
        if (engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_15__glaze_core_components_Destroy__["a" /* Destroy */]))
            return;
        engine.addComponentsToEntity(entity, [new __WEBPACK_IMPORTED_MODULE_15__glaze_core_components_Destroy__["a" /* Destroy */](1)]);
        engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_9__glaze_particle_components_ParticleEmitter__["a" /* ParticleEmitter */]).emitters.push(new __WEBPACK_IMPORTED_MODULE_16__glaze_particle_emitter_Explosion__["a" /* Explosion */](10, 50));
        // entity.getComponent(glaze.engine.components.ParticleEmitters).emitters.push(new glaze.particle.emitter.Explosion(10,50));
        // glaze.util.CombatUtils.explode(entity.getComponent(Position).coords,64,10000,entity);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = PlasmaBall;

PlasmaBall.states = {
    alive: function (engine, entity) { },
    destroy: function (engine, entity) {
        if (engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_15__glaze_core_components_Destroy__["a" /* Destroy */]))
            return;
        engine.addComponentsToEntity(entity, [new __WEBPACK_IMPORTED_MODULE_15__glaze_core_components_Destroy__["a" /* Destroy */](1)]);
        engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_9__glaze_particle_components_ParticleEmitter__["a" /* ParticleEmitter */]).emitters.push(new __WEBPACK_IMPORTED_MODULE_16__glaze_particle_emitter_Explosion__["a" /* Explosion */](10, 50));
        __WEBPACK_IMPORTED_MODULE_18__glaze_util_CombatUtils__["a" /* CombatUtils */].explode(engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_1__glaze_core_components_Position__["a" /* Position */]).coords, 100, 10000, entity);
    },
};


/***/ }),
/* 135 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_Random__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__physics_components_PhysicsBody__ = __webpack_require__(6);


class FireBall {
    constructor(rate, speed) {
        this.rate = rate;
        this.speed = speed;
    }
    update(time, c4e, position, particleEngine) {
        const velocity = c4e(__WEBPACK_IMPORTED_MODULE_1__physics_components_PhysicsBody__["a" /* PhysicsBody */]).body.velocity;
        for (let i = 0; i < 5; i++) {
            var angle = Object(__WEBPACK_IMPORTED_MODULE_0__util_Random__["b" /* RandomFloat */])(0, 2 * Math.PI);
            var vx = velocity.x + (Math.cos(angle) * this.speed * Object(__WEBPACK_IMPORTED_MODULE_0__util_Random__["b" /* RandomFloat */])(0, 2));
            var vy = velocity.y + (Math.sin(angle) * this.speed * Object(__WEBPACK_IMPORTED_MODULE_0__util_Random__["b" /* RandomFloat */])(0, 2));
            particleEngine.EmitParticle(position.x, position.y, vx, vy, 0, 0, 100, 0.7, true, true, null, 4, 255, 229, 252, 114);
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = FireBall;



/***/ }),
/* 136 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_components_Extents__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_EnvironmentForce__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_Random__ = __webpack_require__(8);







class EnvironmentForceSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor() {
        super([__WEBPACK_IMPORTED_MODULE_1__components_PhysicsCollision__["a" /* PhysicsCollision */], __WEBPACK_IMPORTED_MODULE_2__core_components_Extents__["a" /* Extents */], __WEBPACK_IMPORTED_MODULE_3__components_EnvironmentForce__["a" /* EnvironmentForce */], __WEBPACK_IMPORTED_MODULE_4__core_components_Active__["a" /* Active */]]);
        this.temp = new __WEBPACK_IMPORTED_MODULE_5__geom_Vector2__["a" /* Vector2 */]();
        this.callback = this.callback.bind(this);
    }
    onEntityAdded(entity, physicsCollision, extents, environmentForce, active) {
        physicsCollision.proxy.contactCallbacks.push(this.callback);
        this.setActiveForce(environmentForce, 0);
    }
    updateEntity(entity, physicsCollision, extents, environmentForce, active) {
        if (environmentForce.ttl > 0) {
            environmentForce.ttl -= this.dt;
            if (environmentForce.ttl <= 0) {
                // Actuate.tween(environmentForce, 1, { power: 0 }).onComplete(this.onFinished, [environmentForce]);
            }
        }
    }
    onFinished(force) {
        force.currentIndex++;
        if (force.currentIndex >= force.data.length)
            force.currentIndex = 0;
        this.setActiveForce(force, force.currentIndex);
    }
    setActiveForce(envForce, index) {
        envForce.currentIndex = index;
        var item = envForce.data[index];
        envForce.direction.copy(item.direction);
        envForce.power = item.maxForce;
        envForce.ttl = item.minDuration == 0 ? -1 : Object(__WEBPACK_IMPORTED_MODULE_6__util_Random__["b" /* RandomFloat */])(item.minDuration * 1000, item.maxDuration * 1000);
    }
    callback(a, b, contact) {
        var area = a.aabb.overlapArea(b.aabb);
        var force = this.engine.getComponentForEntity(a.entity, __WEBPACK_IMPORTED_MODULE_3__components_EnvironmentForce__["a" /* EnvironmentForce */]);
        //TODO SCALE FORCE BY ACTUAL AREA!!!!!!
        this.temp.copy(force.direction);
        // temp.multEquals(force.power/40);
        // temp.multEquals(40*area);
        this.temp.multEquals(force.power * area);
        //trace(force.power);
        b.body.addForce(this.temp);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = EnvironmentForceSystem;



/***/ }),
/* 137 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = createTMXLayerEntities;
function createTMXLayerEntities(engine, layer, factories) {
    layer.objects.forEach(object => {
        const factory = factories.get(object.type);
        if (factory) {
            factory(engine, object);
        }
    });
}


/***/ }),
/* 138 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__TMXComponentUtils__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__physics_components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_components_Fixed__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__physics_components_EnvironmentForce__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_components_Wind__ = __webpack_require__(62);






class ForceFactory {
    static createTMXEntity(engine, object) {
        const entity = engine.createEntity();
        var components = [];
        components.push(Object(__WEBPACK_IMPORTED_MODULE_0__TMXComponentUtils__["b" /* TMXObjectPosition */])(object));
        components.push(Object(__WEBPACK_IMPORTED_MODULE_0__TMXComponentUtils__["a" /* TMXObjectExtents */])(object));
        components.push(new __WEBPACK_IMPORTED_MODULE_1__physics_components_PhysicsCollision__["a" /* PhysicsCollision */](true, null, []));
        components.push(new __WEBPACK_IMPORTED_MODULE_2__core_components_Fixed__["a" /* Fixed */]());
        components.push(new __WEBPACK_IMPORTED_MODULE_3__core_components_Active__["a" /* Active */]());
        var forceDataArray = [];
        for (var i = 0; i < 10; i++) {
            var raw = object.properties["config" + i];
            if (raw != null) {
                const config = raw.split(",").map(parseFloat);
                forceDataArray.push(new __WEBPACK_IMPORTED_MODULE_4__physics_components_EnvironmentForce__["b" /* ForceData */](config[0], config[1] * ForceFactory.FORCE_SCALE, config[2] * ForceFactory.FORCE_SCALE, config[3], config[4]));
            }
        }
        components.push(new __WEBPACK_IMPORTED_MODULE_4__physics_components_EnvironmentForce__["a" /* EnvironmentForce */](forceDataArray));
        components.push(new __WEBPACK_IMPORTED_MODULE_5__core_components_Wind__["a" /* Wind */](1 / 1000));
        engine.addComponentsToEntity(entity, components);
        return entity;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ForceFactory;

ForceFactory.FORCE_SCALE = 1 / 100;
ForceFactory.mapping = "Force";


/***/ }),
/* 139 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__physics_components_PhysicsBody__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_Steering__ = __webpack_require__(27);




class SteeringSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor(map) {
        super([__WEBPACK_IMPORTED_MODULE_2__physics_components_PhysicsBody__["a" /* PhysicsBody */], __WEBPACK_IMPORTED_MODULE_3__components_Steering__["a" /* Steering */]]);
        this.behaviorForce = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */]();
        this.totalForce = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */]();
        this.map = map;
    }
    updateEntity(entity, physicsBody, steering) {
        if (steering.hasChanged) {
            steering.steeringParameters.map = this.map;
            steering.behaviors.sort(this.behaviorsCompare);
            steering.hasChanged = false;
        }
        this.runningSum(steering, physicsBody.body);
        physicsBody.body.addProportionalForce(this.totalForce);
    }
    runningSum(steering, agent) {
        this.totalForce.setTo(0, 0);
        for (var i = 0; i < steering.behaviors.length; i++) {
            const behavior = steering.behaviors[i];
            if (behavior.active) {
                this.behaviorForce.setTo(0, 0);
                behavior.calculate(agent, steering.steeringParameters, this.behaviorForce);
                this.behaviorForce.multEquals(behavior.weight);
                this.totalForce.plusEquals(this.behaviorForce);
            }
        }
        this.totalForce.clampScalar(steering.steeringParameters.maxAcceleration);
    }
    behaviorsCompare(a, b) {
        if (a.priority < b.priority)
            return -1;
        if (a.priority == b.priority)
            return 0;
        return 1;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SteeringSystem;



/***/ }),
/* 140 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_BeeHive__ = __webpack_require__(63);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glaze_core_components_Viewable__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__glaze_core_components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__glaze_ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__glaze_util_Random__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__factories_character_BeeFactory__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__glaze_core_components_Position__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__glaze_core_components_State__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__glaze_core_state_EntityStates__ = __webpack_require__(65);









class BeeHiveSystem extends __WEBPACK_IMPORTED_MODULE_3__glaze_ecs_System__["a" /* System */] {
    constructor() {
        super([__WEBPACK_IMPORTED_MODULE_0__components_BeeHive__["a" /* BeeHive */], __WEBPACK_IMPORTED_MODULE_1__glaze_core_components_Viewable__["a" /* Viewable */], __WEBPACK_IMPORTED_MODULE_2__glaze_core_components_Active__["a" /* Active */]]);
    }
    onEntityRemoved(entity, beehive, viewable, active) {
        beehive.group.members.forEach(bee => {
            // this.engine.destroyEntity(bee);
            const state = this.engine.getComponentForEntity(bee, __WEBPACK_IMPORTED_MODULE_7__glaze_core_components_State__["a" /* State */]);
            state.setState(__WEBPACK_IMPORTED_MODULE_8__glaze_core_state_EntityStates__["a" /* EntityState */].Destroy);
        });
    }
    updateEntity(entity, beehive, viewable, active) {
        if (beehive.group.hasCapacity()) {
            if (Object(__WEBPACK_IMPORTED_MODULE_4__glaze_util_Random__["a" /* RandomBoolean */])(0.01)) {
                var newBee = __WEBPACK_IMPORTED_MODULE_5__factories_character_BeeFactory__["a" /* BeeFactory */].create(this.engine, this.engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_6__glaze_core_components_Position__["a" /* Position */]).clone());
                const state = this.engine.getComponentForEntity(newBee, __WEBPACK_IMPORTED_MODULE_7__glaze_core_components_State__["a" /* State */]);
                // newBee.parent = entity;
                beehive.group.addMember(newBee, state);
            }
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = BeeHiveSystem;



/***/ }),
/* 141 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glaze_ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glaze_core_components_Position__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_BirdNest__ = __webpack_require__(66);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__glaze_core_components_Viewable__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__glaze_core_components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__glaze_core_components_Extents__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__glaze_physics_components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__glaze_core_components_Fixed__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__factories_character_BirdFactory__ = __webpack_require__(142);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__glaze_util_CombatUtils__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__glaze_core_components_State__ = __webpack_require__(7);











class BirdNestSystem extends __WEBPACK_IMPORTED_MODULE_0__glaze_ecs_System__["a" /* System */] {
    constructor() {
        super([__WEBPACK_IMPORTED_MODULE_1__glaze_core_components_Position__["a" /* Position */], __WEBPACK_IMPORTED_MODULE_2__components_BirdNest__["a" /* BirdNest */], __WEBPACK_IMPORTED_MODULE_3__glaze_core_components_Viewable__["a" /* Viewable */], __WEBPACK_IMPORTED_MODULE_4__glaze_core_components_Active__["a" /* Active */]]);
    }
    onEntityAdded(entity, position, birdNest, viewable, active) {
        birdNest.trigger = this.engine.createEntity();
        this.engine.addComponentsToEntity(birdNest.trigger, [
            position,
            new __WEBPACK_IMPORTED_MODULE_5__glaze_core_components_Extents__["a" /* Extents */](birdNest.radius / 2, birdNest.radius / 2),
            new __WEBPACK_IMPORTED_MODULE_6__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */](true, null, [this.triggerCallback]),
            new __WEBPACK_IMPORTED_MODULE_7__glaze_core_components_Fixed__["a" /* Fixed */](),
            new __WEBPACK_IMPORTED_MODULE_4__glaze_core_components_Active__["a" /* Active */](),
        ]);
        // entity.addChildEntity(nest.trigger);
    }
    updateEntity(entity, position, birdNest, viewable, active) {
        if (birdNest.intervalDelay.tick(this.dt)) {
            var target = this.evaluateTargets(entity);
            if (target >= 0) {
                this.releaseBird(entity, target);
            }
        }
        if (birdNest.triggered) {
            birdNest.triggered = false;
        }
        else {
        }
    }
    triggerCallback(a, b, contact) {
        // a.entity.parent.getComponent(BirdNest).triggered = true;
        // console.log("trigger");
    }
    evaluateTargets(entity) {
        const position = this.engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_1__glaze_core_components_Position__["a" /* Position */]);
        var entities = __WEBPACK_IMPORTED_MODULE_9__glaze_util_CombatUtils__["a" /* CombatUtils */].SearchSortAndFilter(position.coords, 200, entity, __WEBPACK_IMPORTED_MODULE_9__glaze_util_CombatUtils__["b" /* EntityFilterOptions */].ALL).entities;
        return entities.length > 0 ? entities[0].entity : -1;
    }
    releaseBird(entity, target) {
        var nest = this.engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_2__components_BirdNest__["a" /* BirdNest */]);
        if (nest.group.hasCapacity()) {
            const position = this.engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_1__glaze_core_components_Position__["a" /* Position */]);
            var bird = __WEBPACK_IMPORTED_MODULE_8__factories_character_BirdFactory__["a" /* BirdFactory */].create(this.engine, position.clone(), position, entity);
            const state = this.engine.getComponentForEntity(bird, __WEBPACK_IMPORTED_MODULE_10__glaze_core_components_State__["a" /* State */]);
            nest.group.addMember(entity, state);
            // nest.birds.push(bird);
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = BirdNestSystem;



/***/ }),
/* 142 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glaze_physics_Body__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glaze_physics_Material__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__glaze_core_components_Extents__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__glaze_graphics_components_Graphics__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__glaze_graphics_components_GraphicsAnimation__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__glaze_physics_components_PhysicsBody__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__glaze_physics_components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__glaze_core_components_Moveable__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__glaze_core_components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__glaze_ai_steering_components_Steering__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__glaze_ai_steering_behaviors_Wander__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__glaze_core_components_Age__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__glaze_core_components_Health__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__glaze_core_components_Destroy__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__components_Bird__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__glaze_ai_steering_behaviors_Arrival__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__glaze_ai_steering_behaviors_WallAvoidance__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__glaze_core_components_State__ = __webpack_require__(7);


















class BirdFactory {
    static create(engine, position, follow, nest) {
        var birdBody = new __WEBPACK_IMPORTED_MODULE_0__glaze_physics_Body__["a" /* Body */](new __WEBPACK_IMPORTED_MODULE_1__glaze_physics_Material__["a" /* Material */]());
        birdBody.setMass(1);
        birdBody.setBounces(0);
        birdBody.globalForceFactor = 0.0;
        birdBody.maxScalarVelocity = 200;
        var bee = engine.createEntity();
        engine.addComponentsToEntity(bee, [
            position,
            new __WEBPACK_IMPORTED_MODULE_14__components_Bird__["a" /* Bird */](nest),
            new __WEBPACK_IMPORTED_MODULE_2__glaze_core_components_Extents__["a" /* Extents */](4 * 1, 4 * 1),
            new __WEBPACK_IMPORTED_MODULE_3__glaze_graphics_components_Graphics__["a" /* Graphics */]("bird"),
            new __WEBPACK_IMPORTED_MODULE_5__glaze_physics_components_PhysicsBody__["a" /* PhysicsBody */](birdBody, false),
            new __WEBPACK_IMPORTED_MODULE_7__glaze_core_components_Moveable__["a" /* Moveable */](),
            new __WEBPACK_IMPORTED_MODULE_6__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */](false, null, []),
            new __WEBPACK_IMPORTED_MODULE_4__glaze_graphics_components_GraphicsAnimation__["a" /* GraphicsAnimation */]("bird", "fly"),
            // new Light(64,1,1,1,255,255,0),
            new __WEBPACK_IMPORTED_MODULE_9__glaze_ai_steering_components_Steering__["a" /* Steering */]([
                new __WEBPACK_IMPORTED_MODULE_10__glaze_ai_steering_behaviors_Wander__["a" /* Wander */](55, 80, 0.3),
                new __WEBPACK_IMPORTED_MODULE_15__glaze_ai_steering_behaviors_Arrival__["a" /* Arrival */](follow.coords, 256),
                //,new Seek(follow.coords,32)
                // new Arrival(follow.coords,128,32)
                new __WEBPACK_IMPORTED_MODULE_16__glaze_ai_steering_behaviors_WallAvoidance__["a" /* WallAvoidance */](60),
            ]),
            new __WEBPACK_IMPORTED_MODULE_17__glaze_core_components_State__["a" /* State */](BirdFactory.states, null, false),
            new __WEBPACK_IMPORTED_MODULE_11__glaze_core_components_Age__["a" /* Age */](15000, "destroy"),
            new __WEBPACK_IMPORTED_MODULE_12__glaze_core_components_Health__["a" /* Health */](10, 10, 0, "destroy"),
            new __WEBPACK_IMPORTED_MODULE_8__glaze_core_components_Active__["a" /* Active */](),
        ]);
        return bee;
    }
    static onDestroy(engine, entity) {
        if (engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_13__glaze_core_components_Destroy__["a" /* Destroy */]))
            return;
        engine.addComponentsToEntity(entity, [new __WEBPACK_IMPORTED_MODULE_13__glaze_core_components_Destroy__["a" /* Destroy */](1)]);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = BirdFactory;

BirdFactory.states = {
    destroy: function (engine, entity) {
        if (engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_13__glaze_core_components_Destroy__["a" /* Destroy */]))
            return;
        engine.addComponentsToEntity(entity, [new __WEBPACK_IMPORTED_MODULE_13__glaze_core_components_Destroy__["a" /* Destroy */](1)]);
    }
};


/***/ }),
/* 143 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class LightStackStateMachine {
    constructor() {
        this.stack = new Array();
    }
    update(target, delta) {
        var currentState = this.getCurrentState();
        if (currentState != null) {
            currentState(target, this, delta);
        }
    }
    popState() {
        var state = this.stack.pop();
        return state;
    }
    popAllStates() {
        while (this.stack.length > 0)
            this.popState();
    }
    pushState(state) {
        this.stack.push(state);
    }
    setState(state) {
        this.popState();
        this.pushState(state);
    }
    resetState(state) {
        this.popAllStates();
        this.pushState(state);
    }
    getCurrentState() {
        return this.stack.length > 0 ? this.stack[this.stack.length - 1] : null;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = LightStackStateMachine;



/***/ }),
/* 144 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glaze_ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_Bird__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__glaze_physics_components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__glaze_core_components_Health__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__glaze_ai_steering_components_Steering__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__glaze_util_CombatUtils__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__glaze_ai_steering_behaviors_Arrival__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__glaze_ai_steering_behaviors_Wander__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__glaze_core_components_Position__ = __webpack_require__(3);









class BirdSystem extends __WEBPACK_IMPORTED_MODULE_0__glaze_ecs_System__["a" /* System */] {
    constructor(bfAreaQuery) {
        super([__WEBPACK_IMPORTED_MODULE_1__components_Bird__["a" /* Bird */], __WEBPACK_IMPORTED_MODULE_2__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */], __WEBPACK_IMPORTED_MODULE_3__glaze_core_components_Health__["a" /* Health */], __WEBPACK_IMPORTED_MODULE_4__glaze_ai_steering_components_Steering__["a" /* Steering */]]);
        this.bfAreaQuery = bfAreaQuery;
        this.baseState = this.baseState.bind(this);
        this.seekState = this.seekState.bind(this);
    }
    onEntityAdded(entity, bird, physicsCollision, health, steering) {
        bird.ai.pushState(this.baseState);
    }
    updateEntity(entity, bird, physicsCollision, health, steering) {
        bird.ai.update(entity, this.dt);
    }
    baseState(entity, fsm, delta) {
        const bird = this.engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_1__components_Bird__["a" /* Bird */]);
        if (bird.delay.tick(delta)) {
            fsm.pushState(this.seekState);
        }
    }
    seekState(entity, fsm, delta) {
        const position = this.engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_8__glaze_core_components_Position__["a" /* Position */]);
        //Find enemies within 300 units
        var entities = __WEBPACK_IMPORTED_MODULE_5__glaze_util_CombatUtils__["a" /* CombatUtils */].SearchSortAndFilter(position.coords, 300, entity, __WEBPACK_IMPORTED_MODULE_5__glaze_util_CombatUtils__["b" /* EntityFilterOptions */].ALL).entities;
        //Found something
        if (entities.length > 0) {
            var bird = this.engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_1__components_Bird__["a" /* Bird */]);
            bird.target = entities[0].entity;
            var steering = this.engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_4__glaze_ai_steering_components_Steering__["a" /* Steering */]);
            var arrival = steering.getBehaviour(__WEBPACK_IMPORTED_MODULE_6__glaze_ai_steering_behaviors_Arrival__["a" /* Arrival */]);
            arrival.target = this.engine.getComponentForEntity(bird.target, __WEBPACK_IMPORTED_MODULE_8__glaze_core_components_Position__["a" /* Position */]).coords;
            arrival.arrivalZone = 1;
            var wander = steering.getBehaviour(__WEBPACK_IMPORTED_MODULE_7__glaze_ai_steering_behaviors_Wander__["a" /* Wander */]);
            wander.active = false;
            fsm.popState();
            fsm.pushState(this.chaseState);
            return;
        }
        fsm.popState();
    }
    chaseState(entity, fsm, delta) { }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = BirdSystem;



/***/ }),
/* 145 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__physics_components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_Extents__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_Water__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_Random__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__components_Viewable__ = __webpack_require__(15);







class WaterSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor(particleEngine) {
        super([__WEBPACK_IMPORTED_MODULE_1__physics_components_PhysicsCollision__["a" /* PhysicsCollision */], __WEBPACK_IMPORTED_MODULE_2__components_Extents__["a" /* Extents */], __WEBPACK_IMPORTED_MODULE_3__components_Water__["a" /* Water */]]);
        this.particleEngine = particleEngine;
        this.cycle = 0;
        this.callback = this.callback.bind(this);
    }
    onEntityAdded(entity, physicsCollision, extents, water) {
        // var cb2 = new Signal();
        // cb2.add(this.callback);
        this.engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_1__physics_components_PhysicsCollision__["a" /* PhysicsCollision */]).proxy.contactCallbacks.push(this.callback);
    }
    updateAllEntities() {
        this.cycle = (Math.PI * 2 / 1000 * this.timestamp) % 1000;
    }
    callback(a, b, contact) {
        var area = a.aabb.overlapArea(b.aabb);
        b.body.damping = 0.9;
        // b.body.addForce(new Vector2(0, -area * 5));
        b.body.addForce(new __WEBPACK_IMPORTED_MODULE_4__geom_Vector2__["a" /* Vector2 */](0, -area * (4.5 + Math.sin(this.cycle) * 0.5)));
        // trace(-area*0.05,b.body.mass);
        if (!b.body.inWaterPrev) {
            this.particleEngine.EmitParticle(Object(__WEBPACK_IMPORTED_MODULE_5__util_Random__["b" /* RandomFloat */])(b.aabb.l, b.aabb.r), a.aabb.t, Object(__WEBPACK_IMPORTED_MODULE_5__util_Random__["b" /* RandomFloat */])(-20, 20), Object(__WEBPACK_IMPORTED_MODULE_5__util_Random__["b" /* RandomFloat */])(-5, -15), 0, 1, 500, 1, true, true, null, 4, 255, 255, 255, 255);
            this.particleEngine.EmitParticle(Object(__WEBPACK_IMPORTED_MODULE_5__util_Random__["b" /* RandomFloat */])(b.aabb.l, b.aabb.r), a.aabb.t, Object(__WEBPACK_IMPORTED_MODULE_5__util_Random__["b" /* RandomFloat */])(-20, 20), Object(__WEBPACK_IMPORTED_MODULE_5__util_Random__["b" /* RandomFloat */])(-5, -15), 0, 1, 500, 1, true, true, null, 4, 255, 255, 255, 255);
            this.particleEngine.EmitParticle(Object(__WEBPACK_IMPORTED_MODULE_5__util_Random__["b" /* RandomFloat */])(b.aabb.l, b.aabb.r), a.aabb.t, Object(__WEBPACK_IMPORTED_MODULE_5__util_Random__["b" /* RandomFloat */])(-20, 20), Object(__WEBPACK_IMPORTED_MODULE_5__util_Random__["b" /* RandomFloat */])(-5, -15), 0, 1, 500, 1, true, true, null, 4, 255, 255, 255, 255);
        }
        else if (b.aabb.t < a.aabb.t) {
            if (Object(__WEBPACK_IMPORTED_MODULE_5__util_Random__["a" /* RandomBoolean */])(0.1) && this.engine.getComponentForEntity(a.entity, __WEBPACK_IMPORTED_MODULE_6__components_Viewable__["a" /* Viewable */]) != null) {
                this.particleEngine.EmitParticle(Object(__WEBPACK_IMPORTED_MODULE_5__util_Random__["b" /* RandomFloat */])(b.aabb.l, b.aabb.r), a.aabb.t, Object(__WEBPACK_IMPORTED_MODULE_5__util_Random__["b" /* RandomFloat */])(-20, 20), Object(__WEBPACK_IMPORTED_MODULE_5__util_Random__["b" /* RandomFloat */])(-5, -15), 0, 1, 500, 1, true, true, null, 4, 255, 255, 255, 255);
            }
        }
        b.body.inWater = true;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = WaterSystem;



/***/ }),
/* 146 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_Extents__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__physics_components_EnvironmentForce__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_Wind__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_Viewable__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__physics_components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__util_Random__ = __webpack_require__(8);








class WindSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor(particleEngine, tileSize) {
        super([__WEBPACK_IMPORTED_MODULE_1__components_Extents__["a" /* Extents */], __WEBPACK_IMPORTED_MODULE_2__physics_components_EnvironmentForce__["a" /* EnvironmentForce */], __WEBPACK_IMPORTED_MODULE_3__components_Wind__["a" /* Wind */], __WEBPACK_IMPORTED_MODULE_4__components_Viewable__["a" /* Viewable */], __WEBPACK_IMPORTED_MODULE_5__physics_components_PhysicsCollision__["a" /* PhysicsCollision */], __WEBPACK_IMPORTED_MODULE_6__components_Active__["a" /* Active */]]);
        this.particleEngine = particleEngine;
        this.tileSize = tileSize;
    }
    onEntityAdded(entity, extents, environmentForce, wind, viewable, physicsCollision, active) {
        //  public  entityAdded(entity:Entity) {
        var units = extents.halfWidths.x * extents.halfWidths.y * 4 / (this.tileSize * this.tileSize);
        wind.incPerFrame = wind.particlePerUnitPerFrame * units;
    }
    updateEntity(entity, extents, environmentForce, wind, viewable, physicsCollision, active) {
        wind.particleCount += wind.incPerFrame;
        while (wind.particleCount > 1) {
            this.particleEngine.EmitParticle(Object(__WEBPACK_IMPORTED_MODULE_7__util_Random__["b" /* RandomFloat */])(physicsCollision.proxy.aabb.l, physicsCollision.proxy.aabb.r), Object(__WEBPACK_IMPORTED_MODULE_7__util_Random__["b" /* RandomFloat */])(physicsCollision.proxy.aabb.t, physicsCollision.proxy.aabb.b), environmentForce.direction.x * environmentForce.power * 50, environmentForce.direction.y * environmentForce.power * 50, 0, 1, Object(__WEBPACK_IMPORTED_MODULE_7__util_Random__["c" /* RandomInteger */])(200, 400), 1, true, true, null, 4, 255, 255, 255, 255);
            //particleEngine.EmitParticle(RandomFloat(proxy.aabb.l,proxy.aabb.r),RandomFloat(proxy.aabb.t,proxy.aabb.b),RandomFloat(-20,20),RandomFloat(-20,20),0,1,1000,1,true,true,null,4,255,255,255,255);
            wind.particleCount--;
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = WindSystem;



/***/ }),
/* 147 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__TMXComponentUtils__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__physics_components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_components_Fixed__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_components_Water__ = __webpack_require__(69);





class WaterFactory {
    static createTMXEntity(engine, object) {
        const entity = engine.createEntity();
        var components = [];
        components.push(Object(__WEBPACK_IMPORTED_MODULE_0__TMXComponentUtils__["b" /* TMXObjectPosition */])(object));
        components.push(Object(__WEBPACK_IMPORTED_MODULE_0__TMXComponentUtils__["a" /* TMXObjectExtents */])(object));
        components.push(new __WEBPACK_IMPORTED_MODULE_1__physics_components_PhysicsCollision__["a" /* PhysicsCollision */](true, null, []));
        components.push(new __WEBPACK_IMPORTED_MODULE_2__core_components_Fixed__["a" /* Fixed */]());
        components.push(new __WEBPACK_IMPORTED_MODULE_3__core_components_Active__["a" /* Active */]());
        components.push(new __WEBPACK_IMPORTED_MODULE_4__core_components_Water__["a" /* Water */]());
        // var forceDataArray: Array<ForceData> = [];
        // for (var i = 0; i < 10; i++) {
        //     var raw = object.properties["config" + i] as string;
        //     if (raw != null) {
        //         const config = raw.split(",").map(parseFloat);
        //         forceDataArray.push(
        //             new ForceData(
        //                 config[0],
        //                 config[1] * ForceFactory.FORCE_SCALE,
        //                 config[2] * ForceFactory.FORCE_SCALE,
        //                 config[3],
        //                 config[4],
        //             ),
        //         );
        //     }
        // }
        // components.push(new EnvironmentForce(forceDataArray));
        // components.push(new Wind(1/1000));
        // const force = engine.createEntity();
        // engine.addComponentsToEntity(force,components)
        engine.addComponentsToEntity(entity, components);
        return entity;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = WaterFactory;

WaterFactory.mapping = "Water";


/***/ }),
/* 148 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glaze_graphics_components_TileGraphics__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glaze_physics_components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__glaze_core_components_Fixed__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_Door__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__glaze_core_components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__glaze_tmx_TMXComponentUtils__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__glaze_physics_collision_Filter__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__config_Filters__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__glaze_core_components_State__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__glaze_core_components_StateUpdater__ = __webpack_require__(46);










class DoorFactory {
    static create(engine, position, extents, open, closed) {
        var door = engine.createEntity();
        var filter = new __WEBPACK_IMPORTED_MODULE_6__glaze_physics_collision_Filter__["a" /* Filter */]();
        filter.groupIndex = __WEBPACK_IMPORTED_MODULE_7__config_Filters__["a" /* TestFilters */].SOLID_OBJECT_GROUP;
        engine.addComponentsToEntity(door, [
            position,
            extents,
            new __WEBPACK_IMPORTED_MODULE_0__glaze_graphics_components_TileGraphics__["a" /* TileGraphics */](closed),
            new __WEBPACK_IMPORTED_MODULE_1__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */](false, null, []),
            new __WEBPACK_IMPORTED_MODULE_2__glaze_core_components_Fixed__["a" /* Fixed */](),
            new __WEBPACK_IMPORTED_MODULE_3__components_Door__["a" /* Door */]("door", false, ""),
            // new State(['closed','open'],0,["doorA"]),
            new __WEBPACK_IMPORTED_MODULE_8__glaze_core_components_State__["a" /* State */](DoorFactory.states, "open", true),
            new __WEBPACK_IMPORTED_MODULE_9__glaze_core_components_StateUpdater__["a" /* StateUpdater */]("doorA", ["open", "close"]),
            new __WEBPACK_IMPORTED_MODULE_4__glaze_core_components_Active__["a" /* Active */](),
        ]);
        return door;
    }
    static onDestroy(engine, entity) { }
    static createTMXEntity(engine, object) {
        const extents = Object(__WEBPACK_IMPORTED_MODULE_5__glaze_tmx_TMXComponentUtils__["a" /* TMXObjectExtents */])(object);
        extents.halfWidths.x /= 2;
        return DoorFactory.create(engine, Object(__WEBPACK_IMPORTED_MODULE_5__glaze_tmx_TMXComponentUtils__["b" /* TMXObjectPosition */])(object), extents, "doorOpen", "doorClosed");
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DoorFactory;

DoorFactory.mapping = "door";
DoorFactory.states = {
    open: function (engine, entity) {
        var door = engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_3__components_Door__["a" /* Door */]);
        var tileDisplay = engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_0__glaze_graphics_components_TileGraphics__["a" /* TileGraphics */]);
        tileDisplay.setTileFrameId(door.type + "Open");
        var pc = engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_1__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */]);
        pc.proxy.responseBias.x = 0;
        pc.proxy.isActive = false;
    },
    close: function (engine, entity) {
        var door = engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_3__components_Door__["a" /* Door */]);
        var tileDisplay = engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_0__glaze_graphics_components_TileGraphics__["a" /* TileGraphics */]);
        tileDisplay.setTileFrameId(door.type + "Closed");
        var pc = engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_1__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */]);
        pc.proxy.responseBias.x = 1;
        pc.proxy.isActive = true;
    },
};


/***/ }),
/* 149 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_State__ = __webpack_require__(7);


class StateSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor() {
        super([__WEBPACK_IMPORTED_MODULE_1__components_State__["a" /* State */]]);
        this.updates = new Array();
    }
    onEntityAdded(entity, state) {
        state.onChange = this.onChange.bind(this, entity);
    }
    onEntityRemoved(entity, state) { }
    updateAllEntities() {
        while (this.updates.length > 0) {
            var entity = this.updates.pop();
            var state = this.engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_1__components_State__["a" /* State */]);
            if (state === null || state.currentState === null)
                return;
            // if (state.states[state.currentState]) {
            state.states[state.currentState](this.engine, entity);
            state.messages.dispatch(entity, state.currentState);
            // } else {
            //     debugger;
            // }
        }
    }
    onChange(entity) {
        this.updates.push(entity);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = StateSystem;



/***/ }),
/* 150 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__signals_Signal__ = __webpack_require__(24);

class MessageBus {
    constructor() {
        this.bus = new Map();
    }
    registerChannels(channels, listener) {
        channels.forEach(name => {
            if (!this.bus.has(name)) {
                this.bus.set(name, new __WEBPACK_IMPORTED_MODULE_0__signals_Signal__["a" /* Signal */]());
            }
            this.bus.get(name).add(listener);
        });
    }
    unregisterChannels(channels, listener) {
        channels.forEach(name => {
            if (this.bus.has(name)) {
                this.bus.get(name).remove(listener);
            }
        });
    }
    trigger(channel, data) {
        if (this.bus.has(channel)) {
            this.bus.get(channel).dispatch(data);
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = MessageBus;



/***/ }),
/* 151 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_State__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_StateUpdater__ = __webpack_require__(46);



class StateUpdateSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor(bus) {
        super([__WEBPACK_IMPORTED_MODULE_1__components_State__["a" /* State */], __WEBPACK_IMPORTED_MODULE_2__components_StateUpdater__["a" /* StateUpdater */]]);
        this.bus = bus;
    }
    onEntityAdded(entity, state, stateUpdater) {
        stateUpdater.onChange = this.onChange.bind(this, entity);
        this.bus.registerChannels([stateUpdater.channel], stateUpdater.onChange);
    }
    onEntityRemoved(entity, state, stateUpdater) {
        this.bus.unregisterChannels([stateUpdater.channel], stateUpdater.onChange);
    }
    updateAllEntities() { }
    onChange(entity) {
        var state = this.engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_1__components_State__["a" /* State */]);
        var stateUpdater = this.engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_2__components_StateUpdater__["a" /* StateUpdater */]);
        let currentIndex = stateUpdater.sequence.indexOf(state.currentState);
        const nextState = ++currentIndex % stateUpdater.sequence.length;
        state.setState(stateUpdater.sequence[nextState]);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = StateUpdateSystem;



/***/ }),
/* 152 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__HTMLUtils__ = __webpack_require__(153);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__test_components_Player__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_components_Position__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__test_factories_character_ChickenFactory__ = __webpack_require__(154);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__physics_components_PhysicsBody__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_Random__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__GlazeEngine__ = __webpack_require__(30);








const listenDebugButtons = (engine) => {
    document.getElementById("debugDump").addEventListener("click", () => {
        const targetNode = document.getElementById("debugResult");
        const htmlDump = Object(__WEBPACK_IMPORTED_MODULE_0__HTMLUtils__["a" /* engineToHTML */])(engine, 0, 100);
        targetNode.innerHTML = htmlDump;
    });
    document.getElementById("debugChickens").addEventListener("click", () => {
        const player = engine.query([__WEBPACK_IMPORTED_MODULE_1__test_components_Player__["a" /* Player */]])[0];
        const position = engine.getComponentForEntity(player, __WEBPACK_IMPORTED_MODULE_2__core_components_Position__["a" /* Position */]);
        for (let i = 0; i < 10; i++) {
            const chicken = __WEBPACK_IMPORTED_MODULE_3__test_factories_character_ChickenFactory__["a" /* ChickenFactory */].create(engine, position.clone());
            const physics = engine.getComponentForEntity(chicken, __WEBPACK_IMPORTED_MODULE_4__physics_components_PhysicsBody__["a" /* PhysicsBody */]);
            physics.body.addForce(new __WEBPACK_IMPORTED_MODULE_5__geom_Vector2__["a" /* Vector2 */](Object(__WEBPACK_IMPORTED_MODULE_6__util_Random__["c" /* RandomInteger */])(-100000, 100000), Object(__WEBPACK_IMPORTED_MODULE_6__util_Random__["c" /* RandomInteger */])(-100000, -5000)));
        }
    });
    document.getElementById("debugDraw").addEventListener("click", (event) => {
        __WEBPACK_IMPORTED_MODULE_7__GlazeEngine__["a" /* GlazeEngine */].params.debug = event.target.checked;
    });
};
/* harmony export (immutable) */ __webpack_exports__["a"] = listenDebugButtons;



/***/ }),
/* 153 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const engineToHTML = (engine, start, count) => {
    const keys = [...engine.components.keys()].sort();
    return [
        `<table class="table table-header-rotated">`,
        header(keys),
        `<tbody>`,
        getEntityRange(start, count, keys, engine.components),
        `</tbody>`,
    ].join("");
};
/* harmony export (immutable) */ __webpack_exports__["a"] = engineToHTML;

const header = (keys) => {
    return [
        `<thead>`,
        `<tr>`,
        `<th></th>`,
        keys.map(key => `<th class="rotate"><div><span>${key}</span></div></th>`).join(""),
        `</tr>`,
        `</thead>`,
    ].join("");
};
const getEntityRange = (start, count, keys, components) => {
    const result = [];
    for (let entity = start; entity < start + count; entity++) {
        result.push(entityRow(entity, keys, components));
    }
    return result.join("");
};
const entityRow = (entity, keys, components) => {
    return [
        `<tr>`,
        `<th class="row-header">${entity}</th>`,
        keys.map(key => (components.get(key)[entity] === null ? "<td></td>" : "<td>X</td>")).join(""),
        `</tr>`,
    ].join("");
};


/***/ }),
/* 154 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glaze_core_components_Destroy__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glaze_physics_Material__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__glaze_physics_Body__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__glaze_core_components_Extents__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__glaze_graphics_components_Graphics__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__glaze_graphics_components_GraphicsAnimation__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__glaze_physics_components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__glaze_physics_components_PhysicsBody__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__glaze_core_components_Moveable__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__glaze_core_components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__glaze_graphics_components_Light__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__glaze_core_components_Viewable__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__glaze_physics_collision_Filter__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__components_Chicken__ = __webpack_require__(71);














class ChickenFactory {
    static create(engine, position) {
        const chicken = engine.createEntity();
        var chickenBody = new __WEBPACK_IMPORTED_MODULE_2__glaze_physics_Body__["a" /* Body */](__WEBPACK_IMPORTED_MODULE_1__glaze_physics_Material__["a" /* Material */].RUBBER);
        chickenBody.setMass(0.1);
        chickenBody.setBounces(7);
        chickenBody.maxScalarVelocity = 1000;
        engine.addComponentsToEntity(chicken, [
            new __WEBPACK_IMPORTED_MODULE_13__components_Chicken__["a" /* Chicken */](),
            position,
            new __WEBPACK_IMPORTED_MODULE_3__glaze_core_components_Extents__["a" /* Extents */](12, 12),
            new __WEBPACK_IMPORTED_MODULE_4__glaze_graphics_components_Graphics__["a" /* Graphics */]("chicken"),
            new __WEBPACK_IMPORTED_MODULE_5__glaze_graphics_components_GraphicsAnimation__["a" /* GraphicsAnimation */]("chicken", "walk"),
            new __WEBPACK_IMPORTED_MODULE_6__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */](false, new __WEBPACK_IMPORTED_MODULE_12__glaze_physics_collision_Filter__["a" /* Filter */](), []),
            new __WEBPACK_IMPORTED_MODULE_7__glaze_physics_components_PhysicsBody__["a" /* PhysicsBody */](chickenBody, true),
            new __WEBPACK_IMPORTED_MODULE_8__glaze_core_components_Moveable__["a" /* Moveable */](),
            new __WEBPACK_IMPORTED_MODULE_9__glaze_core_components_Active__["a" /* Active */](),
            new __WEBPACK_IMPORTED_MODULE_10__glaze_graphics_components_Light__["a" /* Light */](64, 1, 1, 1, 255, 255, 255),
            new __WEBPACK_IMPORTED_MODULE_11__glaze_core_components_Viewable__["a" /* Viewable */](),
        ]);
        return chicken;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ChickenFactory;

ChickenFactory.states = {
    destroy: function (engine, entity) {
        if (engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_0__glaze_core_components_Destroy__["a" /* Destroy */]))
            return;
        engine.addComponentsToEntity(entity, [new __WEBPACK_IMPORTED_MODULE_0__glaze_core_components_Destroy__["a" /* Destroy */](1)]);
    },
};


/***/ }),
/* 155 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__DynamicTree__ = __webpack_require__(156);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geom_AABB2__ = __webpack_require__(11);


class DynamicTreeBroadphase {
    constructor(map) {
        this.map = map;
        this.staticProxies = new Array();
        this.dynamicProxies = new Array();
        this.sleepingProxies = new Array();
        this.tree = new __WEBPACK_IMPORTED_MODULE_0__DynamicTree__["a" /* DynamicTree */]();
    }
    addProxy(proxy) {
        var target = proxy.isStatic ? this.staticProxies : this.dynamicProxies;
        target.push(proxy);
        this.tree.trackBody(proxy);
    }
    removeProxy(proxy) {
        var target = proxy.isStatic ? this.staticProxies : this.dynamicProxies;
        target.splice(target.indexOf(proxy), 1);
        this.tree.untrackBody(proxy);
    }
    collide() {
        //Loop back over the proxies
        var i = this.dynamicProxies.length;
        while (--i >= 0) {
            var dynamicProxy = this.dynamicProxies[i];
            //Has body (therefore is in control)
            if (dynamicProxy.body != null) {
                if (!dynamicProxy.isSensor)
                    //First test against map
                    this.map.testCollision(dynamicProxy);
                //if it can sleep, sleep it
                if (dynamicProxy.body.canSleep) {
                    this.sleep(dynamicProxy);
                }
            }
            this.tree.updateBody(dynamicProxy);
        }
        var k = this.dynamicProxies.length;
        while (--k >= 0) {
            var dynamicProxy = this.dynamicProxies[k];
            this.tree.query(dynamicProxy);
            // this.tree.query(dynamicProxy, (other: BFProxy) => {
            //     Collide(dynamicProxy, other);
            //     return false;
            // });
        }
    }
    QueryArea(aabb, result, checkDynamic = true, checkStatic = true) {
        const area = new __WEBPACK_IMPORTED_MODULE_1__geom_AABB2__["a" /* AABB2 */]();
        area.copyAABB(aabb);
        this.tree.queryArea(area, result);
    }
    CastRay(ray, result, checkDynamic = true, checkStatic = true) {
        this.map.castRay(ray);
        // TODO
        // this.tree.rayCastQuery(ray, 1000, (other: BFProxy) => {
        //     console.log("zap");
        //     return false;
        // });
        // if (checkDynamic) {
        //     for (let i = 0; i < this.sleepingProxies.length; i++) {
        //         const proxy = this.sleepingProxies[i];
        //         if (!proxy.isSensor) RayAABB(ray, proxy);
        //     }
        //     for (let i = 0; i < this.dynamicProxies.length; i++) {
        //         const proxy = this.dynamicProxies[i];
        //         if (!proxy.isSensor) RayAABB(ray, proxy);
        //     }
        // }
        // if (checkStatic) {
        //     for (let i = 0; i < this.staticProxies.length; i++) {
        //         const proxy = this.staticProxies[i];
        //         if (!proxy.isSensor) RayAABB(ray, proxy);
        //     }
        // }
    }
    wake(proxy) {
        return;
        // TODO fix sleeping
        // this.sleepingProxies.splice(this.sleepingProxies.indexOf(proxy), 1);
        // proxy.body.isSleeping = false;
        // this.dynamicProxies.push(proxy);
    }
    sleep(proxy) {
        return;
        // TODO fix sleeping
        // this.dynamicProxies.splice(this.dynamicProxies.indexOf(proxy), 1);
        // proxy.body.isSleeping = true;
        // this.sleepingProxies.push(proxy);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DynamicTreeBroadphase;



/***/ }),
/* 156 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geom_AABB2__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Intersect__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_Pool__ = __webpack_require__(48);



const boundsPadding = 5;
const dynamicTreeVelocityMultiplyer = 3;
class TreeNode {
    constructor(parent) {
        this.reset(parent);
    }
    reset(parent) {
        this.parent = parent || null;
        this.body = null;
        this.bounds = new __WEBPACK_IMPORTED_MODULE_0__geom_AABB2__["a" /* AABB2 */]();
        this.left = null;
        this.right = null;
        this.height = 0;
    }
    isLeaf() {
        return !this.left && !this.right;
    }
}
/* unused harmony export TreeNode */

class DynamicTree {
    constructor(worldBounds = new __WEBPACK_IMPORTED_MODULE_0__geom_AABB2__["a" /* AABB2 */](-Number.MAX_VALUE, -Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE)) {
        this.worldBounds = worldBounds;
        this.root = null;
        this.nodes = new Map(); //{};
        this.tempBounds = new __WEBPACK_IMPORTED_MODULE_0__geom_AABB2__["a" /* AABB2 */]();
        this.nodePool = new __WEBPACK_IMPORTED_MODULE_2__util_Pool__["a" /* Pool */](() => new TreeNode());
        this.nodePool.addCapacity(1000);
    }
    insertNode(leaf) {
        // If there are no nodes in the tree, make this the root leaf
        if (this.root === null) {
            this.root = leaf;
            this.root.parent = null;
            return;
        }
        // Search the tree for a node that is not a leaf and find the best place to insert
        var leafAABB = leaf.bounds;
        var currentRoot = this.root;
        while (!currentRoot.isLeaf()) {
            const left = currentRoot.left;
            const right = currentRoot.right;
            const area = currentRoot.bounds.perimeter();
            // var combinedAABB = currentRoot.bounds.combine(leafAABB);
            // var combinedArea = combinedAABB.perimeter();
            const combinedArea = this.tempBounds.combine2(currentRoot.bounds, leafAABB).perimeter();
            // Calculate cost heuristic for creating a new parent and leaf
            const cost = 2 * combinedArea;
            // Minimum cost of pushing the leaf down the tree
            const inheritanceCost = 2 * (combinedArea - area);
            // Cost of descending
            var leftCost = 0;
            const leftCombinedPerimeter = this.tempBounds.combine2(leafAABB, left.bounds).perimeter(); // leafAABB.combine(left.bounds);
            var newArea = 0;
            var oldArea = 0;
            if (left.isLeaf()) {
                leftCost = leftCombinedPerimeter + inheritanceCost;
            }
            else {
                oldArea = left.bounds.perimeter();
                newArea = leftCombinedPerimeter;
                leftCost = newArea - oldArea + inheritanceCost;
            }
            var rightCost = 0;
            const rightCombinedPerimeter = this.tempBounds.combine2(leafAABB, right.bounds).perimeter(); // leafAABB.combine(right.bounds);
            if (right.isLeaf()) {
                rightCost = rightCombinedPerimeter + inheritanceCost;
            }
            else {
                oldArea = right.bounds.perimeter();
                newArea = rightCombinedPerimeter;
                rightCost = newArea - oldArea + inheritanceCost;
            }
            // cost is acceptable
            if (cost < leftCost && cost < rightCost) {
                break;
            }
            // Descend to the depths
            if (leftCost < rightCost) {
                currentRoot = left;
            }
            else {
                currentRoot = right;
            }
        }
        // Create the new parent node and insert into the tree
        var oldParent = currentRoot.parent;
        // var newParent = new TreeNode(oldParent);
        var newParent = this.nodePool.reserve();
        newParent.reset(oldParent);
        // console.log(this.nodePool.assigned);
        // newParent.bounds = leafAABB.combine(currentRoot.bounds);
        newParent.bounds.combine2(leafAABB, currentRoot.bounds);
        newParent.height = currentRoot.height + 1;
        if (oldParent !== null) {
            // The sibling node was not the root
            if (oldParent.left === currentRoot) {
                oldParent.left = newParent;
            }
            else {
                oldParent.right = newParent;
            }
            newParent.left = currentRoot;
            newParent.right = leaf;
            currentRoot.parent = newParent;
            leaf.parent = newParent;
        }
        else {
            // The sibling node was the root
            newParent.left = currentRoot;
            newParent.right = leaf;
            currentRoot.parent = newParent;
            leaf.parent = newParent;
            this.root = newParent;
        }
        // Walk up the tree fixing heights and AABBs
        var currentNode = leaf.parent;
        while (currentNode) {
            currentNode = this.balanceNode(currentNode);
            if (!currentNode.left) {
                throw new Error("Parent of current leaf cannot have a null left child" + currentNode);
            }
            if (!currentNode.right) {
                throw new Error("Parent of current leaf cannot have a null right child" + currentNode);
            }
            currentNode.height = 1 + Math.max(currentNode.left.height, currentNode.right.height);
            // currentNode.bounds = currentNode.left.bounds.combine(currentNode.right.bounds);
            currentNode.bounds.combine2(currentNode.left.bounds, currentNode.right.bounds);
            currentNode = currentNode.parent;
        }
    }
    removeNode(leaf) {
        if (leaf === this.root) {
            this.root = null;
            return;
        }
        const parent = leaf.parent;
        const grandParent = parent.parent;
        var sibling;
        if (parent.left === leaf) {
            sibling = parent.right;
        }
        else {
            sibling = parent.left;
        }
        if (grandParent) {
            if (grandParent.left === parent) {
                grandParent.left = sibling;
            }
            else {
                grandParent.right = sibling;
            }
            sibling.parent = grandParent;
            // DELETE PARENT!!
            this.nodePool.free(parent);
            var currentNode = grandParent;
            while (currentNode) {
                currentNode = this.balanceNode(currentNode);
                // currentNode.bounds = currentNode.left.bounds.combine(currentNode.right.bounds);
                currentNode.bounds.combine2(currentNode.left.bounds, currentNode.right.bounds);
                currentNode.height = 1 + Math.max(currentNode.left.height, currentNode.right.height);
                currentNode = currentNode.parent;
            }
        }
        else {
            this.root = sibling;
            sibling.parent = null;
            //DELETE PARENT;
            this.nodePool.free(parent);
        }
    }
    /**
     * Tracks a body in the dynamic tree
     */
    trackBody(body) {
        // var node = new TreeNode();
        var node = this.nodePool.reserve();
        node.reset();
        node.body = body;
        node.bounds.copyAABB(body.aabb);
        node.bounds.expand(2);
        this.nodes.set(body.id, node);
        this.insertNode(node);
    }
    /**
     * Updates the dynamic tree given the current bounds of each body being tracked
     */
    updateBody(body) {
        var node = this.nodes.get(body.id);
        if (!node) {
            return false;
        }
        // var b = body.aabb.toAABB2();
        // body.aabb.copyToAABB2(this.tempBounds);
        this.tempBounds.copyAABB(body.aabb);
        var multdx = body.body.delta.x;
        var multdy = body.body.delta.y;
        if (multdx < 0) {
            this.tempBounds.l += multdx;
        }
        else {
            this.tempBounds.r += multdx;
        }
        if (multdy < 0) {
            this.tempBounds.t += multdy;
        }
        else {
            this.tempBounds.b += multdy;
        }
        // sqthis.tempBounds.transform(body.body.position);
        // if the body is outside the world no longer update it
        // console.log("a");
        // if (!this.worldBounds.contains(this.tempBounds)) {
        //     //    Logger.getInstance().warn('Actor with id ' + body.actor.id +
        //     //       ' is outside the world bounds and will no longer be tracked for physics');
        //     this.untrackBody(body);
        //     return false;
        // }
        // console.log("b");
        // Fixme this is wrong
        if (node.bounds.contains(this.tempBounds)) {
            return false;
        }
        this.removeNode(node);
        this.tempBounds.l -= boundsPadding;
        this.tempBounds.t -= boundsPadding;
        this.tempBounds.r += boundsPadding;
        this.tempBounds.b += boundsPadding;
        multdx = body.body.delta.x * dynamicTreeVelocityMultiplyer;
        multdy = body.body.delta.y * dynamicTreeVelocityMultiplyer;
        // TODO Fix this hack
        // var multdx = (body.body ? body.body.delta.x : 5) * dynamicTreeVelocityMultiplyer;
        // var multdy = (body.body ? body.body.delta.y : 5) * dynamicTreeVelocityMultiplyer;
        if (multdx < 0) {
            this.tempBounds.l += multdx;
        }
        else {
            this.tempBounds.r += multdx;
        }
        if (multdy < 0) {
            this.tempBounds.t += multdy;
        }
        else {
            this.tempBounds.b += multdy;
        }
        // node.bounds = b;
        node.bounds.copy(this.tempBounds);
        this.insertNode(node);
        // console.log("rebalance");
        return true;
    }
    /**
     * Untracks a body from the dynamic tree
     */
    untrackBody(body) {
        var node = this.nodes.get(body.id);
        if (!node) {
            return;
        }
        this.removeNode(node);
        // DELETE NODE
        this.nodePool.free(node);
        // this.nodes[body.id] = null;
        // delete this.nodes[body.id];
        this.nodes.delete(body.id);
    }
    /**
     * Balances the tree about a node
     */
    balanceNode(node) {
        if (node.isLeaf() || node.height < 2) {
            return node;
        }
        var left = node.left;
        var right = node.right;
        var a = node;
        var b = left;
        var c = right;
        var d = left.left;
        var e = left.right;
        var f = right.left;
        var g = right.right;
        var balance = c.height - b.height;
        // Rotate c node up
        if (balance > 1) {
            // Swap the right node with it's parent
            c.left = a;
            c.parent = a.parent;
            a.parent = c;
            // The original node's old parent should point to the right node
            // this is mega confusing
            if (c.parent) {
                if (c.parent.left === a) {
                    c.parent.left = c;
                }
                else {
                    c.parent.right = c;
                }
            }
            else {
                this.root = c;
            }
            // Rotate
            if (f.height > g.height) {
                c.right = f;
                a.right = g;
                g.parent = a;
                // a.bounds = b.bounds.combine(g.bounds);
                a.bounds.combine2(b.bounds, g.bounds);
                // c.bounds = a.bounds.combine(f.bounds);
                c.bounds.combine2(a.bounds, f.bounds);
                a.height = 1 + Math.max(b.height, g.height);
                c.height = 1 + Math.max(a.height, f.height);
            }
            else {
                c.right = g;
                a.right = f;
                f.parent = a;
                // a.bounds = b.bounds.combine(f.bounds);
                a.bounds.combine2(b.bounds, f.bounds);
                // c.bounds = a.bounds.combine(g.bounds);
                c.bounds.combine2(a.bounds, g.bounds);
                a.height = 1 + Math.max(b.height, f.height);
                c.height = 1 + Math.max(a.height, g.height);
            }
            return c;
        }
        // Rotate left node up
        if (balance < -1) {
            // swap
            b.left = a;
            b.parent = a.parent;
            a.parent = b;
            // node's old parent should point to b
            if (b.parent) {
                if (b.parent.left === a) {
                    b.parent.left = b;
                }
                else {
                    if (b.parent.right !== a) {
                        throw "Error rotating Dynamic Tree";
                    }
                    b.parent.right = b;
                }
            }
            else {
                this.root = b;
            }
            // rotate
            if (d.height > e.height) {
                b.right = d;
                a.left = e;
                e.parent = a;
                // a.bounds = c.bounds.combine(e.bounds);
                a.bounds.combine2(c.bounds, e.bounds);
                //b.bounds = a.bounds.combine(d.bounds);
                b.bounds.combine2(a.bounds, d.bounds);
                a.height = 1 + Math.max(c.height, e.height);
                b.height = 1 + Math.max(a.height, d.height);
            }
            else {
                b.right = e;
                a.left = d;
                d.parent = a;
                // a.bounds = c.bounds.combine(d.bounds);
                a.bounds.combine2(c.bounds, d.bounds);
                // b.bounds = a.bounds.combine(e.bounds);
                b.bounds.combine2(a.bounds, e.bounds);
                a.height = 1 + Math.max(c.height, d.height);
                b.height = 1 + Math.max(a.height, e.height);
            }
            return b;
        }
        return node;
    }
    /**
     * Returns the internal height of the tree, shorter trees are better. Performance drops as the tree grows
     */
    getHeight() {
        if (this.root === null) {
            return 0;
        }
        return this.root.height;
    }
    /**
     * Queries the Dynamic Axis Aligned Tree for bodies that could be colliding with the provided body.
     *
     * In the query callback, it will be passed a potential collider. Returning true from this callback indicates
     * that you are complete with your query and you do not want to continue. Returning false will continue searching
     * the tree until all possible colliders have been returned.
     */
    query(body) {
        var b = this.nodes.get(body.id);
        var bounds = b.bounds;
        //var bounds = body.aabb.toAABB2();
        DynamicTree.queryHelper(body, bounds, this.root);
    }
    // var helper = (currentNode: TreeNode): boolean => {
    //     // console.log(currentNode && currentNode.body ? currentNode.body.userData1 : "?", currentNode.bounds, body.userData1, bounds);
    //     if (currentNode && currentNode.bounds.intersect(bounds)) {
    //         if (currentNode.isLeaf() && currentNode.body !== body) {
    //             if (callback.call(body, currentNode.body)) {
    //                 return true;
    //             }
    //         } else {
    //             return helper(currentNode.left) || helper(currentNode.right);
    //         }
    //     }
    //     return false;
    // };
    // helper(this.root);
    static queryHelper(body, bounds, currentNode) {
        if (currentNode && currentNode.bounds.intersect(bounds)) {
            if (currentNode.isLeaf() && currentNode.body !== body) {
                Object(__WEBPACK_IMPORTED_MODULE_1__Intersect__["c" /* Collide */])(body, currentNode.body);
                return false;
            }
            else {
                return (DynamicTree.queryHelper(body, bounds, currentNode.left) ||
                    DynamicTree.queryHelper(body, bounds, currentNode.right));
            }
        }
        return false;
    }
    //  /**
    //   * Queries the Dynamic Axis Aligned Tree for bodies that could be intersecting. By default the raycast query uses an infinitely
    //   * long ray to test the tree specified by `max`.
    //   *
    //   * In the query callback, it will be passed a potential body that intersects with the racast. Returning true from this
    //   * callback indicates that your are complete with your query and do not want to continue. Return false will continue searching
    //   * the tree until all possible bodies that would intersect with the ray have been returned.
    //   */
    rayCastQuery(ray, max = Infinity, callback) {
        var helper = (currentNode) => {
            if (currentNode && Object(__WEBPACK_IMPORTED_MODULE_1__Intersect__["e" /* RayAABB */])(ray, currentNode.body)) {
                //if (currentNode && currentNode.bounds.rayCast(ray, max)) {
                if (currentNode.isLeaf()) {
                    if (callback.call(ray, currentNode.body)) {
                        // ray hit a leaf! return the body
                        return true;
                    }
                }
                else {
                    // ray hit but not at a leaf, recurse deeper
                    return helper(currentNode.left) || helper(currentNode.right);
                }
            }
            return false; // ray missed
        };
        helper(this.root);
    }
    queryArea(area, callback) {
        var helper = (currentNode) => {
            if (currentNode && currentNode.bounds.intersect(area)) {
                if (currentNode.isLeaf()) {
                    callback(currentNode.body);
                    return false;
                }
                else {
                    return helper(currentNode.left) || helper(currentNode.right);
                }
            }
            return false;
        };
        helper(this.root);
    }
    //  public getNodes(): TreeNode[] {
    //     var helper = (currentNode: TreeNode): TreeNode[] => {
    //        if (currentNode) {
    //           return [currentNode].concat(helper(currentNode.left), helper(currentNode.right));
    //        } else {
    //           return [];
    //        }
    //     };
    //     return helper(this.root);
    //  }
    debugDraw(render) {
        // draw all the nodes in the Dynamic Tree
        var helper = (currentNode) => {
            if (currentNode) {
                if (currentNode.isLeaf()) {
                    //  ctx.lineWidth = 1;
                    //  ctx.strokeStyle = 'green';
                    render.DrawAABB2(currentNode.bounds, "green");
                }
                else {
                    //  ctx.lineWidth = 1;
                    //  ctx.strokeStyle = 'white';
                    render.DrawAABB2(currentNode.bounds, "white");
                }
                if (currentNode.left) {
                    helper(currentNode.left);
                }
                if (currentNode.right) {
                    helper(currentNode.right);
                }
            }
        };
        helper(this.root);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DynamicTree;



/***/ }),
/* 157 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glaze_ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glaze_core_components_Position__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__glaze_physics_components_PhysicsBody__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_Chicken__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__glaze_util_Random__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__glaze_geom_Vector2__ = __webpack_require__(0);






class ChickenSystem extends __WEBPACK_IMPORTED_MODULE_0__glaze_ecs_System__["a" /* System */] {
    constructor(particleEngine) {
        super([__WEBPACK_IMPORTED_MODULE_1__glaze_core_components_Position__["a" /* Position */], __WEBPACK_IMPORTED_MODULE_3__components_Chicken__["a" /* Chicken */], __WEBPACK_IMPORTED_MODULE_2__glaze_physics_components_PhysicsBody__["a" /* PhysicsBody */]]);
        this.particleEngine = particleEngine;
    }
    updateEntity(entity, position, chicken, physicsBody) {
        var dist = 1000 * 1000;
        var body = physicsBody.body;
        var dir = 0;
        if (this.scaredOfPosition != null) {
            dist = body.position.distSqrd(this.scaredOfPosition.coords);
            dir = body.position.x - this.scaredOfPosition.coords.x < 0 ? -1 : 1;
        }
        if (dist < 64 * 64) {
            if (Object(__WEBPACK_IMPORTED_MODULE_4__glaze_util_Random__["a" /* RandomBoolean */])(0.1)) {
                body.addForce(new __WEBPACK_IMPORTED_MODULE_5__glaze_geom_Vector2__["a" /* Vector2 */](dir * 5000, -8000));
                this.particleEngine.EmitParticle(body.position.x, body.position.y, dir * -10, -100, 0, 5, 800, 1, false, true, null, 4, 255, 255, 255, 255);
            }
        }
        else {
            if (Object(__WEBPACK_IMPORTED_MODULE_4__glaze_util_Random__["a" /* RandomBoolean */])(0.005)) {
                var dir = Object(__WEBPACK_IMPORTED_MODULE_4__glaze_util_Random__["d" /* RandomSign */])(0.5);
                position.direction.x = -dir;
                body.addForce(new __WEBPACK_IMPORTED_MODULE_5__glaze_geom_Vector2__["a" /* Vector2 */](dir * 5000, -8000));
                this.particleEngine.EmitParticle(body.position.x, body.position.y, dir * -20, -100, 0, 5, 800, 1, false, true, null, 4, 255, 255, 255, 255);
            }
        }
    }
    scaredOf(entity) {
        const position = this.engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_1__glaze_core_components_Position__["a" /* Position */]);
        if (position) {
            this.scaredOfPosition = position;
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ChickenSystem;



/***/ }),
/* 158 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_components_Position__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_DebugGraphics__ = __webpack_require__(72);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_components_Extents__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__render_debug_DebugRenderer__ = __webpack_require__(159);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__GlazeEngine__ = __webpack_require__(30);






class DebugRenderSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor(canvas, camera) {
        super([__WEBPACK_IMPORTED_MODULE_1__core_components_Position__["a" /* Position */], __WEBPACK_IMPORTED_MODULE_3__core_components_Extents__["a" /* Extents */], __WEBPACK_IMPORTED_MODULE_2__components_DebugGraphics__["a" /* DebugGraphics */]]);
        this.canvas = canvas;
        this.camera = camera;
        this.debugRender = new __WEBPACK_IMPORTED_MODULE_4__render_debug_DebugRenderer__["a" /* DebugRenderer */](canvas, camera, 1280, 768);
    }
    preUpdate() {
        if (!__WEBPACK_IMPORTED_MODULE_5__GlazeEngine__["a" /* GlazeEngine */].params.debug) {
            return false;
        }
        this.debugRender.Clear();
    }
    updateEntity(entity, position, extents, graphics) {
        this.debugRender.DrawCross(position.coords.x, position.coords.y, 15);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DebugRenderSystem;



/***/ }),
/* 159 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class DebugRenderer {
    constructor(view, camera, width = 800, height = 600) {
        this.view = view;
        this.camera = camera;
        this.ctx = view.getContext("2d");
        this.Resize(width, height);
    }
    Resize(width, height) {
        this.width = width;
        this.height = height;
        this.view.width = width;
        this.view.height = height;
    }
    Clear() {
        this.ctx.setTransform(1, 0, 0, 1, 0, 0);
        this.ctx.clearRect(0, 0, this.width, this.height);
        this.ctx.strokeStyle = "rgba(0,255,0,1)";
        this.ctx.translate(this.camera.position.x, this.camera.position.y);
    }
    DrawRect(x, y, w, h, colour) {
        this.ctx.strokeRect(x, y, w, h);
    }
    // public DrawAABB(aabb: AABB) {
    //     this.ctx.strokeRect(aabb.l, aabb.t, aabb.width, aabb.height);
    // }
    DrawAABB(aabb, colour = "white") {
        this.ctx.strokeStyle = colour;
        this.ctx.beginPath();
        this.ctx.moveTo(aabb.l, aabb.t);
        this.ctx.lineTo(aabb.r, aabb.t);
        this.ctx.moveTo(aabb.r, aabb.b);
        this.ctx.lineTo(aabb.l, aabb.b);
        this.ctx.stroke();
    }
    DrawAABB2(aabb, colour = "white") {
        this.ctx.strokeStyle = colour;
        this.ctx.beginPath();
        this.ctx.moveTo(aabb.l, aabb.t);
        this.ctx.lineTo(aabb.r, aabb.t);
        this.ctx.lineTo(aabb.r, aabb.b);
        this.ctx.lineTo(aabb.l, aabb.b);
        this.ctx.lineTo(aabb.l, aabb.t);
        this.ctx.stroke();
    }
    DrawCross(x, y, l) {
        this.ctx.beginPath();
        this.ctx.moveTo(x - l, y);
        this.ctx.lineTo(x + l, y);
        this.ctx.moveTo(x, y - l);
        this.ctx.lineTo(x, y + l);
        this.ctx.stroke();
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DebugRenderer;



/***/ }),
/* 160 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glaze_ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_GunTurret__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__glaze_core_components_Position__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__glaze_util_CombatUtils__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__glaze_physics_collision_Filter__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__config_Filters__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__factories_projectile_StandardBullet__ = __webpack_require__(37);







class GunTurretSystem extends __WEBPACK_IMPORTED_MODULE_0__glaze_ecs_System__["a" /* System */] {
    constructor() {
        super([__WEBPACK_IMPORTED_MODULE_1__components_GunTurret__["a" /* GunTurret */], __WEBPACK_IMPORTED_MODULE_2__glaze_core_components_Position__["a" /* Position */]]);
    }
    updateEntity(entity, turret, position) {
        if (turret.intervalDelay.tick(this.dt)) {
            var entities = __WEBPACK_IMPORTED_MODULE_3__glaze_util_CombatUtils__["a" /* CombatUtils */].SearchSortAndFilter(position.coords, 400, entity, __WEBPACK_IMPORTED_MODULE_3__glaze_util_CombatUtils__["b" /* EntityFilterOptions */].ENEMY)
                .entities;
            if (entities.length > 0) {
                this.fireBulletAtEntity(position, entities[0].entity);
            }
        }
    }
    fireBulletAtEntity(position, target) {
        this.fireBullet(position.coords.clone(), this.engine.getComponentForEntity(target, __WEBPACK_IMPORTED_MODULE_2__glaze_core_components_Position__["a" /* Position */]).coords.clone());
    }
    fireBullet(pos, target) {
        var filter = new __WEBPACK_IMPORTED_MODULE_4__glaze_physics_collision_Filter__["a" /* Filter */]();
        filter.groupIndex = __WEBPACK_IMPORTED_MODULE_5__config_Filters__["a" /* TestFilters */].TURRET_GROUP;
        var bullet = __WEBPACK_IMPORTED_MODULE_6__factories_projectile_StandardBullet__["a" /* StandardBullet */].create(this.engine, new __WEBPACK_IMPORTED_MODULE_2__glaze_core_components_Position__["a" /* Position */](pos.x, pos.y), filter, target);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = GunTurretSystem;



/***/ }),
/* 161 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const throttle = function (fn, ms) {
    let lastCalled = 0;
    return function () {
        const now = Date.now();
        if (now - lastCalled > ms) {
            lastCalled = now;
            fn(...arguments);
        }
    };
};
/* harmony export (immutable) */ __webpack_exports__["a"] = throttle;



/***/ }),
/* 162 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__DisplayObjectContainer__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__geom_AABB2__ = __webpack_require__(11);



class Camera extends __WEBPACK_IMPORTED_MODULE_0__DisplayObjectContainer__["a" /* DisplayObjectContainer */] {
    constructor() {
        super();
        this.id = "Camera";
        this.realPosition = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */]();
        this.viewportSize = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */]();
        this.halfViewportSize = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */]();
        this.shake = new __WEBPACK_IMPORTED_MODULE_1__geom_Vector2__["a" /* Vector2 */]();
        this.viewPortAABB = new __WEBPACK_IMPORTED_MODULE_2__geom_AABB2__["a" /* AABB2 */]();
        this.worldExtentsAABB = new __WEBPACK_IMPORTED_MODULE_2__geom_AABB2__["a" /* AABB2 */]();
    }
    rf(v) {
        return v;
        // return Std.number(v);
    }
    Focus(x, y) {
        //Need to move the camera container the oposite way to the actual coords
        this.realPosition.x = x;
        this.realPosition.y = y;
        // realPosition.plusEquals(shake);
        //Clamp position inside shrunk camera extents
        this.cameraExtentsAABB.fitPoint(this.realPosition);
        var positionx = -this.realPosition.x + this.halfViewportSize.x;
        var positiony = -this.realPosition.y + this.halfViewportSize.y;
        // position.x = positionx;
        if (Math.abs(positionx - this.position.x) > 2)
            this.position.x = this.position.x + (positionx - this.position.x) * 0.1;
        if (Math.abs(positiony - this.position.y) > 2)
            this.position.y = this.position.y + (positiony - this.position.y) * 0.1;
        // position.y = positiony;
        this.position.plusEquals(this.shake);
        this.position.x = this.rf(this.position.x);
        this.position.y = this.rf(this.position.y);
        this.shake.setTo(0, 0);
    }
    Resize(width, height) {
        this.viewportSize.x = width;
        this.viewportSize.y = height;
        this.halfViewportSize.x = width / 2;
        this.halfViewportSize.y = height / 2;
        this.viewPortAABB.l = this.viewPortAABB.t = 0;
        this.viewPortAABB.r = this.viewportSize.x;
        this.viewPortAABB.b = this.viewportSize.y;
        //Clone the world size, then shrink it around the center by viewport size
        this.cameraExtentsAABB = this.worldExtentsAABB.clone();
        this.cameraExtentsAABB.expand2(width, height);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Camera;



/***/ }),
/* 163 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__physics_components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_Extents__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_Holder__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__components_Held__ = __webpack_require__(42);






class HolderSystem extends __WEBPACK_IMPORTED_MODULE_4__ecs_System__["a" /* System */] {
    constructor(holderFilterCategory) {
        super([__WEBPACK_IMPORTED_MODULE_0__physics_components_PhysicsCollision__["a" /* PhysicsCollision */], __WEBPACK_IMPORTED_MODULE_1__components_Extents__["a" /* Extents */], __WEBPACK_IMPORTED_MODULE_2__components_Holder__["a" /* Holder */], __WEBPACK_IMPORTED_MODULE_3__components_Active__["a" /* Active */]]);
        this.holderFilterCategory = holderFilterCategory;
        this.callback = this.callback.bind(this);
    }
    onEntityAdded(entity, physicsCollision, extents, holder, active) {
        physicsCollision.proxy.contactCallbacks.push(this.callback);
        physicsCollision.proxy.filter.maskBits |= this.holderFilterCategory;
    }
    updateAllEntities() { }
    callback(a, b, contact) {
        var holder = this.engine.getComponentForEntity(a.entity, __WEBPACK_IMPORTED_MODULE_2__components_Holder__["a" /* Holder */]);
        if (holder.activate == true) {
            this.hold(holder, b.entity, a.entity);
        }
    }
    hold(holder, item, holderEntity) {
        if (holder.heldItem == null && this.engine.getComponentForEntity(item, __WEBPACK_IMPORTED_MODULE_5__components_Held__["a" /* Held */]) == null) {
            var held = new __WEBPACK_IMPORTED_MODULE_5__components_Held__["a" /* Held */](holderEntity);
            this.engine.addComponentsToEntity(item, [held]);
            holder.heldItem = item;
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = HolderSystem;



/***/ }),
/* 164 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__physics_components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_Extents__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_Holdable__ = __webpack_require__(47);




class HoldableSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor(holderFilterCategory) {
        super([__WEBPACK_IMPORTED_MODULE_1__physics_components_PhysicsCollision__["a" /* PhysicsCollision */], __WEBPACK_IMPORTED_MODULE_2__components_Extents__["a" /* Extents */], __WEBPACK_IMPORTED_MODULE_3__components_Holdable__["a" /* Holdable */]]);
        this.holderFilterCategory = holderFilterCategory;
    }
    onEntityAdded(entity, physicsCollision, extents, holdable) {
        physicsCollision.proxy.filter.categoryBits |= this.holderFilterCategory;
    }
    updateAllEntities() { }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = HoldableSystem;



/***/ }),
/* 165 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_Holdable__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_Held__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__physics_components_PhysicsBody__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__components_Storeable__ = __webpack_require__(166);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__components_Position__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__components_Holder__ = __webpack_require__(41);








class HeldSystem extends __WEBPACK_IMPORTED_MODULE_0__ecs_System__["a" /* System */] {
    constructor() {
        super([__WEBPACK_IMPORTED_MODULE_6__components_Position__["a" /* Position */], __WEBPACK_IMPORTED_MODULE_1__components_Holdable__["a" /* Holdable */], __WEBPACK_IMPORTED_MODULE_2__components_Held__["a" /* Held */], __WEBPACK_IMPORTED_MODULE_3__physics_components_PhysicsBody__["a" /* PhysicsBody */], __WEBPACK_IMPORTED_MODULE_4__components_Active__["a" /* Active */]]);
    }
    onEntityAdded(entity, position, holdable, held, physicsBody, active) {
        var body = physicsBody.body;
        body.velocity.setTo(0, 0);
        body.skip = true;
        var holderPos = this.engine.getComponentForEntity(held.holder, __WEBPACK_IMPORTED_MODULE_6__components_Position__["a" /* Position */]).coords;
        position.coords.copy(holderPos);
        physicsBody.body.position.copy(holderPos);
        if (this.engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_5__components_Storeable__["a" /* Storeable */]) == null) {
            var holder = this.engine.getComponentForEntity(held.holder, __WEBPACK_IMPORTED_MODULE_7__components_Holder__["a" /* Holder */]);
            var holderBody = this.engine.getComponentForEntity(holder.parent, __WEBPACK_IMPORTED_MODULE_3__physics_components_PhysicsBody__["a" /* PhysicsBody */]).body;
            if (holderBody != null) {
                holderBody.setMass(holderBody.mass + body.mass);
            }
        }
    }
    onEntityRemoved(entity, position, holdable, held, physicsBody, active) {
        // var holder = held.holder;
        this.drop(held.holder);
        var body = physicsBody.body;
        body.skip = false;
        body.velocity.setTo(0, 0);
        if (this.engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_5__components_Storeable__["a" /* Storeable */]) == null) {
            var holder = this.engine.getComponentForEntity(held.holder, __WEBPACK_IMPORTED_MODULE_7__components_Holder__["a" /* Holder */]);
            var holderBody = this.engine.getComponentForEntity(holder.parent, __WEBPACK_IMPORTED_MODULE_3__physics_components_PhysicsBody__["a" /* PhysicsBody */]).body;
            //?
            // var holderBody = holder.parent.getComponent(PhysicsBody).body;
            if (holderBody != null) {
                holderBody.setMass(holderBody.mass - body.mass);
            }
        }
    }
    updateEntity(entity, position, holdable, held, physicsBody, active) {
        var holder = held.holder;
        var holderPos = this.engine.getComponentForEntity(holder, __WEBPACK_IMPORTED_MODULE_6__components_Position__["a" /* Position */]);
        var body = physicsBody.body;
        body.setStaticPosition(holderPos.coords.x + holderPos.direction.x * 4, holderPos.coords.y); //position.copy(holderPos);
        //entity.getComponent(PhysicsBody).body.position.copy(entity.getComponent(PhysicsBody).body.position);
        position.update(body.position);
    }
    drop(heldItem) {
        if (heldItem != null) {
            var _heldItem = heldItem;
            this.engine.removeComponentsFromEntity(heldItem, [__WEBPACK_IMPORTED_MODULE_2__components_Held__["a" /* Held */]]);
            heldItem = null;
            return _heldItem;
        }
        return null;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = HeldSystem;



/***/ }),
/* 166 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Storeable {
    constructor() { }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Storeable;



/***/ }),
/* 167 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Phase {
    constructor() {
        this.systems = [];
    }
    addSystem(system) {
        this.engine.addPhaseSystemToEngine(system);
        this.systems.push(system);
    }
    updatePhase(dt, timestamp) {
        this.systems.forEach(system => system.updateSystem(dt, timestamp));
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Phase;



/***/ }),
/* 168 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glaze_physics_components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glaze_core_components_Fixed__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_Door__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__glaze_core_components_Active__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__glaze_physics_collision_Filter__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__config_Filters__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__glaze_core_components_State__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__glaze_core_components_StateUpdater__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__components_Teleporter__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__glaze_geom_Vector2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__glaze_particle_components_ParticleEmitter__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__glaze_particle_emitter_ScanLine__ = __webpack_require__(169);












class TeleporterFactory {
    static create(engine, position, extents) {
        var telporter = engine.createEntity();
        var filter = new __WEBPACK_IMPORTED_MODULE_4__glaze_physics_collision_Filter__["a" /* Filter */]();
        filter.groupIndex = __WEBPACK_IMPORTED_MODULE_5__config_Filters__["a" /* TestFilters */].SOLID_OBJECT_GROUP;
        engine.addComponentsToEntity(telporter, [
            position,
            extents,
            new __WEBPACK_IMPORTED_MODULE_0__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */](true, null, []),
            new __WEBPACK_IMPORTED_MODULE_1__glaze_core_components_Fixed__["a" /* Fixed */](),
            new __WEBPACK_IMPORTED_MODULE_2__components_Door__["a" /* Door */]("door", false, ""),
            new __WEBPACK_IMPORTED_MODULE_8__components_Teleporter__["a" /* Teleporter */](new __WEBPACK_IMPORTED_MODULE_9__glaze_geom_Vector2__["a" /* Vector2 */](16 * 12, 16 * 36)),
            new __WEBPACK_IMPORTED_MODULE_6__glaze_core_components_State__["a" /* State */](TeleporterFactory.states, "on", true),
            new __WEBPACK_IMPORTED_MODULE_7__glaze_core_components_StateUpdater__["a" /* StateUpdater */]("telporterA", ["on", "off"]),
            new __WEBPACK_IMPORTED_MODULE_3__glaze_core_components_Active__["a" /* Active */](),
            new __WEBPACK_IMPORTED_MODULE_10__glaze_particle_components_ParticleEmitter__["a" /* ParticleEmitter */]([new __WEBPACK_IMPORTED_MODULE_11__glaze_particle_emitter_ScanLine__["a" /* ScanLine */](200, 100, 600, 10)])
        ]);
        return telporter;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = TeleporterFactory;

TeleporterFactory.mapping = "teleporter";
TeleporterFactory.states = {
    on: function (engine, entity) {
        var pc = engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_0__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */]);
        pc.proxy.isActive = true;
        debugger;
        engine.addComponentsToEntity(entity, []);
    },
    off: function (engine, entity) {
        var pc = engine.getComponentForEntity(entity, __WEBPACK_IMPORTED_MODULE_0__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */]);
        pc.proxy.isActive = true;
        engine.removeComponentsFromEntity(entity, [__WEBPACK_IMPORTED_MODULE_10__glaze_particle_components_ParticleEmitter__["a" /* ParticleEmitter */]]);
    },
};


/***/ }),
/* 169 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_components_Extents__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_Random__ = __webpack_require__(8);


class ScanLine {
    constructor(interval, velocity, ttl, jitter) {
        this.velocity = velocity;
        this.interval = interval;
        this.ttl = ttl;
        this.jitter = jitter;
        this.lastTime = 0;
    }
    update(time, c4e, position, particleEngine) {
        // debugger;
        if (time - this.lastTime < this.interval)
            return;
        this.lastTime = time;
        // var position = c4e(Position).coords;
        var extents = c4e(__WEBPACK_IMPORTED_MODULE_0__core_components_Extents__["a" /* Extents */]).halfWidths;
        for (let x = 0; x < 16; x++) {
            particleEngine.EmitParticle(position.x - 16 + x * 2, position.y - extents.y, 0, this.velocity + Object(__WEBPACK_IMPORTED_MODULE_1__util_Random__["c" /* RandomInteger */])(-this.jitter, this.jitter), 0, 0, this.ttl, 0.99, true, true, null, 4, 255, 255, 255, 255);
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ScanLine;



/***/ }),
/* 170 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__glaze_ecs_System__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__glaze_physics_components_PhysicsCollision__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_Teleporter__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__glaze_util_Random__ = __webpack_require__(8);




class TeleporterSystem extends __WEBPACK_IMPORTED_MODULE_0__glaze_ecs_System__["a" /* System */] {
    constructor() {
        super([__WEBPACK_IMPORTED_MODULE_1__glaze_physics_components_PhysicsCollision__["a" /* PhysicsCollision */], __WEBPACK_IMPORTED_MODULE_2__components_Teleporter__["a" /* Teleporter */]]);
        this.onCollision = this.onCollision.bind(this);
    }
    onEntityAdded(entity, physicsCollision, teleporter, state) {
        physicsCollision.proxy.contactCallbacks.push(this.onCollision);
    }
    onCollision(a, b, c) {
        if (Object(__WEBPACK_IMPORTED_MODULE_3__glaze_util_Random__["a" /* RandomBoolean */])(0.1)) {
            b.body.position.copy(this.engine.getComponentForEntity(a.entity, __WEBPACK_IMPORTED_MODULE_2__components_Teleporter__["a" /* Teleporter */]).teleportPosition);
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = TeleporterSystem;



/***/ }),
/* 171 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class WaterHolder {
    constructor(volume) {
        this.volume = volume;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = WaterHolder;



/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,